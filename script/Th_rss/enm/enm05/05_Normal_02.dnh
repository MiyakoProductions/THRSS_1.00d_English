//#東方弾幕風
#ScriptVersion[3]
#Title["桃源宮　stage5　垂神通常02"]
#Text[""]
#System["script/Th_rss/system/System_Main.dnh"]
#Image[""]
#Background[""]
	
	//　ライブラリ管理ファイル
	#include "./../lib_Control.dnh"
	#include "./lib_enm05_setting.dnh"
	#include "./lib_enm05_effect.dnh"
	#include "./05_Evolution.dnh"
	
	let enm00;
	let enm;
	let spl;
	
	//　カウンタ
	let frame		= 0;
	let count		= 0;
	let timer		= 0;
	
	//　制限時間
	let SET_TIMER	= 60;
	
	@Initialize{
		//　ボス生成
		enm	= ObjEnemy_Create(OBJ_ENEMY_BOSS);
		ObjEnemy_SetDamageRate(enm, 0, 0 );
		ObjEnemy_Regist(enm);
		
		//　初期化
		EnemyInitialize(enm);
		
		//　体力0まで待機
		EndEnemy(enm);
		
		//　打ち込みスコア
		ShotScore( enm );
		
		//　削除上限
		SetShotAutoDeleteClip( 64, 64, 64, 64 );
	}
	
	@Loading{
		//　弾データ読み込み　ALPHAとADD
		LoadEnemyShotData( csd ~ "./../../lib/lib_bullet_data.dnh" );
		LoadEnemyShotData( csd ~ "./../../lib/lib_bullet_data_ADD.dnh" );
	}
	
	@MainLoop{
		//　敵の当たり判定
		SetIntersection( enm, true, true );
		
		//　パワー集中エフェクト
		if( timer == 60 ){
			InitHanie();
		}
		
		if( timer == 180 ){
			Concentration03_Main( enm, power_rgb, 60 );
			EnemyFusion();
		}
		
		//　弾幕
		if( timer == 420 ){
			//　敵ダメージレート 第2引数:ボムバリア
			SetDamageRate( enm, 100, false );
			ShotMain( enm );
		}
		
		//　カウンタ
		if( !Obj_IsDeleted(enm) ){
			count++;
			frame++;
			timer++;
		}
		else{
			//　0でなんか発動すると困るので変な数値にする
			count	= -52149;
			frame	= -52149;
			timer	= -52149;
		}
		
		yield;
	}
	
	@Event{
		alternative( GetEventType() )
		case( EV_REQUEST_LIFE ){
			//　ライフ一律1000
			SetScriptResult( 1000 );
		}
		case( EV_REQUEST_TIMER ){
			//　制限時間
			SetScriptResult( SET_TIMER );
		}
		case( EV_REQUEST_SPELL_SCORE ){
			//　スペルカードボーナス
			SetScriptResult( SET_SCORE );
		}
	}
	
	@Finalize{ }
	
	//----------------------------------------------------------------------------------------------------
	//----------------------------------------------------------------------------------------------------
	//　task色々
	
	task EnemyInitialize(ID){
		//　アニメーション用共通データ作成
		CreateCommonDataArea("anime");
		SetAreaCommonData("anime","spa",false);
		
		//　60角形　距離64　優先71　遅延120.f　色[紫]　スペル用　[外枠出現処理ON,本体出現処理ON]
		//　"Default" or "Normal" or "SpellCard"
		CreateLifeBar(ID, 60, 64, 71, 0, [255,255,255], "Normal" , [false,false] );
		//　type　delay
		//　0:戦闘開始　1:戦闘継続
		RedMagicCircle( 1, 0 );
		Aura(ID, 8, aura_rgb[0], aura_rgb[1] );
		//　親ID　表示遅延　bool 移動効果　char 移動効果種別　bool フェードイン
		//　"BeginSpellCard" or "EndSpellCard"
		SetDrawTimer(enm, 0, true, "EndSpellCard", false );
		//　画像パスだけ変えればいいんじゃないかな
		let tex = EnemyDisplay_Enm05b(enm, true, enemy_tex_path );
		ObjMove_SetDestAtWeight(enm, CenX, CenY-96, 8, 8 );
		//　ボステクスチャ変更
		TextureChange( tex, enemy_tex_path2, 300 );
	}
	
	function Wait( long ){
		loop( long ){
			yield;
			if( Obj_IsDeleted( enm ) ){ return true; }
		}
		return false;
	}
	
	//　ショットメイン
	task ShotMain( ID ){
		let count	= 0;
		let frame	= 0;
		let i		= 0;
		
		//　way数
		let lp		= [ 2 ];

		//　発射間隔
		let wtA		= 20;
		let wtB		= 90;
		//　ショット画像
		let shote	= ADD_BGW_RED_22;

		//　拳サイズ
		let scale	= 0.8;

		let way		= 1;
		let wide	= 0;

		let roundway= 16;
		let speed	= 1.8;
		let delay	= 15;

		alternative( GetDifficult )
		case( "Easy" ){
			lp = [ 1 ];
			wtB = 120;
			roundway = 15;
		}
		case( "Normal" ){
			wtA = 30;
			wtB = 120;
			lp = [ 2, 1 ];
		}
		case( "Hard" ){
			lp = [ 3, 1 ];
			roundway = 15;
		}
		case( "Lunatic" ){
			wtA = 30;
			wtB = 75;
			lp = [ 1, 2 ];
			roundway = 20;
			speed = 1.5;
		}
		case( "OverDrive" ){
		}


		let gpos	= [ ObjMove_GetX(ID), ObjMove_GetY(ID) ];
		State;
		SetShot;
		task State{
			Wait( 120 );
			Concentration03_Main(ID, power_rgb, 60 );
			while( !Obj_IsDeleted( ID ) ){
				gpos	= [ ObjMove_GetX(ID), ObjMove_GetY(ID) ];
				yield;
			}
		}

		task SetShot{
			CallFamily( ID );
			Wait( 200 );
			let idx = 0;
			loop{
				loop( lp[ idx % length( lp ) ] ){
					let p = GetAngleToPlayer( ID );
					CreateFistShot_way( gpos, 0, p, 0.1, 20, [255,32,32], "RIGHT" );
					SetAreaCommonData( "anime", "spa", true );
					WorldShake_Single( 30, 4 );
					ObjSound_Play( CreateShotSE[8] );
					local{
						let angle = rand( 0, 360 );
						loop( roundway ){
							let sht = CreateShotA2( gpos[0], gpos[1], speed, angle, 0, 10, shote, delay );
							NotifyEventAll( EV_USER + 40, [ sht, delay ] );
							angle += 360 / roundway;
						}
					}
					if( Wait( wtA ) ){ return; }
				}
				EnemyMove(enm, 2, 8 );
				SetAreaCommonData( "anime", "spa", false );
				idx++;
				if( Wait( wtB ) ){ return; }
				
			}
		}

		//　N way拳弾
		task CreateFistShot_way( pos, speed, angle, acc, maxspeed, rgb_array, type ){
			let ag = angle - wide / 2;
			loop( way ){
				CreateFistShot( pos, speed, ag, acc, maxspeed, rgb_array, scale, type );
				ag += wide / ( way - 1 );
			}
		}
	}
	
	//　使い魔出現
	task CallFamily( ID ){
		let fam		= CreateEnemy_Jewel( "YELLOW", 0.2, 0, 2 );
		let gpos	= [ ObjMove_GetX(ID), ObjMove_GetY(ID) ];
		
		ObjMove_SetPosition(fam, gpos[0], gpos[1] );

		let way		= 4;
		let lp		= 16;
		let wt		= 4;
		let speed	= [ 2 ];
		let r = 1-round(rand(0,1))*2;
		
		alternative( GetDifficult )
		case( "Easy" ){
			lp = 40;
		}
		case( "Normal" ){
			lp = 32;
		}
		case( "Hard" ){
			lp = 48;
			way = 4;
			speed = [ 2, 1.25 ];
		}
		case( "Lunatic" ){
			lp = 36;
			way = 6;
			speed = [ 3.6, 1 ];
		}
		
		ObjMove_SetDestAtWeight(fam, gpos[0], gpos[1] - 64, 16, 4 );
		
		Wait( 60 );
		SetShotA;
		task SetShotA{
			let p = 90;
			loop{
				loop( lp ){
					let delay = 16;
					let angle = p;
					loop( way ){
						let sx = ObjMove_GetX( fam ) + 32 * cos( angle );
						let sy = ObjMove_GetY( fam ) + 32 * sin( angle );
						ascent( idx in 0..length( speed ) ){
							let sht = CreateShotA2( sx, sy, speed[idx], angle, 0, 10, BGB_YELLOW_07, delay );
							NotifyEventAll( EV_USER + 40, [ sht, delay ] );
						}
						angle += 360 / way;
					}
					p += ( 360 / way ) / lp *r;
					
					ObjSound_Play( CreateShotSE[1] );
					if( Wait(wt) ){ return; }
				}
				
				r = -r;
				JewelEffect( fam, [255,255,255], 4 );
				ObjSound_Play( CreateShotSE[7] );
			}
		}
	}
	
	task TextureChange( SpriteID, path, long ){
		Wait( long );
		ObjPrim_SetTexture( SpriteID, path );
	}
	
	task InitHanie(){
		//　埴得
		enm00 = CreateEnemyBase( 1000 );
		Aura_NoDistortion( enm00, 8, C_aura_rgb[0], C_aura_rgb[1] );
		EnemyDisplay01( enm00, true, enemy_tex_path00 );
		ShotScore( enm00 );
		ObjMove_SetPosition( enm00, MinX-128, MinY-128 );
		ObjMove_SetDestAtWeight( enm00, CenX-128, CenY-64, 8, 8 );
	}
	
	//　敵ベース作成
	function CreateEnemyBase( enemy_life ){
		let obj = ObjEnemy_Create( OBJ_ENEMY );
		
		ObjEnemy_SetLife( obj, enemy_life );
		ObjEnemy_SetDamageRate( obj, 0, 0 );
		ObjEnemy_Regist( obj );
		
		return obj;
	}
	
	task EnemyFusion(){
		let pos1	= [ ObjMove_GetX(enm00), ObjMove_GetY(enm00) ];
		let pos2	= [ ObjMove_GetX(enm), ObjMove_GetY(enm) ];
		let dist	= GetDistance( pos1, pos2 );
		let ang		= GetGapAngle( pos2, pos1 );
		let move1	= 0;
		let moveA	= 0;
		
		while( move1 < 1 ){
			pos2 = [ ObjMove_GetX(enm), ObjMove_GetY(enm) ];
			
			move1 = 1 * sin( moveA );
			
			let spos = [
				pos2[0] + (dist-move1*dist) * cos( ang + move1*180 ),
				pos2[1] + (dist-move1*dist) * sin( ang + move1*180 ),
			];
			ObjMove_SetDestAtWeight( enm00, spos[0], spos[1], 8, 8 );
			
			moveA += 1;
			
			yield;
		}
		Obj_Delete( enm00 );
		MegaEvolution_Enemy( enm );
	}
	
	//　pos1 から見た pos2 への角度を取得
	function GetGapAngle( pos1, pos2 ){
		return atan2( pos2[1]-pos1[1], pos2[0]-pos1[0] );
	}