//#東方弾幕風
#ScriptVersion[3]
#Title["桃源宮　stage7　五剣「ロンドオブアスクレピオス」"]
#Text[""]
#System["script/Th_rss/system/System_Main.dnh"]
#Image[""]
#Background[""]
	
	//　ライブラリ管理ファイル
	#include "./../lib_Control.dnh"
	#include "./lib_enm07_setting.dnh"
	#include "./lib_enm07_effect.dnh"
	
	let enm;
	let spl;
	
	//　カウンタ
	let count		= 0;
	
	//　制限時間
	let SET_TIMER	= 66;
	
	@Initialize{
		//　ボス生成
		enm	= ObjEnemy_Create(OBJ_ENEMY_BOSS);
		ObjEnemy_SetDamageRate( enm, 0, 0 );
		ObjEnemy_Regist( enm );
		
		//　初期化
		EnemyInitialize( enm );
		
		//　体力0まで待機
		EndEnemy( enm );
		
		//　敵ダメージレート 第2引数:ボムバリア
		SetDamageRate( enm, 100, true );
		ShotScore( enm );
		
		//　スペルカード宣言
		CallSpellCard( enm, 0 );
		
		//　削除上限
		SetShotAutoDeleteClip( 64, 64, 64, 64 );
	}
	
	@Loading{
		//　弾データ読み込み　ALPHAとADD
		LoadEnemyShotData( csd ~ "./../../lib/lib_bullet_data.dnh" );
		LoadEnemyShotData( csd ~ "./../../lib/lib_bullet_data_ADD.dnh" );
	}
	
	@MainLoop{
		//　敵の当たり判定
		SetIntersection( enm, true, true );
		
		//　弾幕
		if( count == 180 ){
			ShotMain( enm );
		}
		
		//　カウンタ
		count++;
		
		yield;
	}
	
	@Event{
		alternative( GetEventType() )
		case( EV_REQUEST_LIFE ){
			SetScriptResult( 1800 );
		}
		case( EV_REQUEST_TIMER ){
			//　制限時間
			SetScriptResult( SET_TIMER );
		}
		case( EV_REQUEST_SPELL_SCORE ){
			//　スペルカードボーナス
			SetScriptResult( SET_SCORE );
		}
		case( EV_GAIN_SPELL ){
			//　スペル取得
			SpellCounterGet( GetDifficult, 7, 7 );
		}
	}
	
	@Finalize{ }
	
	//----------------------------------------------------------------------------------------------------
	//----------------------------------------------------------------------------------------------------
	
	//　初期化
	task EnemyInitialize(ID){
		//　アニメーション用共通データ作成
		CreateCommonDataArea( "anime" );
		SetAreaCommonData( "anime", "spa", false );
		
		//　60角形　距離64　優先71　遅延120.f　色[紫]　スペル用　[外枠出現処理ON,本体出現処理ON]
		//　"Default" or "Normal" or "SpellCard"
		CreateLifeBar( ID, 60, 64, 71, 0, [255,255,255], "SpellCard" , [false,false] );
		//　type　delay
		//　0:戦闘開始　1:戦闘継続
		RedMagicCircle( 1, 0 );
		Aura( ID, 8, aura_rgb[0], aura_rgb[1] );
		//　親ID　表示遅延　bool 移動効果　char 移動効果種別　bool フェードイン
		//　"BeginSpellCard" or "EndSpellCard"
		SetDrawTimer( enm, 0, true, "BeginSpellCard", false );
		//　画像パスだけ変えればいいんじゃないかな
		EnemyDisplay_Enm07b( enm, true, enemy_tex_path );
		//　敵位置初期化
		ObjMove_SetDestAtWeight( enm, CenX, CenY-96, 8, 8 );
	}
	
	//　スペカ宣言
	task CallSpellCard(ID,long){
		Wait(long);
		spl	= GetEnemyBossSceneObjectID();
		ObjEnemyBossScene_StartSpell( spl );
		
		let spell_text = "";
		alternative( GetDifficult )
		case( "Extra" ){
			spell_text = "五剣「ロンドオブアスクレピオス」";
		}
		others{
			spell_text = "五剣「ロンドオブアスクレピオス」";
		}
		
		SpellCounter( GetDifficult, 7, 7 );
		let sct = GetSpellCounter( GetDifficult, 7, 7 );
		
		CutinSP2(ID, spell_text, 0, 0, true );
		SpellCardCutin(ID, "TIREIDEN", 220, 192, [1,1], enemy_cutin_path[1], 512, 512, true );
		SpellCardBonusDisplay(spl,ID );
		SpellCardHistoryDisplay(ID, sct[1], sct[0] );
		SetBackGroundEffect_07b(ID);
		SpellCardMagicTimer(ID);
	}
	
	//　遅延
	function Wait( long ){
		loop( long ){
			yield;
			if( Obj_IsDeleted( enm ) ){ return true; }
		}
		return false;
	}
	
	//　ショットメイン
	task ShotMain( ID ){
		Concentration03_Main( ID, power_rgb, 60 );
		
		Wait( 100 );
		
		let sht = Shot02();
		ObjSound_Play( CreateShotSE[3] );
		
		Wait( 60 );
		
		let v = 15;
		while( !Obj_IsDeleted(ID) ){
			let gpos = [ ObjMove_GetX(ID), ObjMove_GetY(ID) ];
			if( Wait( 90 ) ){ return; }
			EnemyMove( ID, 2, 8 );
			
			let ag		= GetAngleToPlayer(sht);
			let spos	= [ ObjMove_GetX(sht), ObjMove_GetY(sht) ];
			Shot01( ID, spos, ag, 0, 0 );
			ascent( let i in 0..12 ){
				if( Obj_IsDeleted(ID) ){ break; }
				Shot01( ID, spos, ag, (i+1)*16, (i+1)*(-v) );
				Shot01( ID, spos, ag, (i+1)*-16, (i+1)*v );
				ObjSound_Play( CreateShotSE[2] );
				if( Wait( 2 ) ){ return; }
			}
			if( v > 13.5 ){ v -= 0.15; }
			
			if( Wait( 90 ) ){ return; }
			EnemyMove( ID, 2, 8 );
		}
		Obj_Delete( sht );
	}
	
	//　3 基準角　4 ずれ　5 修正
	task Shot01( ID, gpos, angle, agd, agr ){
		let sht		= CreateSwordLaser( gpos, angle, 600, 16, 120, [128,255,255], 100 );
		let move1	= 0;
		let moveA	= 0;
		
		while( !Obj_IsDeleted(sht) && !Obj_IsDeleted(ID) && move1 < 1 ){
			
			move1 = 1 * sin( moveA );
			
			ObjStLaser_SetAngle( sht, angle + agd + move1*agr );
			
			moveA += 1;
			
			yield;
		}
		ObjSound_Play( CreateShotSE[11] );
	}
	
	function Shot02(){
		let sht = CreateNuClearShot01( [ CenX, CenY-32 ], 2.4, 270, -0.02, 0, "BLUE", 0.5, 0 );
		
		ObjShot_SetAutoDelete( sht, false );
		ObjShot_SetSpellResist( sht, true );
		
		Shot02_Main( sht );
		
		return sht;
	}
	
	task Shot02_Main( ID ){
		let lp		= 11;
		let ag		= 0;
		let h		= 11;
		let move1	= 0;
		let moveA	= 0;
		let speed	= 1;
		let smax	= 3.5;
		let wt		= 12;
		Wait( 120 );
		
		while( !Obj_IsDeleted(ID) ){
			let gpos = [ ObjMove_GetX(ID), ObjMove_GetY(ID) ];
			
			move1 = 1 * sin( moveA );
			
			
			let p = ag;
			ascent( let i in 0..5 ){
				if( Obj_IsDeleted(ID) ){ break; }
				let way = 18;
				let angle = 270 + p;
				loop( way ){
					CreateShot01( gpos, speed, angle, 0, 10, ADD_BGW_BLUE_31, 0 );
					angle += 360 / way;
				}
				p += 1 * move1;
				ObjSound_Play( CreateShotSE[1] );
				Wait( 2 );
				if( speed < smax ){ speed += 0.016; }
				yield;
			}
			
			ag += move1*h;
			if( move1 < 1 ){ moveA += 5; }
			if( speed >= smax && wt > 4 ){ wt -= 0.2; }
			Wait( wt );
		}
	}