//#東方弾幕風
#ScriptVersion[3]
#Title["桃源宮　stage7　天啓「グノーシスの英知」"]
#Text[""]
#System["script/Th_rss/system/System_Main.dnh"]
#Image[""]
#Background[""]
	
	//　ライブラリ管理ファイル
	#include "./../lib_Control.dnh"
	#include "./lib_enm07_setting.dnh"
	#include "./lib_enm07_effect.dnh"
	
	let enm;
	let spl;

	let r = 1;
	
	//　カウンタ
	let count		= 0;
	
	//　制限時間
	let SET_TIMER	= 56;
	
	@Initialize{
		//　ボス生成
		enm	= ObjEnemy_Create(OBJ_ENEMY_BOSS);
		ObjEnemy_SetDamageRate( enm, 0, 0 );
		ObjEnemy_Regist( enm );
		
		//　初期化
		EnemyInitialize( enm );
		
		//　体力0まで待機
		EndEnemy( enm );
		
		//　敵ダメージレート 第2引数:ボムバリア
		SetDamageRate( enm, 100, false );
		ShotScore( enm );
		
		//　スペルカード宣言
		CallSpellCard( enm, 0 );
		
		//　削除上限
		SetShotAutoDeleteClip( 128, 80, 128, 80 );
	}
	
	@Loading{
		//　弾データ読み込み　ALPHAとADD
		LoadEnemyShotData( csd ~ "./../../lib/lib_bullet_data.dnh" );
		LoadEnemyShotData( csd ~ "./../../lib/lib_bullet_data_ADD.dnh" );
	}
	
	@MainLoop{
		//　敵の当たり判定
		SetIntersection( enm, true, true );
		
		//　弾幕
		if( count == 180 ){
			ShotMain( enm );
		}
		//　カウンタ
		count++;
		
		yield;
	}
	
	@Event{
		alternative( GetEventType() )
		case( EV_REQUEST_LIFE ){
			SetScriptResult( 1280 );
		}
		case( EV_REQUEST_TIMER ){
			//　制限時間
			SetScriptResult( SET_TIMER );
		}
		case( EV_REQUEST_SPELL_SCORE ){
			//　スペルカードボーナス
			SetScriptResult( SET_SCORE );
		}
		case( EV_GAIN_SPELL ){
			//　スペル取得
			SpellCounterGet( GetDifficult, 7, 0 );
		}
	}
	
	@Finalize{ }
	
	//----------------------------------------------------------------------------------------------------
	//----------------------------------------------------------------------------------------------------
	
	//　初期化
	task EnemyInitialize(ID){
		//　アニメーション用共通データ作成
		CreateCommonDataArea( "anime" );
		SetAreaCommonData( "anime", "spa", false );
		
		//　60角形　距離64　優先71　遅延120.f　色[紫]　スペル用　[外枠出現処理ON,本体出現処理ON]
		//　"Default" or "Normal" or "SpellCard"
		CreateLifeBar( ID, 60, 64, 71, 0, [255,255,255], "Default" , [false,false] );
		//　type　delay
		//　0:戦闘開始　1:戦闘継続
		RedMagicCircle( 1, 0 );
		Aura( ID, 8, aura_rgb[0], aura_rgb[1] );
		//　親ID　表示遅延　bool 移動効果　char 移動効果種別　bool フェードイン
		//　"BeginSpellCard" or "EndSpellCard"
		SetDrawTimer( enm, 0, true, "BeginSpellCard", false );
		//　画像パスだけ変えればいいんじゃないかな
		EnemyDisplay_Enm07a( enm, true, enemy_tex_path00 );
		//　敵位置初期化
		ObjMove_SetDestAtWeight( enm, CenX, CenY, 8, 8 );
	}
	
	//　スペカ宣言
	task CallSpellCard(ID,long){
		Wait(long);
		spl	= GetEnemyBossSceneObjectID();
		ObjEnemyBossScene_StartSpell( spl );
		
		let spell_text = "";
		alternative( GetDifficult )
		case( "Extra" ){
			spell_text = "天啓「グノーシスの英知」";
		}
		others{
			spell_text = "天啓「グノーシスの英知」";
		}
		
		SpellCounter( GetDifficult, 7, 0 );
		let sct = GetSpellCounter( GetDifficult, 7, 0 );
		
		CutinSP2(ID, spell_text, 0, 0, true );
		SpellCardCutin(ID, "TIREIDEN", 220, 192, [1,1], enemy_cutin_path[0], 512, 512, true );
		SpellCardBonusDisplay(spl,ID );
		SpellCardHistoryDisplay(ID, sct[1], sct[0] );
		SetBackGroundEffect_07a(ID);
		SpellCardMagicTimer(ID);
	}
	
	//　遅延
	function Wait( long ){
		loop( long ){
			yield;
			if( Obj_IsDeleted( enm ) ){ return true; }
		}
		return false;
	}
	
	//　ショットメイン
	task ShotMain( ID ){
		Sub;
		State;
		while( !Obj_IsDeleted(ID) ){
			
			Shot01( ID );
			ObjSound_Play( CreateShotSE[8] );
			
			if( Wait( 180 ) ){ return; }
			r = -r;
		}

		task State{
			while( !Obj_IsDeleted( ID ) ){
				DeleteShotInCircle( TYPE_SHOT, TYPE_IMMEDIATE, ObjMove_GetX( ID ), ObjMove_GetY( ID ), 24 );
				yield;
			}
		}
	}
	task Sub{
		Wait( 210 );
		while( !Obj_IsDeleted( enm ) ){
			Concentration03_Main( enm, power_rgb, 60 );
			if( Wait( 60 ) ){ return; }
			let speed = 2;
			let wt = 60;
			loop( 3 ){
				let delay = 30;
				let way = 150;
				let shote = ADD_BGW_PURPLE_02;

				let angle = 0;
				loop( way ){
					let v = 296;
					let sx = CenX + v * cos( angle );
					let sy = CenY + v * sin( angle );
					let sht = CreateShotA2( sx, sy, 0, angle+180, speed / 60, speed, shote, delay );
					NotifyEventAll( EV_USER + 40, [ sht, delay ] );
					task Set( obj ){
						while( !Obj_IsDeleted( obj ) ){
							if( GetObjectDistance( obj, enm ) < 30 ){
								Obj_Delete( obj );
							}
							yield;
						}
					}
					angle += 360 / way;
				}
				ObjSound_Play( CreateShotSE[3] );
				if( Wait( wt ) ){ return; }
				wt /= 1.5;
				speed -= 0.5;
			}
			if( Wait( 180 ) ){ return; }
		}
	}
	
	function Shot01(ID){
		let gpos	= [ ObjMove_GetX( enm ), ObjMove_GetY( enm ) ];
		let sht		= CreateNuClearShot01( gpos, 0, 90, 0, 0, "PURPLE", 0.4, 0 );
		
		ObjShot_SetAutoDelete( sht, false );
		ObjShot_SetSpellResist( sht, true );
		
		Shot02_Main( ID, sht );
		
		return sht;
	}
	
	task Shot02_Main( ID, obj ){
		let speed = 0.25;
		let sbase = 0;
		let angle = GetAngleToPlayer( enm ) + 179 * r;
		let lp = 180;
		loop( 450 ){
			let gpos = [ ObjMove_GetX(obj), ObjMove_GetY(obj) ];
			let spos = [ GetPlayerX(), GetPlayerY() ];
			
			let dangle = absolute( 3 - speed );
			let dmax = 0.9;
			if( dangle >= dmax ){ dangle = dmax; }
			let toAngle = GetGapAngle( gpos, spos );
			let ret = toAngle - angle;
			if( ( ret > 0 && ret <= 180 ) || ( ret <= -180 ) ){ angle += dangle; }
			else if( ( ret > 180 ) || ( ret < 0 && ret > - 180 ) ){ angle += -dangle; }
			if( angle >= 180 ){ angle += -360; }
			if( angle < -180 ){ angle += 360; }

			if( sbase < 1.5 ){ sbase += 0.03; }
			else{
				DeleteShotInCircle( TYPE_SHOT, TYPE_FADE, gpos[0], gpos[1], 72 );
			}
			speed = sbase + 1 * cos( lp * 1.5 );
			
			ObjMove_SetSpeed( obj, speed );
			ObjMove_SetAngle( obj, angle );
			
			lp++;
			yield;
		}
		loop( 300 ){ 
			let gpos = [ ObjMove_GetX(obj), ObjMove_GetY(obj) ];
			speed += 0.01;
			DeleteShotInCircle( TYPE_SHOT, TYPE_FADE, gpos[0], gpos[1], 72 );
			ObjMove_SetSpeed( obj, speed );
			yield;
		}
		Obj_Delete( obj );
	}