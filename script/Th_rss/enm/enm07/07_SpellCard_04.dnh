//#東方弾幕風
#ScriptVersion[3]
#Title["桃源宮　stage7　四剣「エクステンドキャリバー」"]
#Text[""]
#System["script/Th_rss/system/System_Main.dnh"]
#Image[""]
#Background[""]
	
	//　ライブラリ管理ファイル
	#include "./../lib_Control.dnh"
	#include "./lib_enm07_setting.dnh"
	#include "./lib_enm07_effect.dnh"
	
	let enm;
	let spl;
	
	//　カウンタ
	let count		= 0;
	
	//　制限時間
	let SET_TIMER	= 67;
	
	@Initialize{
		//　ボス生成
		enm	= ObjEnemy_Create(OBJ_ENEMY_BOSS);
		ObjEnemy_SetDamageRate( enm, 0, 0 );
		ObjEnemy_Regist( enm );
		
		//　初期化
		EnemyInitialize( enm );
		
		//　体力0まで待機
		EndEnemy( enm );
		
		//　敵ダメージレート 第2引数:ボムバリア
		SetDamageRate( enm, 100, true );
		ShotScore( enm );
		
		//　スペルカード宣言
		CallSpellCard( enm, 0 );
		
		//　削除上限
		SetShotAutoDeleteClip( 64, 64, 64, 24 );
	}
	
	@Loading{
		//　弾データ読み込み　ALPHAとADD
		LoadEnemyShotData( csd ~ "./../../lib/lib_bullet_data.dnh" );
		LoadEnemyShotData( csd ~ "./../../lib/lib_bullet_data_ADD.dnh" );
	}
	
	@MainLoop{
		//　敵の当たり判定
		SetIntersection( enm, true, true );
		
		//　弾幕
		if( count == 180 ){
			ShotMain( enm );
		}
		
		//　カウンタ
		count++;
		
		yield;
	}
	
	@Event{
		alternative( GetEventType() )
		case( EV_REQUEST_LIFE ){
			SetScriptResult( 1500 );
		}
		case( EV_REQUEST_TIMER ){
			//　制限時間
			SetScriptResult( SET_TIMER );
		}
		case( EV_REQUEST_SPELL_SCORE ){
			//　スペルカードボーナス
			SetScriptResult( SET_SCORE );
		}
		case( EV_GAIN_SPELL ){
			//　スペル取得
			SpellCounterGet( GetDifficult, 7, 6 );
		}
	}
	
	@Finalize{ }
	
	//----------------------------------------------------------------------------------------------------
	//----------------------------------------------------------------------------------------------------
	
	//　初期化
	task EnemyInitialize(ID){
		//　アニメーション用共通データ作成
		CreateCommonDataArea( "anime" );
		SetAreaCommonData( "anime", "spa", false );
		
		//　60角形　距離64　優先71　遅延120.f　色[紫]　スペル用　[外枠出現処理ON,本体出現処理ON]
		//　"Default" or "Normal" or "SpellCard"
		CreateLifeBar( ID, 60, 64, 71, 0, [255,255,255], "SpellCard" , [false,false] );
		//　type　delay
		//　0:戦闘開始　1:戦闘継続
		RedMagicCircle( 1, 0 );
		Aura( ID, 8, aura_rgb[0], aura_rgb[1] );
		//　親ID　表示遅延　bool 移動効果　char 移動効果種別　bool フェードイン
		//　"BeginSpellCard" or "EndSpellCard"
		SetDrawTimer( enm, 0, true, "BeginSpellCard", false );
		//　画像パスだけ変えればいいんじゃないかな
		EnemyDisplay_Enm07b( enm, true, enemy_tex_path );
		//　敵位置初期化
		ObjMove_SetDestAtWeight( enm, CenX, CenY-96, 8, 8 );
	}
	
	//　スペカ宣言
	task CallSpellCard(ID,long){
		Wait(long);
		spl	= GetEnemyBossSceneObjectID();
		ObjEnemyBossScene_StartSpell( spl );
		
		let spell_text = "";
		alternative( GetDifficult )
		case( "Extra" ){
			spell_text = "四剣「エクステンドキャリバー」";
		}
		others{
			spell_text = "四剣「エクステンドキャリバー」";
		}
		
		SpellCounter( GetDifficult, 7, 6 );
		let sct = GetSpellCounter( GetDifficult, 7, 6 );
		
		CutinSP2(ID, spell_text, 0, 0, true );
		SpellCardCutin(ID, "TIREIDEN", 220, 192, [1,1], enemy_cutin_path[1], 512, 512, true );
		SpellCardBonusDisplay(spl,ID );
		SpellCardHistoryDisplay(ID, sct[1], sct[0] );
		SetBackGroundEffect_07b(ID);
		SpellCardMagicTimer(ID);
	}
	
	//　遅延
	function Wait( long ){
		loop( long ){
			yield;
			if( Obj_IsDeleted( enm ) ){ return true; }
		}
		return false;
	}
	
	//　ショットメイン
	task ShotMain( ID ){
		Concentration03_Main( ID, power_rgb, 60 );
		Wait( 100 );
		
		let r = 1 - round( rand( 0, 1 ) ) * 2;
		let lp = 0;
		while( !Obj_IsDeleted(ID) ){
			let gpos = [ ObjMove_GetX(ID), ObjMove_GetY(ID) ];
			
			//　最初のレーザーとワインダー
			Laser01( ID, 12, 48, [128,255,255], GetAngleToPlayer(ID), 60, 30 );
			ObjSound_Play( CreateShotSE[13] );
			let d		= truncate( 448 / 48 );
			let p		= GetAngleToPlayer( ID );
			let shote	= [ BGW_GREEN_14, BGB_GREEN_14 ];
			ascent( let i in 0..48 ){
				if( Obj_IsDeleted(ID) ){ break; }
				let dist = 0 + i*d;
				let v = 3;
				let way = 12;
				if( lp % 2 == 0 ){
					way = 8;
				}
				ascent( let j in 0..way ){
					let ag;
					ag = p + j * (360/way) + i*v*r;
					let angle = ag + 180;
					let wt = 120 - ( dist % 60 );
					if( lp % 2 == 0 ){
						wt = 120;
						angle += round( rand( -1, 1 ) ) * 2;
					}
					let spos = [ gpos[0] + dist * cos( ag ), gpos[1] + dist * sin( ag ) ];
					Shot01( ID, spos, 0, angle, 0.02, 2.24, shote, wt );
				}
				ObjSound_Play( CreateShotSE[1] );
				if( Wait( 1 ) ){ break; }
				yield;
			}
			
			if( Wait( 60 ) ){ break; }
			
			//　レーザーと中玉
			Laser01( ID, 12, 48, [255,128,255], GetAngleToPlayer(ID), 60, 30 );
			ObjSound_Play( CreateShotSE[13] );
			ascent( i in 0..48 ){
				let ang = i * (360/48);
				let spos = [
					gpos[0] + 16 * cos( ang ),
					gpos[1] + 16 * sin( ang ),
				];
				CreateShot01( spos, 4, 90 + ang, -0.1, 0.6, ADD_BGW_BLUE_02, 24 );
			}
			ObjSound_Play( CreateShotSE[0] );
			
			Wait( 340 );
			if( lp % 2 == 0 ){
				r = -r;
			}
			lp++;
			
			yield;
		}
	}
	
	//　敵との距離が 0 の時にしか削除されない
	task Shot01( ID, pos, speed, angle, acc, mx, shote, w ){
		let obj		= CreateShot01( pos, 0, angle, 0, 0, shote[0], 32 );
		
		ObjShot_SetAutoDelete( obj, false );
		ObjShot_SetSpellResist( obj, true );
		
		Wait( w );
		
		ObjShot_SetSpellResist( obj, false );
		
		ObjMove_SetSpeed( obj, speed );
		ObjMove_SetAcceleration( obj, acc );
		ObjMove_SetMaxSpeed( obj, mx );
		
		while( !Obj_IsDeleted(ID) && !Obj_IsDeleted(obj) ){
			let gpos = [ ObjMove_GetX(ID), ObjMove_GetY(ID) ];
			let dist = GetDistance( gpos, [ ObjMove_GetX(obj), ObjMove_GetY(obj) ] );
			
			if( dist <= 64 ){ break; }
			
			yield;
		}
		ObjSound_Play( CreateShotSE[1] );
		ObjShot_SetAutoDelete( obj, true );
		ObjShot_SetGraphic( obj, shote[1] );
		ObjMove_SetAcceleration( obj, -0.2 );
		ObjMove_SetMaxSpeed( obj, 1.4 );
	}
	
	task Laser01( ID, lp, dis, color, agb, delay, kill ){
		let gpos = [ ObjMove_GetX(ID), ObjMove_GetY(ID) ];
		ascent( let i in 0..lp ){
			let ag		= agb + i*(360/lp);
			let spos	= [ gpos[0] + dis * cos( ag ), gpos[1] + dis * sin( ag ) ];
			CreateSwordLaser( spos, agb, 512, 16, kill, color, delay );
		}
	}