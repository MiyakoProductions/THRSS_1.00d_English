//#東方弾幕風
#ScriptVersion[3]
#Title["桃源宮　stage7　三剣「その辺で拾った熾天使の剣」"]
#Text[""]
#System["script/Th_rss/system/System_Main.dnh"]
#Image[""]
#Background[""]
	
	//　ライブラリ管理ファイル
	#include "./../lib_Control.dnh"
	#include "./lib_enm07_setting.dnh"
	#include "./lib_enm07_effect.dnh"
	
	let enm;
	let spl;
	
	//　カウンタ
	let count		= 0;
	
	//　制限時間
	let SET_TIMER	= 60;
	
	@Initialize{
		//　ボス生成
		enm	= ObjEnemy_Create(OBJ_ENEMY_BOSS);
		ObjEnemy_SetDamageRate( enm, 0, 0 );
		ObjEnemy_Regist( enm );
		
		//　初期化
		EnemyInitialize( enm );
		
		//　体力0まで待機
		EndEnemy( enm );
		
		//　敵ダメージレート 第2引数:ボムバリア
		SetDamageRate( enm, 100, true );
		ShotScore( enm );
		
		//　スペルカード宣言
		CallSpellCard( enm, 0 );
		
		//　削除上限
		SetShotAutoDeleteClip( 96, 128, 96, 64 );
	}
	
	@Loading{
		//　弾データ読み込み　ALPHAとADD
		LoadEnemyShotData( csd ~ "./../../lib/lib_bullet_data.dnh" );
		LoadEnemyShotData( csd ~ "./../../lib/lib_bullet_data_ADD.dnh" );
	}
	
	@MainLoop{
		//　敵の当たり判定
		SetIntersection( enm, true, true );
		
		//　弾幕
		if( count == 180 ){
			ShotMain( enm );
		}
		
		//　カウンタ
		count++;
		
		yield;
	}
	
	@Event{
		alternative( GetEventType() )
		case( EV_REQUEST_LIFE ){
			SetScriptResult( 1800 );
		}
		case( EV_REQUEST_TIMER ){
			//　制限時間
			SetScriptResult( SET_TIMER );
		}
		case( EV_REQUEST_SPELL_SCORE ){
			//　スペルカードボーナス
			SetScriptResult( SET_SCORE );
		}
		case( EV_GAIN_SPELL ){
			//　スペル取得
			SpellCounterGet( GetDifficult, 7, 5 );
		}
	}
	
	@Finalize{ }
	
	//----------------------------------------------------------------------------------------------------
	//----------------------------------------------------------------------------------------------------
	
	//　初期化
	task EnemyInitialize(ID){
		//　アニメーション用共通データ作成
		CreateCommonDataArea( "anime" );
		SetAreaCommonData( "anime", "spa", false );
		
		//　60角形　距離64　優先71　遅延120.f　色[紫]　スペル用　[外枠出現処理ON,本体出現処理ON]
		//　"Default" or "Normal" or "SpellCard"
		CreateLifeBar( ID, 60, 64, 71, 0, [255,255,255], "SpellCard" , [false,false] );
		//　type　delay
		//　0:戦闘開始　1:戦闘継続
		RedMagicCircle( 1, 0 );
		Aura( ID, 8, aura_rgb[0], aura_rgb[1] );
		//　親ID　表示遅延　bool 移動効果　char 移動効果種別　bool フェードイン
		//　"BeginSpellCard" or "EndSpellCard"
		SetDrawTimer( enm, 0, true, "BeginSpellCard", false );
		//　画像パスだけ変えればいいんじゃないかな
		EnemyDisplay_Enm07b( enm, true, enemy_tex_path );
		//　敵位置初期化
		ObjMove_SetDestAtWeight( enm, CenX, CenY-64, 8, 8 );
	}
	
	//　スペカ宣言
	task CallSpellCard(ID,long){
		Wait(long);
		spl	= GetEnemyBossSceneObjectID();
		ObjEnemyBossScene_StartSpell( spl );
		
		let spell_text = "";
		alternative( GetDifficult )
		case( "Extra" ){
			spell_text = "三剣「その辺で拾った熾天使の剣」";
		}
		others{
			spell_text = "三剣「その辺で拾った熾天使の剣」";
		}
		
		SpellCounter( GetDifficult, 7, 5 );
		let sct = GetSpellCounter( GetDifficult, 7, 5 );
		
		CutinSP2(ID, spell_text, 0, 0, true );
		SpellCardCutin(ID, "TIREIDEN", 220, 192, [1,1], enemy_cutin_path[1], 512, 512, true );
		SpellCardBonusDisplay(spl,ID );
		SpellCardHistoryDisplay(ID, sct[1], sct[0] );
		SetBackGroundEffect_07b(ID);
		SpellCardMagicTimer(ID);
	}
	
	//　遅延
	function Wait( long ){
		loop( long ){
			yield;
			if( Obj_IsDeleted( enm ) ){ return true; }
		}
		return false;
	}
	
	//　ショットメイン
	task ShotMain( ID ){
		Concentration03_Main( ID, power_rgb, 60 );
		Wait( 100 );
		
		let r = 1 - round( rand( 0, 1 ) ) * 2;
		let type = 0;
		while( !Obj_IsDeleted(ID) ){
			let gpos = [ ObjMove_GetX(ID), ObjMove_GetY(ID) ];
			
			CreateSword( ID, GetAngleToPlayer( ID ) + 30*r, 128, 6, r, type );
			WorldShake_Single( 30, 4 );
			
			if( Wait( 160 ) ){ return; }
			EnemyMove( ID, 2, 8 );
			if( Wait( 100 ) ){ return; }
			
			type = ( type + 1 ) % 2;
			if( !type ){
				r = -r;
				if( Wait( 50 ) ){ return; }
			}
			
			yield;
		}
	}
	
	task CreateSword( ID, ag, lp, acc, r, type ){
		let shote = [ ADD_BGW_ORANGE_27, ADD_BGW_RED_27 ];
		
		ObjSound_Play( CreateShotSE[8] );
		
		let base = 16;
		if( type ){ base = 192; }
		loop( 75 ){
			if( Obj_IsDeleted(ID) ){ break; }
			let gpos	= [ ObjMove_GetX(ID), ObjMove_GetY(ID) ];
			let angle	= ag + rand(-4,4);
			
			let spos = [ gpos[0] + base * cos( angle ), gpos[1] + base * sin( angle ) ];
			CreateSwordLaser( spos, angle, 192, 40, 30, [255,rand(64,128),32], 0 );
			
			/*
			ascent( let j in 0..6 ){
				spos = [ gpos[0] + (16+j*32) * cos( angle ), gpos[1] + (16+j*32) * sin( angle ) ];
				CreateShot01( spos, 0, angle + rand(-16,16), 0.01, 10, shote[j%2], 4 );
			}
			*/
			yield;
		}
		
		let i = 0;
		loop( lp / acc ){
			loop( acc ){
				if( Obj_IsDeleted(ID) ){ break; }
				let gpos	= [ ObjMove_GetX(ID), ObjMove_GetY(ID) ];
				let angle	= ag;
				if( type ){
					angle += 180;
				}
				let leng = 224;
				
				let spos = [ gpos[0] + base * cos( ag ), gpos[1] + base * sin( ag ) ];
				CreateSwordLaser( spos, ag, leng, 90, 30, [255,rand(64,128),32], 0 );
				ObjSound_Play( CreateShotSE[13] );
				//斬撃判定
				local{
					let epos = [ gpos[0] + (base+leng*0.95) * cos( ag ), gpos[1] + (base+leng*0.95) * sin( ag ) ];
					if( IsIntersected_Line_Circle( 
					 spos[0], spos[1], epos[0], epos[1],
					 64, GetPlayerX, GetPlayerY, 1 ) ){
						PlayerShootingDown;
					}

					task PlayerShootingDown{
						let obj = ObjShot_Create( OBJ_SHOT );
						ObjShot_SetAutoDelete( obj, false );
						ObjMove_SetPosition( obj, -100, -100 );
						ObjShot_SetIntersectionCircleA2( obj, GetPlayerX, GetPlayerY, 10 );
						ObjShot_Regist( obj );
						yield;
						Obj_Delete( obj );
					}
				}
				let ave = 3;
				let rd = 6;
				if( type ){ rd = 0; ave = 5; }
				if( i % ave == 0 ){
					let agp = ag;
					ascent( let j in 0..7 ){
						spos = [ gpos[0] + (base+j*32) * cos( agp ), gpos[1] + (base+j*32) * sin( agp ) ];
						CreateShot01( spos, 0, angle + rand(-rd,rd), 0.01, 3, shote[i%2], 8 );
						agp += 6 * r;
					}
					ObjSound_Play( CreateShotSE[1] );
				}
				
				i++;
				ag += 360 / lp * r;
			}
			if( Wait( 1 ) ){ return; }
		}
	}