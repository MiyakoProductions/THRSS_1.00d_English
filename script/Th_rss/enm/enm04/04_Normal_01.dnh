//#東方弾幕風
#ScriptVersion[3]
#Title["桃源宮　stage4　皇女通常01"]
#Text[""]
#System["script/Th_rss/system/System_Main.dnh"]
#Image[""]
#Background[""]
	
	//　ライブラリ管理ファイル
	#include "./../lib_Control.dnh"
	#include "./lib_enm04_setting.dnh"
	#include "./lib_enm04_effect.dnh"
	
	let enm;
	let spl;
	
	//　カウンタ
	let frame		= 0;
	let count		= 0;
	let timer		= 0;
	
	//　制限時間
	let SET_TIMER	= 60;
	
	@Initialize{
		//　ボス生成
		enm	= ObjEnemy_Create(OBJ_ENEMY_BOSS);
		ObjEnemy_SetDamageRate(enm, 0, 0 );
		ObjEnemy_Regist(enm);
		
		//　初期化
		EnemyInitialize(enm);
		
		//　体力0まで待機
		EndEnemy(enm);
		
		//　敵ダメージレート 第2引数:ボムバリア
		SetDamageRate(enm, 100, false );
		ShotScore(enm);
		
		//　削除上限
		SetShotAutoDeleteClip( 64, 64, 64, 64 );
	}
	
	@Loading{
		//　弾データ読み込み　ALPHAとADD
		LoadEnemyShotData( csd ~ "./../../lib/lib_bullet_data.dnh" );
		LoadEnemyShotData( csd ~ "./../../lib/lib_bullet_data_ADD.dnh" );
	}
	
	@MainLoop{
		//　敵の当たり判定
		SetIntersection(enm, true, true );
		
		//　パワー集中エフェクト
		if( timer == 90 ){
			Concentration03_Main(enm, power_rgb, 60 );
		}
		
		//　弾幕
		if( timer == 190 ){
			ShotMain(enm);
		}
		
		//　カウンタ
		if( !Obj_IsDeleted(enm) ){
			count++;
			frame++;
			timer++;
		}
		else{
			//　0でなんか発動すると困るので変な数値にする
			count	= -52149;
			frame	= -52149;
			timer	= -52149;
		}
		
		yield;
	}
	
	@Event{
		alternative( GetEventType() )
		case( EV_REQUEST_LIFE ){
			//　ライフ一律1000
			SetScriptResult( 1000 );
		}
		case( EV_REQUEST_TIMER ){
			//　制限時間
			SetScriptResult( SET_TIMER );
		}
		case( EV_REQUEST_SPELL_SCORE ){
			//　スペルカードボーナス
			SetScriptResult( SET_SCORE );
		}
	}
	
	@Finalize{ }
	
	//----------------------------------------------------------------------------------------------------
	//----------------------------------------------------------------------------------------------------
	//　task色々
	
	task EnemyInitialize(ID){
		//　アニメーション用共通データ作成
		CreateCommonDataArea("anime");
		SetAreaCommonData("anime","spa",false);
		
		//　60角形　距離64　優先71　遅延120.f　色[紫]　スペル用　[外枠出現処理ON,本体出現処理ON]
		//　"Default" or "Normal" or "SpellCard"
		CreateLifeBar(ID, 60, 64, 71, 0, [255,255,255], "Normal" , [false,false] );
		//　type　delay
		//　0:戦闘開始　1:戦闘継続
		RedMagicCircle( 0, 0 );
		Aura(ID, 8, aura_rgb[0], aura_rgb[1] );
		//　親ID　表示遅延　bool 移動効果　char 移動効果種別　bool フェードイン
		//　"BeginSpellCard" or "EndSpellCard"
		SetDrawTimer(enm, 0, false, "EndSpellCard", true );
		//　画像パスだけ変えればいいんじゃないかな
		EnemyDisplay_Enm04a( enm, true, enemy_tex_path );
		ObjMove_SetDestAtWeight( enm, CenX, CenY-96, 8, 8 );
	}
	
	function wait( long ){
		loop( long ){ yield; }
	}
	
	//　ショットメイン
	task ShotMain( ID ){
		let count	= 0;
		let frame	= 0;
		let i		= 0;
		
		let lp		= 8;
		let wide	= 8;
		let rd		= 3;
		let sd		= 100;
		let vl		= 32;
		let wt		= 16;
		
		alternative( GetDifficult )
		case( "Easy" ){
			rd = 1;
			wide = 32;
			wt = 32;
		}
		case( "Normal" ){
		}
		case( "Hard" ){
			lp = 10;
			vl = -48;
			wide = 10;
			rd = 4;
			wt = 12;
		}
		case( "Lunatic" ){
			lp = 12;
			wide = 6;
			rd = 5;
			vl = -48;
			sd = 60;
			wt = 9;
		}
		case( "OverDrive" ){
		}
		
		let type = 0;
		let posX = [ MinX, MaxX ];
		
		while( !Obj_IsDeleted( ID ) ){
			let gpos	= [ ObjMove_GetX(ID), ObjMove_GetY(ID) ];
			
			//　初期化
			if( frame > 180 ){
				Concentration03_Main(ID, power_rgb, 60 );
				count = -60;
				frame = -60;
			}
			
			if( type > 0 && type%2 == 0 ){
				posX = [ MinX, MaxX ];
			}
			else{
				posX = [ MaxX, MinX ];
			}
			
			if( count%64 == 0 ){
				EnemyMove(enm, 2, 8 );
			}
			
			if( count%wt == 0 ){
				CreateBraidShot(
					[ posX[0], gpos[1]-64+rand(-64,64) ],
					[ posX[1], gpos[1]-64+rand(-64,64) ],
					lp,
					0
				);
				if( ( GetDifficult == "Lunatic" || GetDifficult == "Hard" ) && type ){
					vl = -vl;
				}
				type++;
			}
			
			frame++;
			count++;
			
			yield;
		}
		
		task CreateBraidShot( Spos, Epos, lp, shote_color ){
			let m_angle		= GetGapAngle( Spos, Epos );
			let distance	= GetDistance( Spos, Epos );
			let move		= 0;
			let shote		= [
				[ BGW_AQUA_14, BGB_AQUA_14, BGW_BLUE_14, BGB_BLUE_14, BGW_PURPLE_14, BGB_PURPLE_14 ],
				[ BGW_ORANGE_14, BGB_ORANGE_14, BGW_RED_14, BGB_RED_14, BGW_PURPLE_14, BGB_PURPLE_14 ],
			];
			let Ppos = [ GetPlayerX+vl*cos(GetAngleToPlayer(enm)), MaxY+vl*sin(GetAngleToPlayer(enm)) ];
			let agc = round( rand( -rd, rd ) ) * wide;
			
			loop( lp + 1 ){
				if( Obj_IsDeleted(enm) ){ break; }
				
				let pos = [
					Spos[0] + move * cos( m_angle ),
					Spos[1] + move * sin( m_angle ),
				];
				let angle	= GetGapAngle( pos, Ppos ) + agc;
				
				ascent( let i in 0..( length(shote[0]) ) ){
					let speed = GetDistance( pos, Ppos ) / sd * ( 1 + i*0.015 );
					let acc = -speed / 60;
					let mx = speed / 2;
					CreateShot_way( pos, speed, angle, acc, mx, shote[ shote_color%2 ][ i ], 16, 1, 0 );
				}
				
				ObjSound_Play( CreateShotSE[1] );
				
				move += distance / lp;
				
				yield;
			}
		}
	}
	