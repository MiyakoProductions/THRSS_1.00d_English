//#東方弾幕風
#ScriptVersion[3]
#Title["桃源宮　stage4　浄土「彼岸花の咲くコロニー」系"]
#Text[""]
#System["script/Th_rss/system/System_Main.dnh"]
#Image[""]
#Background[""]
	
	//　ライブラリ管理ファイル
	#include "./../lib_Control.dnh"
	#include "./lib_enm04_setting.dnh"
	#include "./lib_enm04_effect.dnh"
	
	let enm;
	let spl;
	
	//　カウンタ
	let frame		= 0;
	let count		= 0;
	let timer		= 0;
	
	//　制限時間
	let SET_TIMER	= 60;
	
	@Initialize{
		//　ボス生成
		enm	= ObjEnemy_Create(OBJ_ENEMY_BOSS);
		ObjEnemy_SetDamageRate(enm, 0, 0 );
		ObjEnemy_Regist(enm);
		
		//　初期化
		EnemyInitialize(enm);
		
		//　体力0まで待機
		EndEnemy(enm);
		
		//　敵ダメージレート 第2引数:ボムバリア
		SetDamageRate(enm, 80, false );
		ShotScore(enm);
		
		//　スペルカード宣言
		CallSpellCard(enm,0);
		
		//　削除上限
		SetShotAutoDeleteClip( 64, 64, 64, 64 );
	}
	
	@Loading{
		//　弾データ読み込み　ALPHAとADD
		LoadEnemyShotData( csd ~ "./../../lib/lib_bullet_data.dnh" );
		LoadEnemyShotData( csd ~ "./../../lib/lib_bullet_data_ADD.dnh" );
	}
	
	@MainLoop{
		//　敵の当たり判定
		SetIntersection(enm, true, true );
		
		
		//　弾幕
		if( timer == 180 ){
			ShotMain( enm );
		}
		
		//　カウンタ
		if( !Obj_IsDeleted(enm) ){
			count++;
			frame++;
			timer++;
		}
		else{
			//　0でなんか発動すると困るので変な数値にする
			count	= -52149;
			frame	= -52149;
			timer	= -52149;
		}
		
		yield;
	}
	
	@Event{
		alternative( GetEventType() )
		case( EV_REQUEST_LIFE ){
			//　ライフ一律1000
			SetScriptResult( 1000 );
		}
		case( EV_REQUEST_TIMER ){
			//　制限時間
			SetScriptResult( SET_TIMER );
		}
		case( EV_REQUEST_SPELL_SCORE ){
			//　スペルカードボーナス
			SetScriptResult( SET_SCORE );
		}
		case( EV_GAIN_SPELL ){
			//　スペル取得
			SpellCounterGet( GetDifficult, 4, 1 );
		}
	}
	
	@Finalize{ }
	
	//----------------------------------------------------------------------------------------------------
	//----------------------------------------------------------------------------------------------------
	//　task色々
	
	task EnemyInitialize(ID){
		//　アニメーション用共通データ作成
		CreateCommonDataArea("anime");
		SetAreaCommonData("anime","spa",false);
		
		//　60角形　距離64　優先71　遅延120.f　色[紫]　スペル用　[外枠出現処理ON,本体出現処理ON]
		//　"Default" or "Normal" or "SpellCard"
		CreateLifeBar(ID, 60, 64, 71, 0, [255,255,255], "SpellCard" , [false,false] );
		//　type　delay
		//　0:戦闘開始　1:戦闘継続
		RedMagicCircle( 1, 0 );
		Aura(ID, 8, aura_rgb[0], aura_rgb[1] );
		//　親ID　表示遅延　bool 移動効果　char 移動効果種別　bool フェードイン
		//　"BeginSpellCard" or "EndSpellCard"
		SetDrawTimer(enm, 0, true, "BeginSpellCard", false );
		//　画像パスだけ変えればいいんじゃないかな
		EnemyDisplay_Enm04a( enm, true, enemy_tex_path );
		ObjMove_SetDestAtWeight( enm, CenX, CenY-96, 8, 8 );
	}
	
	task CallSpellCard(ID,long){
		wait(long);
		spl	= GetEnemyBossSceneObjectID();
		ObjEnemyBossScene_StartSpell( spl );
		
		let spell_text = "";
		
		alternative( GetDifficult )
		case( "Easy", "Normal" ){
			spell_text = "浄土「彼岸花の咲くコロニー」";
		}
		case( "Hard" ){
			spell_text = "穢土「毒花の桃源郷」";
		}
		case( "Lunatic" ){
			spell_text = "彼岸「竜宮に咲く天花」";
		}
		case( "OverDrive" ){
			spell_text = "彼岸「竜宮に咲く天花」";
		}
		
		SpellCounter( GetDifficult, 4, 1 );
		let sct = GetSpellCounter( GetDifficult, 4, 1 );
		
		CutinSP2(ID, spell_text, 0, 0, true );
		SpellCardCutin(ID, "TIREIDEN", 256, 192, [1,1], enemy_cutin_path, 512, 512, true );
		SpellCardBonusDisplay(spl,ID );
		SpellCardHistoryDisplay(ID, sct[1], sct[0] );
		SetBackGroundEffect_04(ID);
		SpellCardMagicTimer(ID);
	}
	
	function wait( long ){
		loop( long ){ yield; }
	}
	
	//　ショットメイン
	task ShotMain( ID ){
		
		let lp		= 1;
		let slp		= 3;
		let way		= 2;
		let dp		= 1.25;
		//　角度
		let agp		= 0;
		let swide	= 36;
		let wdp		= 3.4;
		//　レーザーカラー
		let rgb_array = [ 255, 255, 255 ];

		//　発射間隔
		let wt		= 2;
		let loopcount = 360;

		let limit = 160;

		//　位相
		let r = 1 - round( rand( 0, 1 ) ) * 2;
		
		alternative( GetDifficult )
		case( "Easy" ){
			rgb_array	= [ 255, 32, 0 ];
			lp = 1;
			way = 1;
		}
		case( "Normal" ){
			rgb_array	= [ 255, 32, 0 ];
			limit = 140;
			loopcount = 300;
		}
		case( "Hard" ){
			rgb_array	= [ 255, 0, 128 ];
			way = 5;
			lp = 1;
			slp = 3;
			agp = 1.6;
			swide = 0;
			dp = 1.7;
			wt = 3;
			loopcount = 440;
		}
		case( "Lunatic" ){
			rgb_array	= [ 255, 192, 0 ];
			lp = 3;
			slp = 6;
			way = 2;
			agp = 0.5;
			swide = 90;
			wdp = 1.6;
			dp = 0.65;
			wt = 1;
			
			loopcount = 480;
		}
		case( "OverDrive" ){
			rgb_array	= [ 255, 0, 0 ];
		}
		
		
		let gpos	= [ ObjMove_GetX(ID), ObjMove_GetY(ID) ];
		State;
		task State{
			while( !Obj_IsDeleted( ID ) ){
				gpos	= [ ObjMove_GetX(ID), ObjMove_GetY(ID) ];
				yield;
			}
		}

		loop{
			Concentration03_Main(enm, power_rgb, 60 );
			if( Wait(60) ){ return; }
			SetShot( r );

			if( Wait(loopcount) ){ return; }
			EnemyMove(enm, 2, 8 );
			r = -r;
			
			task SetShot( r ){
				let anglebase = [ GetAngleToPlayer(ID), GetAngleToPlayer(ID) ];
				let rot = GetAngleToPlayer(ID)+rand( 150, 210 );
				let wide = 360;
				let distance = 0;
				while( distance < limit ){
					loop( lp ){
						let ag = rot;
						loop( way ){
							let p = ag - wide / 2;
							let rb = 1;
							loop( 2 ){
								let pos = [ gpos[0] + distance * cos( p ), gpos[1] + distance * sin( p ) ];
								Set( pos, p - wide/2*rb );
								p += wide;
								rb = -rb;
							}
							ag += 360 / way;
						}
						Add;
						if( Wait(wt ) ){ return; }
						ObjSound_Play( CreateShotSE[1] );
					}
					loop( slp ){
						Add;
						if( Wait(wt ) ){ return; }
					}

					function Add{
						wide += wdp;
						rot += agp * r;
						distance += dp;
					}
					
					task Set( pos, p ){
						CreateStraightLaser01( ID, pos, p, 512, 12, rgb_array, true, 60, 90 );
						let angle = p - swide / 2;
						loop( 2 ){
							let sht = CreateShotA2( pos[0], pos[1], 0, angle, 0.005, 1.2, BGB_RED_14, 32 );
							NotifyEventAll( EV_USER + 40, [ sht, 32 ] );
							if( GetDifficult == "Hard" || GetDifficult == "Lunatic" ){
								let shtB = CreateShotA2( pos[0], pos[1], 0, angle+180, 0.005, 1.2, BGB_WHITE_14, 32 );
								NotifyEventAll( EV_USER + 40, [ shtB, 32 ] );
							}
							angle += swide;
						}
					}
				}
			}
		}

		function Wait(wt){
			loop(wt){
				yield;
				if( Obj_IsDeleted( ID ) ){ return true; }
			}
			return false;
		}
	}
	