//#東方弾幕風
#ScriptVersion[3]
#Title["桃源宮　stage4　「ケイオスバタフライ」系"]
#Text[""]
#System["script/Th_rss/system/System_Main.dnh"]
#Image[""]
#Background[""]
	
	//　ライブラリ管理ファイル
	#include "./../lib_Control.dnh"
	#include "./lib_enm04_setting.dnh"
	#include "./lib_enm04_effect.dnh"
	
	let enm;
	let spl;
	
	//　カウンタ
	let frame		= 0;
	let count		= 0;
	let timer		= 0;
	
	//　制限時間
	let SET_TIMER	= 60;
	
	@Initialize{
		//　ボス生成
		enm	= ObjEnemy_Create(OBJ_ENEMY_BOSS);
		ObjEnemy_SetDamageRate(enm, 0, 0 );
		ObjEnemy_Regist(enm);
		
		//　初期化
		EnemyInitialize(enm);
		
		//　体力0まで待機
		EndEnemy(enm);
		
		//　敵ダメージレート 第2引数:ボムバリア
		SetDamageRate(enm, 80, false );
		ShotScore(enm);
		
		//　スペルカード宣言
		CallSpellCard(enm,0);
		
		//　削除上限
		SetShotAutoDeleteClip( 32, 32, 32, 32 );
	}
	
	@Loading{
		//　弾データ読み込み　ALPHAとADD
		LoadEnemyShotData( csd ~ "./../../lib/lib_bullet_data.dnh" );
		LoadEnemyShotData( csd ~ "./../../lib/lib_bullet_data_ADD.dnh" );
	}
	
	@MainLoop{
		//　敵の当たり判定
		if( timer > 280 ){
			SetIntersection(enm, true, true );
		}
		else{
			SetIntersection(enm, true, false );
		}
		
		//　パワー集中エフェクト
		if( timer == 180 ){
			Concentration03_Main(enm, power_rgb, 60 );
		}
		
		//　弾幕
		if( timer == 280 ){
			ShotMain( enm );
		}
		
		//　カウンタ
		if( !Obj_IsDeleted(enm) ){
			count++;
			frame++;
			timer++;
		}
		else{
			//　0でなんか発動すると困るので変な数値にする
			count	= -52149;
			frame	= -52149;
			timer	= -52149;
		}
		
		yield;
	}
	
	@Event{
		alternative( GetEventType() )
		case( EV_REQUEST_LIFE ){
			//　正面キープしやすいので多めに
			SetScriptResult( 2000 );
		}
		case( EV_REQUEST_TIMER ){
			//　制限時間
			SetScriptResult( SET_TIMER );
		}
		case( EV_REQUEST_SPELL_SCORE ){
			//　スペルカードボーナス
			SetScriptResult( SET_SCORE );
		}
		case( EV_GAIN_SPELL ){
			//　スペル取得
			SpellCounterGet( GetDifficult, 4, 5 );
		}
	}
	
	@Finalize{ }
	
	//----------------------------------------------------------------------------------------------------
	//----------------------------------------------------------------------------------------------------
	//　task色々
	
	task EnemyInitialize(ID){
		//　アニメーション用共通データ作成
		CreateCommonDataArea("anime");
		SetAreaCommonData("anime","spa",false);
		
		//　60角形　距離64　優先71　遅延120.f　色[紫]　スペル用　[外枠出現処理ON,本体出現処理ON]
		//　"Default" or "Normal" or "SpellCard"
		CreateLifeBar(ID, 60, 64, 71, 0, [255,255,255], "Default" , [false,false] );
		//　type　delay
		//　0:戦闘開始　1:戦闘継続
		RedMagicCircle( 1, 0 );
		Aura(ID, 8, aura_rgb[0], aura_rgb[1] );
		//　親ID　表示遅延　bool 移動効果　char 移動効果種別　bool フェードイン
		//　"BeginSpellCard" or "EndSpellCard"
		SetDrawTimer(enm, 0, true, "BeginSpellCard", false );
		//　画像パスだけ変えればいいんじゃないかな
		EnemyDisplay_Enm04a( enm, true, enemy_tex_path );
		ObjMove_SetDestAtWeight( enm, CenX, CenY-96, 8, 8 );
	}
	
	task CallSpellCard(ID,long){
		wait(long);
		spl	= GetEnemyBossSceneObjectID();
		ObjEnemyBossScene_StartSpell( spl );
		
		let spell_text = "";
		
		alternative( GetDifficult )
		case( "Easy", "Normal" ){
			spell_text = "「ケイオスバタフライ」";
		}
		case( "Hard" ){
			spell_text = "「ダイアモンドバタフライ」";
		}
		case( "Lunatic" ){
			spell_text = "「日輪蝶」";
		}
		case( "OverDrive" ){
			spell_text = "「日輪蝶」";
		}
		
		SpellCounter( GetDifficult, 4, 5 );
		let sct = GetSpellCounter( GetDifficult, 4, 5 );
		
		CutinSP2(ID, spell_text, 0, 0, true );
		SpellCardCutin(ID, "TIREIDEN", 256, 192, [1,1], enemy_cutin_path, 512, 512, true );
		SpellCardBonusDisplay(spl,ID );
		SpellCardHistoryDisplay(ID, sct[1], sct[0] );
		SetBackGroundEffect_04(ID);
		SpellCardMagicTimer(ID);
	}
	
	function wait( long ){
		loop( long ){ yield; }
	}
	
	//　ショットメイン
	task ShotMain( ID ){
		let count	= 0;
		let frame	= 0;
		let i		= 0;
		let j		= 0;
		
		//　弾種類
		let shote = [ ADD_BGW_BLUE_16, ADD_BGW_PURPLE_22 ];
		//　way数
		let lp		= [ 0, 0 ];
		//　角度
		let angle	= 0;

		let wt		= 60;
		let limit	= 4;
		
		alternative( GetDifficult )
		case( "Easy" ){
			lp			= [ 12, 20 ];
		}
		case( "Normal" ){
			lp			= [ 24, 32 ];
		}
		case( "Hard" ){
			lp			= [ 28, 32 ];
			shote		= [ ADD_BGW_AQUA_16, ADD_BGW_WHITE_22 ];
			wt = 50;
			limit = 5;
		}
		case( "Lunatic" ){
			lp			= [ 26, 24 ];
			shote		= [ BGW_RED_16, ADD_BGW_YELLOW_22 ];
			wt = 40;
			limit = 6;
		}
		case( "OverDrive" ){
			lp			= [ 36, 36 ];
		}
		
		SetEffect_Enm04( ID, 0 );
		SetAreaCommonData( "anime", "spa", true );
		
		let type		= 0;
		let distance	= 64;
		let atk			= 0;
		
		while( !Obj_IsDeleted( ID ) ){
			let gpos	= [ ObjMove_GetX(ID), ObjMove_GetY(ID) ];
			
			//　パワー溜め
			if( count == 300 ){
				Concentration03_Main(enm, power_rgb, 60 );
				EnemyMove(enm, 2, 8 );
				count = -60;
				frame = -60;
				angle = 0;
				type = 0;
				distance = 64;
			}
			
			//　自機狙い
			if( count == 60 ){
				if( GetDifficult == "Lunatic" ){
					let speed = 3.7;
					let angle = GetAngleToPlayer( ID );
					let r = 1 - round( rand( 0, 1 ) ) * 2;
					loop( 6 ){
						loop( lp[1] ){
							CreateSlowShot( gpos, 0, 270 + angle, speed/60, speed, shote[1], 8, 0, 0.3*r );
							angle += 360 / lp[1];
						}
						speed /= 1.2;
						r = -r;
					}
					ObjSound_Play( CreateShotSE[8] );
				}else{
					ascent( i in 0..lp[1] ){
						let sht = CreateShotA2( gpos[0], gpos[1], 6, GetAngleToPlayer(ID)+i*(360/lp[1]), -0.2, 1, shote[1], 16 );
						NotifyEventAll( EV_USER + 40, [ sht, 32 ] );
						ObjSound_Play( CreateShotSE[0] );
					}
				}
			}
			
			//　日輪
			if( type < limit ){
				if( type%2 == 0 ){
					if( frame > wt && frame%1 == 0 && angle < 360 ){
						let spos = [
							gpos[0] + distance * cos( 270 + angle ),
							gpos[1] + distance * sin( 270 + angle ),
						];
						CreateSlowShot( spos, 0, 270 + angle, 0.02, 2, shote[0], 8, 90-atk, 0.4 );
						CreateSlowShot( spos, 0, 270 + angle, 0.02, 2, shote[0], 8, 90-atk, -0.4 );
						ObjSound_Play( CreateShotSE[1] );
						angle += 360/lp[0];
						atk += 1;
					}
					if( angle >= 360 ){
						type++;
						distance += 16;
						atk = 0;
						frame = 30;
					}
				}
				else{
					if( frame > wt && frame%1 == 0 && angle > 0 ){
						let spos = [
							gpos[0] + distance * cos( 270 + angle ),
							gpos[1] + distance * sin( 270 + angle ),
						];
						CreateSlowShot( spos, 0, 270 + angle, 0.02, 2, shote[0], 8, 90-atk, 0.4 );
						CreateSlowShot( spos, 0, 270 + angle, 0.02, 2, shote[0], 8, 90-atk, -0.4 );
						ObjSound_Play( CreateShotSE[1] );
						angle -= 360/lp[0];
						atk += 1;
					}
					if( angle <= 0 ){
						type++;
						distance += 16;
						atk = 0;
						frame = 30;
					}
				}
			}
			
			count++;
			frame++;
			
			yield;
		}
	}
	
	//　遅延移動弾
	task CreateSlowShot( pos, speed, angle, acc, maxspeed, shote, delay, attack, av ){
		let sht = CreateShotA2( pos[0], pos[1], 0, angle, 0, 0, shote, delay );
		NotifyEventAll( EV_USER + 40, [ sht, delay ] );
		
		//　指定フレーム待機
		loop( attack ){
			if( Obj_IsDeleted(enm) ){ return; }
			yield;
		}
		
		//　削除済みであれば
		if( Obj_IsDeleted(sht) ){ return; }
		
		//　ﾊﾟﾗﾒｰﾀ設定
		ObjMove_SetSpeed(sht, speed );
		ObjMove_SetAcceleration(sht, acc );
		ObjMove_SetMaxSpeed(sht, maxspeed );
		ObjMove_SetAngularVelocity(sht, av );
	}