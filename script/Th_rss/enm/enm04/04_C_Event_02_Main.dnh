
function wait( long ){
	loop( long ){ yield; }
}

task Main_PL01( CallID ){
	let frame	= 0;
	let count	= 0;
	let ctr		= 0;
	let mpos	= [ 0, 24 ];
	
	//　自機組のテクスチャ　01がプレイヤー　02がパートナー
	let player_texture01 = [
		player_tex[0],player_tex[1],player_tex[2],player_tex[3],player_tex[4],
		player_tex[5],player_tex[6],player_tex[7],player_tex[8],player_tex[9],
	];
	let player_texture02 = [
		player_tex[10],player_tex[11],player_tex[12],player_tex[13],
	];
	
	//　敵のテクスチャ
	let enemy_texture01 = [
		chara_tex[22],chara_tex[23],chara_tex[24],chara_tex[25],chara_tex[26],
		chara_tex[27],chara_tex[28],chara_tex[29],chara_tex[30],chara_tex[31],
	];
	
	//　共通データ作成　会話カウンタ作成
	CreateCommonDataArea("Talk");
	SetAreaCommonData("Talk", "counter", count );
	
	while( !Obj_IsDeleted(CallID) ){
		SetForbidPlayerShot( true );
		SetForbidPlayerSpell( true );
		
		//　時間停止
		StopTimer();
		
		//　会話表示
		if( frame == 1 ){
			alternative( count )
			case( 0 ){
				let text = [
					"どうやら私の敵う相手ではなさそうですな。",
					"私の負けです、素直に認めましょう。",
				];
				CreateCharacterTexture( [ CenX-96+mpos[0], CenY+64+mpos[1] ], [true,false], "back", false, [0,0,0], 1, count, player_texture01[0], 512 );
				CreateCharacterTexture( [ CenX-128+mpos[0], CenY+64+mpos[1] ], [true,false], "back", false, [0,0,0], 0.48, count, player_texture02[0], 512 );
				CreateCharacterTexture( [ CenX+300+mpos[0], CenY+64+mpos[1] ], [true,false], "front", false, [0,0,0], 1, count, enemy_texture01[3], 512 );
				CreateBalloonManager_Reverse( [ CenX-32+mpos[0], CenY+32+mpos[1] ], 3, text, count, 0 );
			}
			case( 1 ){
				let text = [
					"この攻撃が駄目ならな！",
					"NULL",
				];
				CreateCharacterTexture( [ CenX-96+mpos[0], CenY+64+mpos[1] ], [false,false], "back", false, [0,0,0], 1, count, player_texture01[0], 512 );
				CreateCharacterTexture( [ CenX-128+mpos[0], CenY+64+mpos[1] ], [false,false], "back", false, [0,0,0], 0.48, count, player_texture02[0], 512 );
				CreateCharacterTexture( [ CenX+300+mpos[0], CenY+64+mpos[1] ], [false,false], "front", false, [0,0,0], 1, count, enemy_texture01[3], 512 );
				CreateBalloonManager_Reverse( [ CenX+96+mpos[0], CenY+32+mpos[1] ], 1, text, count, 0 );
				CallSpellCard( CallID, 0 );
			}
			others{
				SetAreaCommonData("Talk", "counter", 0 );
				break;
			}
		}
		
		//　移動ウェイト
		if( count == 10 ){
			count = WaitForZeroSpeed( CallID, count );
			SetAreaCommonData("Talk", "counter", count );
		}
		
		//　カウンタ加算
		frame++;
		if( ObjMove_GetSpeed(CallID) <= 0 && count != 10 ){ ctr++; }
		else{ ctr = 0; }
		
		//　会話自動進行
		if( ctr > 0 && ctr%AutoTalk == 0 ){
			count++;
			frame = 0;
			SetAreaCommonData("Talk", "counter", count );
		}
		
		yield;
	}
	SetForbidPlayerShot( false );
	SetForbidPlayerSpell( false );
}

task Main_PL02( CallID ){
	let frame	= 0;
	let count	= 0;
	let ctr		= 0;
	let mpos	= [ 0, 24 ];
	
	//　自機組のテクスチャ　01がプレイヤー　02がパートナー
	let player_texture01 = [
		player_tex[14],player_tex[15],player_tex[16],player_tex[17],player_tex[18],
		player_tex[19],player_tex[20],player_tex[21],player_tex[22],player_tex[23],
		player_tex[24],
	];
	let player_texture02 = [
		player_tex[26],player_tex[27],player_tex[28],player_tex[29],player_tex[30],
	];
	
	//　敵のテクスチャ
	let enemy_texture01 = [
		chara_tex[22],chara_tex[23],chara_tex[24],chara_tex[25],chara_tex[26],
		chara_tex[27],chara_tex[28],chara_tex[29],chara_tex[30],chara_tex[31],
	];
	
	//　共通データ作成　会話カウンタ作成
	CreateCommonDataArea("Talk");
	SetAreaCommonData("Talk", "counter", count );
	
	while( !Obj_IsDeleted(CallID) ){
		SetForbidPlayerShot( true );
		SetForbidPlayerSpell( true );
		
		//　時間停止
		StopTimer();
		
		//　会話表示
		if( frame == 1 ){
			alternative( count )
			case( 0 ){
				let text = [
					"どうやら私の敵う相手ではなさそうですな。",
					"私の負けです、素直に認めましょう。",
				];
				CreateCharacterTexture( [ CenX-64+mpos[0], CenY+64+mpos[1] ], [true,false], "back", false, [0,0,0], 1, count, player_texture01[0], 512 );
				CreateCharacterTexture( [ CenX-128+mpos[0], CenY+64+mpos[1] ], [true,false], "back", false, [0,0,0], 0.48, count, player_texture02[0], 512 );
				CreateCharacterTexture( [ CenX+300+mpos[0], CenY+64+mpos[1] ], [true,false], "front", false, [0,0,0], 1, count, enemy_texture01[3], 512 );
				CreateBalloonManager_Reverse( [ CenX-32+mpos[0], CenY+32+mpos[1] ], 3, text, count, 0 );
			}
			case( 1 ){
				let text = [
					"この攻撃が駄目ならな！",
					"NULL",
				];
				CreateCharacterTexture( [ CenX-64+mpos[0], CenY+64+mpos[1] ], [false,false], "back", false, [0,0,0], 1, count, player_texture01[0], 512 );
				CreateCharacterTexture( [ CenX-128+mpos[0], CenY+64+mpos[1] ], [false,false], "back", false, [0,0,0], 0.48, count, player_texture02[0], 512 );
				CreateCharacterTexture( [ CenX+300+mpos[0], CenY+64+mpos[1] ], [false,false], "front", false, [0,0,0], 1, count, enemy_texture01[3], 512 );
				CreateBalloonManager_Reverse( [ CenX+96+mpos[0], CenY+32+mpos[1] ], 1, text, count, 0 );
				CallSpellCard( CallID, 0 );
			}
			others{
				SetAreaCommonData("Talk", "counter", 0 );
				break;
			}
		}
		
		//　移動ウェイト
		if( count == 10 ){
			count = WaitForZeroSpeed( CallID, count );
			SetAreaCommonData("Talk", "counter", count );
		}
		
		//　カウンタ加算
		frame++;
		if( ObjMove_GetSpeed(CallID) <= 0 && count != 10 ){ ctr++; }
		else{ ctr = 0; }
		
		//　会話自動進行
		if( ctr > 0 && ctr%AutoTalk == 0 ){
			count++;
			frame = 0;
			SetAreaCommonData("Talk", "counter", count );
		}
		
		yield;
	}
	SetForbidPlayerShot( false );
	SetForbidPlayerSpell( false );
}

task Main_PL03( CallID ){
	let frame	= 0;
	let count	= 0;
	let ctr		= 0;
	let mpos	= [ 0, 24 ];
	
	//　自機組のテクスチャ　01がプレイヤー　02がパートナー
	let player_texture01 = [
		player_tex[37],player_tex[38],player_tex[39],player_tex[40],player_tex[41],
		player_tex[42],player_tex[43],player_tex[44],player_tex[45],player_tex[46],
		player_tex[47],
	];
	let player_texture02 = [
		player_tex[31],player_tex[32],player_tex[33],player_tex[34],player_tex[35],
		player_tex[36],
	];
	
	//　敵のテクスチャ
	let enemy_texture01 = [
		chara_tex[22],chara_tex[23],chara_tex[24],chara_tex[25],chara_tex[26],
		chara_tex[27],chara_tex[28],chara_tex[29],chara_tex[30],chara_tex[31],
	];
	
	//　共通データ作成　会話カウンタ作成
	CreateCommonDataArea("Talk");
	SetAreaCommonData("Talk", "counter", count );
	
	while( !Obj_IsDeleted(CallID) ){
		SetForbidPlayerShot( true );
		SetForbidPlayerSpell( true );
		
		//　時間停止
		StopTimer();
		
		//　会話表示
		if( frame == 1 ){
			alternative( count )
			case( 0 ){
				let text = [
					"どうやら私の敵う相手ではなさそうですな。",
					"私の負けです、素直に認めましょう。",
				];
				CreateCharacterTexture( [ CenX-64+mpos[0], CenY+64+mpos[1] ], [true,false], "back", false, [0,0,0], 1, count, player_texture01[0], 512 );
				CreateCharacterTexture( [ CenX-128+mpos[0], CenY+64+mpos[1] ], [true,false], "back", false, [0,0,0], 0.48, count, player_texture02[0], 512 );
				CreateCharacterTexture( [ CenX+300+mpos[0], CenY+64+mpos[1] ], [true,false], "front", false, [0,0,0], 1, count, enemy_texture01[3], 512 );
				CreateBalloonManager_Reverse( [ CenX-32+mpos[0], CenY+32+mpos[1] ], 3, text, count, 0 );
			}
			case( 1 ){
				let text = [
					"　敵の言う事が信用出来るか！",
					"NULL",
				];
				CreateCharacterTexture( [ CenX-64+mpos[0], CenY+64+mpos[1] ], [false,false], "back", false, [0,0,0], 1, count, player_texture01[0], 512 );
				CreateCharacterTexture( [ CenX-128+mpos[0], CenY+64+mpos[1] ], [false,false], "front", true, [0,0,0], 0.48, count, player_texture02[3], 512 );
				CreateCharacterTexture( [ CenX+300+mpos[0], CenY+64+mpos[1] ], [false,false], "back", true, [0,0,0], 1, count, enemy_texture01[3], 512 );
				CreateBalloonManager( [ CenX-96+mpos[0], CenY+128+mpos[1] ], 2, text, count, 1 );
			}
			case( 2 ){
				let text = [
					"はっはは、お見通しか！",
					"NULL",
				];
				CreateCharacterTexture( [ CenX-64+mpos[0], CenY+64+mpos[1] ], [false,false], "back", false, [0,0,0], 1, count, player_texture01[0], 512 );
				CreateCharacterTexture( [ CenX-128+mpos[0], CenY+64+mpos[1] ], [false,false], "back", true, [0,0,0], 0.48, count, player_texture02[3], 512 );
				CreateCharacterTexture( [ CenX+300+mpos[0], CenY+64+mpos[1] ], [false,false], "front", true, [0,0,0], 1, count, enemy_texture01[3], 512 );
				CreateBalloonManager_Reverse( [ CenX+96+mpos[0], CenY+32+mpos[1] ], 1, text, count, 0 );
				CallSpellCard( CallID, 0 );
			}
			others{
				SetAreaCommonData("Talk", "counter", 0 );
				break;
			}
		}
		
		//　移動ウェイト
		if( count == 10 ){
			count = WaitForZeroSpeed( CallID, count );
			SetAreaCommonData("Talk", "counter", count );
		}
		
		//　カウンタ加算
		frame++;
		if( ObjMove_GetSpeed(CallID) <= 0 && count != 10 ){ ctr++; }
		else{ ctr = 0; }
		
		//　会話自動進行
		if( ctr > 0 && ctr%AutoTalk == 0 ){
			count++;
			frame = 0;
			SetAreaCommonData("Talk", "counter", count );
		}
		
		yield;
	}
	SetForbidPlayerShot( false );
	SetForbidPlayerSpell( false );
}

task _PlayMusic(){
	//　引数2に情報セット　ｲﾍﾞﾝﾄ側でその情報を取り出す
	//　[ テクスチャ番号(0~2), 画像rect番号 ]
	NotifyEventAll( EV_USER + 2, [ 0, 6 ] );
	//　流れている曲を削除
	DeleteMusic();
	//　BGM再生
	PlayMusic( 6, true, 0 );
}

//　速度 0 まで待機
function WaitForZeroSpeed( ID, count ){
	//　移動
	ObjMove_SetDestAtWeight(ID, CenX, CenY-96, 8, 8 );
	//　速度 0 まで待機
	while( ObjMove_GetSpeed(ID) > 0 ){ yield; }
	//　1秒待機
	loop( 30 ){ yield; }
	//　カウント + 1 を返す
	return count + 1;
}

//　制限時間を上限で停止
task StopTimer(){
	// 時間停止
	let BossScene = GetEnemyBossSceneObjectID();
	ObjEnemyBossScene_SetSpellTimer( BossScene, (SET_TIMER) * 60 + 1 );
}