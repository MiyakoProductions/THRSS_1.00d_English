//#東方弾幕風
#ScriptVersion[3]
#Title["桃源宮　stage6　狂符「旧き支配者の悪夢」系"]
#Text[""]
#System["script/Th_rss/system/System_Main.dnh"]
#Image[""]
#Background[""]
	
	//　ライブラリ管理ファイル
	#include "./../lib_Control.dnh"
	#include "./lib_enm06_setting.dnh"
	#include "./lib_enm06_effect.dnh"
	
	let enm;
	let spl;
	
	//　カウンタ
	let frame		= 0;
	let count		= 0;
	let timer		= 0;
	
	//　制限時間
	let SET_TIMER	= 60;
	
	@Initialize{
		//　ボス生成
		enm	= ObjEnemy_Create(OBJ_ENEMY_BOSS);
		ObjEnemy_SetDamageRate(enm, 0, 0 );
		ObjEnemy_Regist(enm);
		
		//　初期化
		EnemyInitialize(enm);
		
		//　体力0まで待機
		EndEnemy(enm);
		
		//　敵ダメージレート 第2引数:ボムバリア
		SetDamageRate(enm, 80, false );
		ShotScore(enm);
		
		//　スペルカード宣言
		CallSpellCard(enm,0);
		
		//　削除上限
		SetShotAutoDeleteClip( 64, 256, 64, 64 );
	}
	
	@Loading{
		//　弾データ読み込み　ALPHAとADD
		LoadEnemyShotData( csd ~ "./../../lib/lib_bullet_data.dnh" );
		LoadEnemyShotData( csd ~ "./../../lib/lib_bullet_data_ADD.dnh" );
	}
	
	@MainLoop{
		//　敵の当たり判定
		SetIntersection(enm, true, true );
		
		//　弾幕
		if( timer == 180 ){
			ShotMain( enm );
		}
		
		//　カウンタ
		if( !Obj_IsDeleted(enm) ){
			count++;
			frame++;
			timer++;
		}
		else{
			//　0でなんか発動すると困るので変な数値にする
			count	= -52149;
			frame	= -52149;
			timer	= -52149;
		}
		
		yield;
	}
	
	@Event{
		alternative( GetEventType() )
		case( EV_REQUEST_LIFE ){
			//　正面取る系なので2000
			SetScriptResult( 2000 );
		}
		case( EV_REQUEST_TIMER ){
			//　制限時間
			SetScriptResult( SET_TIMER );
		}
		case( EV_REQUEST_SPELL_SCORE ){
			//　スペルカードボーナス
			SetScriptResult( SET_SCORE );
		}
		case( EV_GAIN_SPELL ){
			//　スペル取得
			SpellCounterGet( GetDifficult, 6, 1 );
		}
	}
	
	@Finalize{ }
	
	//----------------------------------------------------------------------------------------------------
	//----------------------------------------------------------------------------------------------------
	//　task色々
	
	task EnemyInitialize(ID){
		//　アニメーション用共通データ作成
		CreateCommonDataArea("anime");
		SetAreaCommonData("anime","spa",false);
		
		//　60角形　距離64　優先71　遅延120.f　色[紫]　スペル用　[外枠出現処理ON,本体出現処理ON]
		//　"Default" or "Normal" or "SpellCard"
		CreateLifeBar(ID, 60, 64, 71, 0, [255,255,255], "SpellCard" , [false,false] );
		//　type　delay
		//　0:戦闘開始　1:戦闘継続
		RedMagicCircle( 1, 0 );
		Aura(ID, 8, aura_rgb[0], aura_rgb[1] );
		//　親ID　表示遅延　bool 移動効果　char 移動効果種別　bool フェードイン
		//　"BeginSpellCard" or "EndSpellCard"
		SetDrawTimer(enm, 0, true, "BeginSpellCard", false );
		//　画像パスだけ変えればいいんじゃないかな
		EnemyDisplay_Enm06a(enm, true, enemy_tex_path );
		ObjMove_SetDestAtWeight(enm, CenX, CenY-96, 8, 8 );
	}
	
	task CallSpellCard(ID,long){
		Wait(long);
		spl	= GetEnemyBossSceneObjectID();
		ObjEnemyBossScene_StartSpell( spl );
		
		let spell_text = "";
		alternative( GetDifficult )
		case( "Easy", "Normal" ){
			spell_text = "狂符「旧き支配者の悪夢」";
		}
		case( "Hard" ){
			spell_text = "狂夢「クティーラドリーム」";
		}
		case( "Lunatic" ){
			spell_text = "記憶「星の見る夢」";
		}
		case( "OverDrive" ){
			spell_text = "記憶「星の見る夢」";
		}
		
		SpellCounter( GetDifficult, 6, 2 );
		let sct = GetSpellCounter( GetDifficult, 6, 2 );
		
		CutinSP2(ID, spell_text, 0, 0, true );
		SpellCardCutin(ID, "TIREIDEN", 220, 192, [1,1], enemy_cutin_path, 512, 512, true );
		SpellCardBonusDisplay(spl,ID );
		SpellCardHistoryDisplay(ID, sct[1], sct[0] );
		SetBackGroundEffect_06(ID);
		SpellCardMagicTimer(ID);
	}
	
	function Wait( long ){
		loop( long ){
			yield;
			if( Obj_IsDeleted( enm ) ){ return true; }
		}
		return false;
	}
	
	//　ショットメイン
	task ShotMain( ID ){


		//　発射間隔
		let wtA		= 120;
		let wtB		= 120;
		
		//　way数
		let way		= 12;
		let wayB	= 1;
		let roundway= 12;
		//　角度
		let slope	= 16;
		//　弾種
		let shote	= [ BGW_RED_19, ADD_BGW_PURPLE_22 ];

		alternative( GetDifficult )
		case( "Easy" ){
			way = 8;
			roundway = 9;
			wtA = 160;
		}
		case( "Normal" ){
		}
		case( "Hard" ){
			way = 16;
			wayB = 2;
			wtA = 90;
			roundway = 6;
			slope = 45;
			shote		= [ BGW_WHITE_19, ADD_BGW_RED_22 ];
		}
		case( "Lunatic" ){
			way = 20;
			wayB = 3;
			wtA = 90;
			roundway = 6;
			slope = 32;
			shote		= [ BGW_BLUE_15, ADD_BGW_GREEN_22 ];
		}
		case( "OverDrive" ){
		}
		
		let r = 1 - round( rand( 0, 1 ) ) * 2;
		let type	= 0;
		let gpos	= [ ObjMove_GetX(ID), ObjMove_GetY(ID) ];
		State;
		SetShotB;
		if( GetDifficult == "Easy" || GetDifficult == "Normal" ){
			SetShotA;
		}else{
			SetShotC;
			SetShotD;
		}
		task State{
			Concentration03_Main( enm, power_rgb, 60 );
			SetAreaCommonData( "anime", "spa", true );
			while( !Obj_IsDeleted( ID ) ){
				gpos	= [ ObjMove_GetX(ID), ObjMove_GetY(ID) ];
				yield;
			}
		}
		task SetShotA{
			Wait( 80 );
			loop{
				local{
					ascent( i in 0..way*2 ){
						let spos = [
							CenX + 192 * r,
							MinY - 256 + i*( 448/(way-1) ),
						];
						let angle = 90 + 90*r - slope*r;
						let sht = CreateShot01( spos, 3, angle, -0.2, 0, shote[0], 0 );
						ShotSpeedChange( sht, 3, -0.2, 0, 60 );
					}
				}
				r = -r;
				ObjSound_Play( CreateShotSE[0] );
				if( Wait( wtA ) ){ return; }
			}
		}
		
		task SetShotB{
			Wait( 90 );
			loop{
				let ag = GetAngleToPlayer( ID );
				
				loop( roundway ){
					let spos = [
						gpos[0] + 32 * cos( ag ),
						gpos[1] + 32 * sin( ag ),
					];
					CreateShot01( spos, 0.8, ag, 0, 10, shote[1], 32 );
					ag += 360 / roundway;
				}
				ObjSound_Play( CreateShotSE[2] );
				if( Wait( wtB ) ){ return; }
			}
		}

		task SetShotC{
			ObjMove_SetDestAtWeight(enm, CenX, CenY, 24, 4 );
			let radius = 300;
			let p = 0;
			loop{
				let way = 18;
				let delay = 16;
				let angle = p;
				loop( way ){
					let sx = CenX + radius * cos( angle );
					let sy = CenY + radius * sin( angle );
					let speed = 5;
					let sht = CreateShotA2( sx, sy, 0, angle, speed/60, speed, ADD_BGW_WHITE_01, delay );
					NotifyEventAll( EV_USER + 40, [ sht, delay ] );
					angle += 360 / way;
				}
				p += 3*r;
				if( radius > 200 ){ radius-=2; }
				ObjSound_Play( CreateShotSE[1] );
				if( Wait( 2 ) ){ return; }
			}
		}

		task SetShotD{
			Wait( 120 );
			let radius = 200;
			let p = 0;
			loop{
				let delay = 16;
				let ag = rand( 0, 360 );
				loop( way ){
					let sx = CenX + radius * cos( ag );
					let sy = CenY + radius * sin( ag );
					let angle = p;
					loop( wayB ){
						let speed = 1;
						let sht = CreateShotA2( sx, sy, 0, angle, speed/90, speed, shote[0], delay );
						NotifyEventAll( EV_USER + 40, [ sht, delay ] );
						angle += 360 / wayB;
					}
					ag += 360 / way;
				}
				ObjSound_Play( CreateShotSE[0] );
				p += slope * r;
				if( Wait( wtA ) ){ return; }
			}
		}
	}
	
	task ShotSpeedChange( ID, speed, acc, maxspeed, delay ){
		let count = 0;
		
		while( !Obj_IsDeleted(ID) ){
			let gspd = ObjMove_GetSpeed(ID);
			
			if( count >= delay ){
				ObjMove_SetSpeed(ID, speed );
				ObjMove_SetAcceleration(ID, acc );
				ObjMove_SetMaxSpeed(ID, maxspeed );
				ObjSound_Play( CreateShotSE[1] );
				count = 0;
			}
			
			count++;
			
			yield;
		}
	}