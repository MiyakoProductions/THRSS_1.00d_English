//#東方弾幕風
#ScriptVersion[3]
#Title["桃源宮　stage6　桃姫通常04"]
#Text[""]
#System["script/Th_rss/system/System_Main.dnh"]
#Image[""]
#Background[""]
	
	//　ライブラリ管理ファイル
	#include "./../lib_Control.dnh"
	#include "./lib_enm06_setting.dnh"
	#include "./lib_enm06_effect.dnh"
	
	let enm;
	let spl;
	
	//　カウンタ
	let frame		= 0;
	let count		= 0;
	let timer		= 0;
	
	//　制限時間
	let SET_TIMER	= 60;
	
	@Initialize{
		//　ボス生成
		enm	= ObjEnemy_Create(OBJ_ENEMY_BOSS);
		ObjEnemy_SetDamageRate(enm, 0, 0 );
		ObjEnemy_Regist(enm);
		
		//　初期化
		EnemyInitialize(enm);
		
		//　体力0まで待機
		EndEnemy(enm);
		
		//　敵ダメージレート 第2引数:ボムバリア
		SetDamageRate(enm, 100, false );
		ShotScore(enm);
		
		//　削除上限
		SetShotAutoDeleteClip( 64, 64, 64, 64 );
	}
	
	@Loading{
		//　弾データ読み込み　ALPHAとADD
		LoadEnemyShotData( csd ~ "./../../lib/lib_bullet_data.dnh" );
		LoadEnemyShotData( csd ~ "./../../lib/lib_bullet_data_ADD.dnh" );
	}
	
	@MainLoop{
		//　敵の当たり判定
		SetIntersection(enm, true, true );
		
		//　パワー集中エフェクト
		if( timer == 180 ){
			Concentration03_Main( enm, power_rgb, 60 );
		}
		
		//　弾幕
		if( timer == 280 ){
			ShotMain( enm );
		}
		
		//　カウンタ
		if( !Obj_IsDeleted(enm) ){
			count++;
			frame++;
			timer++;
		}
		else{
			//　0でなんか発動すると困るので変な数値にする
			count	= -52149;
			frame	= -52149;
			timer	= -52149;
		}
		
		yield;
	}
	
	@Event{
		alternative( GetEventType() )
		case( EV_REQUEST_LIFE ){
			SetScriptResult( 1600 );
		}
		case( EV_REQUEST_TIMER ){
			//　制限時間
			SetScriptResult( SET_TIMER );
		}
		case( EV_REQUEST_SPELL_SCORE ){
			//　スペルカードボーナス
			SetScriptResult( SET_SCORE );
		}
	}
	
	@Finalize{ }
	
	//----------------------------------------------------------------------------------------------------
	//----------------------------------------------------------------------------------------------------
	//　task色々
	
	task EnemyInitialize(ID){
		//　アニメーション用共通データ作成
		CreateCommonDataArea("anime");
		SetAreaCommonData("anime","spa",false);
		
		//　60角形　距離64　優先71　遅延120.f　色[紫]　スペル用　[外枠出現処理ON,本体出現処理ON]
		//　"Default" or "Normal" or "SpellCard"
		CreateLifeBar(ID, 60, 64, 71, 0, [255,255,255], "Normal" , [false,false] );
		//　type　delay
		//　0:戦闘開始　1:戦闘継続
		RedMagicCircle( 1, 0 );
		Aura(ID, 8, aura_rgb[0], aura_rgb[1] );
		//　親ID　表示遅延　bool 移動効果　char 移動効果種別　bool フェードイン
		//　"BeginSpellCard" or "EndSpellCard"
		SetDrawTimer(enm, 0, true, "EndSpellCard", false );
		//　画像パスだけ変えればいいんじゃないかな
		EnemyDisplay_Enm06a(enm, true, enemy_tex_path );
		ObjMove_SetDestAtWeight(enm, CenX, CenY-96, 8, 8 );
	}
	
	function wait( long ){
		loop( long ){ yield; }
	}
	
	//　ショットメイン
	task ShotMain( ID ){
		let wtA		= 60;
		let wtB		= 9;
		let wtC		= 4;
		let agp		= 3;

		let r		= 1 - round( rand( 0, 1 ) ) * 2;
		
		//　way数
		let roundway= 8;
		let way		= 16;
		//　発射間隔
		let lp		= [ 1, 2 ];
		
		alternative( GetDifficult )
		case( "Easy" ){
			way		= 12;
			lp		= [ 1 ];
		}
		case( "Normal" ){
			lp		= [ 1, 2, 2 ];
		}
		case( "Hard" ){
			way		= 20;
			lp		= [ 2, 1, 2, 3 ];
		}
		case( "Lunatic" ){
			way		= 20;
			lp		= [ 3, 2, 3, 4 ];
		}
		case( "OverDrive" ){
			lp		= [ 1 ];
		}
		let gpos	= [ ObjMove_GetX(ID), ObjMove_GetY(ID) ];

		State;
		task State{
			Conc;
			while( !Obj_IsDeleted( ID ) ){
				gpos	= [ ObjMove_GetX(ID), ObjMove_GetY(ID) ];
				yield;
			}
			task Conc{
				SetEffect_Enm06( ID );
				Wait( 90 );
				Concentration03_Main( enm, power_rgb, 60 );
				SetAreaCommonData( "anime", "spa", true );
				CreateFamily( ID, 100, 0.5, 360 );
			}
		}
		SetShotA;
	//	SetShotB;
		
		task SetShotA{
			let idx = 0;
			loop{
				let rang	= rand(0,360);
				loop( lp[ idx%length(lp) ] ){
					let shote	= [ BGW_RED_27, BGW_PURPLE_27 ];
					ascent( i in 0..way ){
						let ag = [ rang + i*(360/way), rang + i*(360/way) + (360/way)/2 ];
						let spos = [
							[ gpos[0] + 32 * cos( ag[0] ), gpos[1] + 32 * sin( ag[0] ) ],
							[ gpos[0] + 32 * cos( ag[1] ), gpos[1] + 32 * sin( ag[1] ) ],
						];
						ascent( j in 0..2 ){
							let sht = CreateShot01( spos[j], 4, ag[j], -0.04, 0+j*3, shote[ j ], 24 );
							ShotSpeedChange( sht, 60, 0.01, 4 );
						}
					}
					rang += agp * r;
					ObjSound_Play( CreateShotSE[0] );
					if( Wait(wtB) ){ return; }
				}
				r = -r;
				idx++;
				if( Wait(wtA) ){ return; }
			}
		}
		
		task SetShotB{
			Wait( 190 );
			let count = 0;
			loop{
				ascent( i in 0..8 ){
					let ag = ( 45/2 + i*(360/8) ) + 24 * sin( count*2 );
					let spos = [
						gpos[0] + 128 * cos( ag ),
						gpos[1] + 128 * sin( ag ),
					];
					CreateShot01( spos, 4, ag, 0, 10, ADD_BGW_BLUE_02, 16 );
				}
				ObjSound_Play( CreateShotSE[1] );
				count++;
				if( Wait(wtC) ){ return; }
			}
		}
		function Wait( time ){
			loop( time ){
				yield;
				if( Obj_IsDeleted( ID ) ){ return true; }
			}
			return false;
		}
	}
	
	task ShotSpeedChange( ID, delay, acc, maxspeed ){
		while( ObjMove_GetSpeed(ID) > 0 ){ yield; }
		loop( delay ){ yield; }
		ObjMove_SetAcceleration( ID, acc );
		ObjMove_SetMaxSpeed( ID, maxspeed );
	}

	task CreateFamily( ID, life, scale, WaitTime ){
		let fam = [
			CreateEnemy_Mirror( life, scale, [ 170, 170, 170 ], WaitTime ),
			CreateEnemy_Mirror( life, scale, [ 170, 170, 170 ], WaitTime ),
			CreateEnemy_Mirror( life, scale, [ 170, 170, 170 ], WaitTime ),
			CreateEnemy_Mirror( life, scale, [ 170, 170, 170 ], WaitTime ),
			CreateEnemy_Mirror( life, scale, [ 170, 170, 170 ], WaitTime ),
			CreateEnemy_Mirror( life, scale, [ 170, 170, 170 ], WaitTime ),
			CreateEnemy_Mirror( life, scale, [ 170, 170, 170 ], WaitTime ),
			CreateEnemy_Mirror( life, scale, [ 170, 170, 170 ], WaitTime ),
		];
		
		let rot = 22.5;
		let count = 0;
		let rv = 0.36;
		
		ascent( let i in 0..( length(fam) ) ){

		//	Obj_SetValue( fam[i], "Collision", false );
			Move( fam[i], rot );
			FamilyMain( fam[i], ADD_BGW_BLUE_17 );
			rot += 360 / length( fam );
		}
		
		while( !Obj_IsDeleted( enm ) ){
			rot += rv * cos( count / 3 );
			SetCommonData( "Mirror_rotation", rot );
			count++;
			yield;
		}
		task Move( let obj, let rot ){
			let radius = 150;
			while( !Obj_IsDeleted( obj ) ){
				let spos = [
					ObjMove_GetX(ID) + radius * cos( rot ),
					ObjMove_GetY(ID) + radius * sin( rot )
				];
				ObjMove_SetPosition( obj, spos[0], spos[1] );
				ObjMove_SetAngle( obj, rot );
				rot += rv * cos( count / 3 );
				yield;
			}
		}
	}

	task FamilyMain( ID, shote ){
		let way = 6;
		let speed = 0;
		let acc = 0.01;
		let mx = 1.5;
		let wtA = 200;
		let wtB = 4;
		alternative( GetDifficult )
		case( "Easy" ){
			way = 0;
		}
		case( "Normal" ){
		}
		case( "Hard" ){
			way = 12;
		}
		case( "Lunatic" ){
			way = 5;
			wtA = 60;
		}
		case( "OverDrive" ){
		}
		let frame = 0;
		let p = 0;
		
		while( !Obj_IsDeleted(ID) ){
			let gpos		= [ ObjMove_GetX(ID), ObjMove_GetY(ID) ];
			let life		= ObjEnemy_GetInfo( ID, INFO_LIFE );
			p = GetAngleToPlayer(ID);
			if( life > 0 ){
				if( frame > 150 && frame%wtA == 0 ){
					let dist = 32;
					let angle = p;
					loop( way ){
						let spos = [
							ObjMove_GetX(ID) + dist * cos( angle ),
							ObjMove_GetY(ID) + dist * sin( angle ),
						];
						CreateShot01( spos, speed, angle, acc, mx, shote, 16 );
						angle += 360 / way;
					}
					ObjSound_Play( CreateShotSE[1] );
				}
				if( frame > 100 && frame%wtB == 0 ){
					let spos = [
						ObjMove_GetX(ID),
						ObjMove_GetY(ID),
					];
					let angle = ObjMove_GetAngle( ID );
					CreateShot01( spos, 0, angle, 0.1, 10, ADD_BGW_BLUE_02, 16 );
					ObjSound_Play( CreateShotSE[0] );
				}
			}
			frame++;
			yield;
		}
	}
	