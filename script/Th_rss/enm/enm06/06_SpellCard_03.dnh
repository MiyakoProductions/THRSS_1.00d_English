//#東方弾幕風
#ScriptVersion[3]
#Title["桃源宮　stage6　桃姫「スーパープリンセスピーチ」系"]
#Text["バーミヤン"]
#System["script/Th_rss/system/System_Main.dnh"]
#Image[""]
#Background[""]
	
	//　ライブラリ管理ファイル
	#include "./../lib_Control.dnh"
	#include "./lib_enm06_setting.dnh"
	#include "./lib_enm06_effect.dnh"
	
	let enm;
	let spl;
	
	//　カウンタ
	let frame		= 0;
	let count		= 0;
	let timer		= 0;
	
	//　制限時間
	let SET_TIMER	= 60;
	
	//　弾道変化フラグ
	let IsCurve		= false;
	
	@Initialize{
		//　ボス生成
		enm	= ObjEnemy_Create(OBJ_ENEMY_BOSS);
		ObjEnemy_SetDamageRate(enm, 0, 0 );
		ObjEnemy_Regist(enm);
		
		//　初期化
		EnemyInitialize(enm);
		
		//　体力0まで待機
		EndEnemy(enm);
		
		//　敵ダメージレート 第2引数:ボムバリア
		SetDamageRate(enm, 100, false );
		ShotScore(enm);
		
		//　スペルカード宣言
		CallSpellCard(enm,0);
		
		//　削除上限
		SetShotAutoDeleteClip( 32, 32, 32, 32 );
	}
	
	@Loading{
		//　弾データ読み込み　ALPHAとADD
		LoadEnemyShotData( csd ~ "./../../lib/lib_bullet_data.dnh" );
		LoadEnemyShotData( csd ~ "./../../lib/lib_bullet_data_ADD.dnh" );
	}
	
	@MainLoop{
		//　敵の当たり判定
		SetIntersection(enm, true, true );
		
		//　パワー集中エフェクト
		if( timer == 180 ){
			SetEffect_Enm06( enm );
			Concentration03_Main( enm, power_rgb, 60 );
		}
		
		//　弾幕
		if( timer == 280 ){
			ShotMain( enm );
		}
		
		//　カウンタ
		if( !Obj_IsDeleted(enm) ){
			count++;
			frame++;
			timer++;
		}
		else{
			//　0でなんか発動すると困るので変な数値にする
			count	= -52149;
			frame	= -52149;
			timer	= -52149;
		}
		
		yield;
	}
	
	@Event{
		alternative( GetEventType() )
		case( EV_REQUEST_LIFE ){
			//　ライフ一律1000
			SetScriptResult( 1500 );
		}
		case( EV_REQUEST_TIMER ){
			//　制限時間
			SetScriptResult( SET_TIMER );
		}
		case( EV_REQUEST_SPELL_SCORE ){
			//　スペルカードボーナス
			SetScriptResult( SET_SCORE );
		}
		case( EV_GAIN_SPELL ){
			//　スペル取得
			SpellCounterGet( GetDifficult, 6, 3 );
		}
	}
	
	@Finalize{ }
	
	//----------------------------------------------------------------------------------------------------
	//----------------------------------------------------------------------------------------------------
	//　task色々
	
	task EnemyInitialize(ID){
		//　アニメーション用共通データ作成
		CreateCommonDataArea("anime");
		SetAreaCommonData("anime","spa",false);
		
		//　60角形　距離64　優先71　遅延120.f　色[紫]　スペル用　[外枠出現処理ON,本体出現処理ON]
		//　"Default" or "Normal" or "SpellCard"
		CreateLifeBar(ID, 60, 64, 71, 0, [255,255,255], "SpellCard" , [false,false] );
		//　type　delay
		//　0:戦闘開始　1:戦闘継続
		RedMagicCircle( 1, 0 );
		Aura(ID, 8, aura_rgb[0], aura_rgb[1] );
		//　親ID　表示遅延　bool 移動効果　char 移動効果種別　bool フェードイン
		//　"BeginSpellCard" or "EndSpellCard"
		SetDrawTimer(enm, 0, true, "BeginSpellCard", false );
		//　画像パスだけ変えればいいんじゃないかな
		EnemyDisplay_Enm06a(enm, true, enemy_tex_path );
		ObjMove_SetDestAtWeight(enm, CenX, CenY-96, 8, 8 );
	}
	
	task CallSpellCard(ID,long){
		Wait(long);
		spl	= GetEnemyBossSceneObjectID();
		ObjEnemyBossScene_StartSpell( spl );
		
		let spell_text = "";
		alternative( GetDifficult )
		case( "Easy", "Normal" ){
			spell_text = "桃姫「スーパープリンセスピーチ」";
		}
		case( "Hard" ){
			spell_text = "健康「長久命の白銀ピーチ」";
		}
		case( "Lunatic" ){
			spell_text = "仙桃「不老不死の黄金ピーチ」";
		}
		case( "OverDrive" ){
			spell_text = "仙桃「不老不死の黄金ピーチ」";
		}
		
		SpellCounter( GetDifficult, 6, 3 );
		let sct = GetSpellCounter( GetDifficult, 6, 3 );
		
		CutinSP2(ID, spell_text, 0, 0, true );
		SpellCardCutin(ID, "TIREIDEN", 220, 192, [1,1], enemy_cutin_path, 512, 512, true );
		SpellCardBonusDisplay(spl,ID );
		SpellCardHistoryDisplay(ID, sct[1], sct[0] );
		SetBackGroundEffect_06(ID);
		SpellCardMagicTimer(ID);
	}
	
	function Wait( long ){
		loop( long ){
			yield;
			if( Obj_IsDeleted( enm ) ){ return true; }
		}
		return false;
	}
	
	//　ショットメイン
	task ShotMain( ID ){
		//　way数
		let way		= 6;
		let roundway= 12;
		let lp		= [ 0, 0, 0 ];
		//　角度
		let agp		= 0.3;
		let angle	= 0;
		//　弾種
		let shote	= [ BGW_PURPLE_19, ADD_BGW_GREEN_07 ];
		//　仙桃
		let luk		= 0;

		let dp		= 4;

		//　発射間隔
		let wtA		= 4;
		let wtB		= 160;
		let wtC		= 180;
		
		alternative( GetDifficult )
		case( "Easy" ){
			way = 4;
			roundway = 6;
			agp = 0.3;
		}
		case( "Normal" ){
		}
		case( "Hard" ){
			agp = 0.6;
			shote		= [ BGW_WHITE_19, ADD_BGW_GREEN_07 ];
		}
		case( "Lunatic" ){
			way = 10;
			roundway = 16;
			wtB = 120;
			agp = 0.45;
			shote		= [ BGW_YELLOW_19, ADD_BGW_GREEN_07 ];
		}
		case( "OverDrive" ){
			lp			= [ 10, 0 ];
		}
		

		let r = 1 - round( rand( 0, 1 ) ) * 2;
		
		let gpos	= [ ObjMove_GetX(ID), ObjMove_GetY(ID) ];
		State;
		SetShot;
		SetShotB;
		task State{
			while( !Obj_IsDeleted( ID ) ){
				gpos	= [ ObjMove_GetX(ID), ObjMove_GetY(ID) ];
				yield;
			}
		}
		task SetShot{
			loop{
				//　桃弾
				let r_dist = 120;
				while( r_dist > 0 ){
					let r_ang	= rand( 0, 360 );
					let delay	= 16;
					loop( way ){
						let spos	= [
							gpos[0] + r_dist * cos( r_ang ),
							gpos[1] + r_dist * sin( r_ang ),
						];
						let sht = CreateShot01( spos, 4, r_ang, -0.2, 1, shote[0], delay );
						ShotAngleChange( sht, [ -agp, agp ], shote[1], delay );
						r_ang += 360 / way;
					}
					ObjSound_Play( CreateShotSE[1] );
					r_dist -= dp;
					if( Wait( wtA ) ){ return; }
				}
				Concentration03_Main( ID, power_rgb, 60 );
				SetAreaCommonData( "anime", "spa", true );
				if( Wait( 60 ) ){ return; }
				IsCurve = true;
				FamilyEffect( ID, [255,255,255], 24 );
				SetAreaCommonData( "anime", "spa", false );
				ObjSound_Play( CreateShotSE[6] );
				if( Wait( wtC ) ){ return; }
				IsCurve	= false;
				ObjSound_Play( CreateShotSE[7] );
				
				task SubShot{
					//　仙桃
					let r_dist = 120;
					let r_ang = rand( 0, 360 );
					while( r_dist > 0 ){
						let delay	= 16;
						loop( way ){
							let spos	= [
								gpos[0] + r_dist * cos( r_ang ),
								gpos[1] + r_dist * sin( r_ang ),
							];
							let sht = CreateShot01( spos, 4, r_ang, -0.18, 0.8, BGW_RED_19, delay );
							ShotAngleChange( sht, [ -agp/2, agp/2 ], shote[1], delay );
							ObjSound_Play( CreateShotSE[1] );
							r_ang += 360 / way;
						}
						r_ang += 2 * r;
						r_dist -= dp * 2;
						if( Wait( wtA * 2 ) ){ return; }
					}
					r = -r;
				}
			}
		}

		task SetShotB{
			Wait( 90 );
			loop{
				let ag = GetAngleToPlayer( ID );
				
				loop( roundway ){
					let spos = [
						gpos[0] + 32 * cos( ag ),
						gpos[1] + 32 * sin( ag ),
					];
					CreateShot01( spos, 0.8, ag, 0, 10, ADD_BGW_YELLOW_22, 32 );
					ag += 360 / roundway;
				}
				ObjSound_Play( CreateShotSE[2] );
				if( Wait( wtB ) ){ return; }
			}
		}
	}
	
	task ShotAngleChange( ID, av, shote, delay ){
		let gpos	= [ ObjMove_GetX(ID), ObjMove_GetY(ID) ];
		let gang	= ObjMove_GetAngle(ID);
		let i		= 0;
		let rn		= truncate( rand(0,99) );
		let ac		= 32;
		
		let sht		= [
			CreateShot01( gpos, 0, gang, 0, 0, shote, delay ),
			CreateShot01( gpos, 0, gang, 0, 0, shote, delay ),
		];
		
		ascent( i in 0..( length(sht) ) ){
			ObjShot_SetAutoDelete( sht[i], false );
		}
		
		while( !Obj_IsDeleted(ID) ){
			gpos = [ ObjMove_GetX(ID), ObjMove_GetY(ID) ];
			gang = ObjMove_GetAngle(ID);
			
			if( IsCurve ){
				ObjMove_SetAngularVelocity( ID, av[ rn%2 ] );
			}
			else{
				ObjMove_SetAngularVelocity( ID, 0 );
			}
			
			ascent( i in 0..( length(sht) ) ){
				let ag		= gang - 180 - ac + i*(ac*2);
				let spos	= [
					gpos[0] + 14 * cos( ag ),
					gpos[1] + 14 * sin( ag ),
				];
				ObjMove_SetPosition( sht[i], spos[0], spos[1] );
				ObjMove_SetAngle( sht[i], ag - ac + i*(ac*2) );
			}
			
			yield;
		}
		ascent( i in 0..( length(sht) ) ){
			Obj_Delete( sht[i] );
		}
	}