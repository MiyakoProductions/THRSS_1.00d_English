//#東方弾幕風
#ScriptVersion[3]
#Title["桃源宮　stage6　桃姫通常01"]
#Text[""]
#System["script/Th_rss/system/System_Main.dnh"]
#Image[""]
#Background[""]
	
	//　ライブラリ管理ファイル
	#include "./../lib_Control.dnh"
	#include "./lib_enm06_setting.dnh"
	#include "./lib_enm06_effect.dnh"
	
	let enm;
	let spl;
	
	//　カウンタ
	let frame		= 0;
	let count		= 0;
	let timer		= 0;
	
	//　制限時間
	let SET_TIMER	= 60;
	
	@Initialize{
		//　ボス生成
		enm	= ObjEnemy_Create(OBJ_ENEMY_BOSS);
		ObjEnemy_SetDamageRate(enm, 0, 0 );
		ObjEnemy_Regist(enm);
		
		//　初期化
		EnemyInitialize(enm);
		
		//　体力0まで待機
		EndEnemy(enm);
		
		//　敵ダメージレート 第2引数:ボムバリア
		SetDamageRate(enm, 100, false );
		ShotScore(enm);
		
		//　削除上限
		SetShotAutoDeleteClip( 32, 32, 32, 32 );
	}
	
	@Loading{
		//　弾データ読み込み　ALPHAとADD
		LoadEnemyShotData( csd ~ "./../../lib/lib_bullet_data.dnh" );
		LoadEnemyShotData( csd ~ "./../../lib/lib_bullet_data_ADD.dnh" );
	}
	
	@MainLoop{
		//　敵の当たり判定
		SetIntersection(enm, true, true );
		
		//　パワー集中エフェクト
		if( timer == 90 ){
			Concentration03_Main( enm, power_rgb, 60 );
		}
		
		//　弾幕
		if( timer == 190 ){
			ShotMain(enm);
		}
		
		//　カウンタ
		if( !Obj_IsDeleted(enm) ){
			count++;
			frame++;
			timer++;
		}
		else{
			//　0でなんか発動すると困るので変な数値にする
			count	= -52149;
			frame	= -52149;
			timer	= -52149;
		}
		
		yield;
	}
	
	@Event{
		alternative( GetEventType() )
		case( EV_REQUEST_LIFE ){
			//　ライフ一律1000
			SetScriptResult( 1000 );
		}
		case( EV_REQUEST_TIMER ){
			//　制限時間
			SetScriptResult( SET_TIMER );
		}
		case( EV_REQUEST_SPELL_SCORE ){
			//　スペルカードボーナス
			SetScriptResult( SET_SCORE );
		}
	}
	
	@Finalize{ }
	
	//----------------------------------------------------------------------------------------------------
	//----------------------------------------------------------------------------------------------------
	//　task色々
	
	task EnemyInitialize(ID){
		//　アニメーション用共通データ作成
		CreateCommonDataArea("anime");
		SetAreaCommonData("anime","spa",false);
		
		//　60角形　距離64　優先71　遅延120.f　色[紫]　スペル用　[外枠出現処理ON,本体出現処理ON]
		//　"Default" or "Normal" or "SpellCard"
		CreateLifeBar(ID, 60, 64, 71, 0, [255,255,255], "Normal" , [false,false] );
		//　type　delay
		//　0:戦闘開始　1:戦闘継続
		RedMagicCircle( 0, 0 );
		Aura(ID, 8, aura_rgb[0], aura_rgb[1] );
		//　親ID　表示遅延　bool 移動効果　char 移動効果種別　bool フェードイン
		//　"BeginSpellCard" or "EndSpellCard"
		SetDrawTimer(enm, 0, false, "EndSpellCard", true );
		//　画像パスだけ変えればいいんじゃないかな
		EnemyDisplay_Enm06a(enm, true, enemy_tex_path );
		ObjMove_SetDestAtWeight(enm, CenX, CenY-96, 8, 8 );
	}
	
	function wait( long ){
		loop( long ){ yield; }
	}
	
	//　ショットメイン
	task ShotMain( ID ){
		let i		= 0;
		let wtA		= 50;
		let wtB		= 10;
		let agp		= 4;

		// ランダムで-1か1になる式
		// r = -r とする事で逆位相に切り替わる
		let r		= 1 - round( rand( 0, 1 ) ) * 2;
		
		//　way数
		let way		= 20;
		//　発射間隔
		let lp		= [ 1, 2 ];
		
		alternative( GetDifficult )
		case( "Easy" ){
			way		= 12;
			lp		= [ 1 ];
		}
		case( "Normal" ){
			lp		= [ 1, 2, 2 ];
		}
		case( "Hard" ){
			way		= 24;
			lp		= [ 1, 2, 3 ];
			agp		= 3;
			wtA		= 38;
			wtB		= 7;
		}
		case( "Lunatic" ){
			way		= 20;
			lp		= [ 1, 2, 3, 4 ];
			agp		= 2;
			wtA		= 20;
			wtB		= 5;
		}
		case( "OverDrive" ){
			lp		= [ 1 ];
		}
		let gpos	= [ ObjMove_GetX(ID), ObjMove_GetY(ID) ];

		//毎フレーム更新する情報はこっちで管理
		//弾幕部分とごっちゃにするとやり辛いと思う
		State;
		task State{
			while( !Obj_IsDeleted( ID ) ){
				gpos	= [ ObjMove_GetX(ID), ObjMove_GetY(ID) ];
				yield;
			}
		}
		let idx = 0;
		loop{
			let rang	= rand(0,360);
			loop( lp[ idx%length(lp) ] ){
				let shote	= [ BGW_RED_27, BGW_PURPLE_27 ];
				ascent( i in 0..way ){
					let ag = [ rang + i*(360/way), rang + i*(360/way) + (360/way)/2 ];
					let spos = [
						[ gpos[0] + 32 * cos( ag[0] ), gpos[1] + 32 * sin( ag[0] ) ],
						[ gpos[0] + 32 * cos( ag[1] ), gpos[1] + 32 * sin( ag[1] ) ],
					];
					ascent( j in 0..2 ){
						let sht = CreateShot01( spos[j], 4, ag[j], -0.04, 0+j*3, shote[ j ], 24 );
						ShotSpeedChange( sht, 60, 0.01, 4 );
					}
				}
				rang += agp * r;
				ObjSound_Play( CreateShotSE[0] );
				if( Wait(wtB) ){ return; }
			}
			r = -r;
			idx++;
			if( Wait(wtA) ){ return; }

			//待機処理
			//敵が撃破されると即座に待機終了でtrueが返る、それ以外はfalse
			function Wait( time ){
				loop( time ){
					yield;
					if( Obj_IsDeleted( ID ) ){ return true; }
				}
				return false;
			}
		}
	}
	
	task ShotSpeedChange( ID, delay, acc, maxspeed ){
		while( ObjMove_GetSpeed(ID) > 0 ){ yield; }
		loop( delay ){ yield; }
		ObjMove_SetAcceleration( ID, acc );
		ObjMove_SetMaxSpeed( ID, maxspeed );
	}