////#東方弾幕風
#ScriptVersion[3]
#Title["桃源宮　stage1　町人「西行寺幽々子」系"]
#Text[""]
#System["script/Th_rss/system/System_Main.dnh"]
#Image[""]
#Background[""]
	
	//　ライブラリ管理ファイル
	#include "./../lib_Control.dnh"
	#include "./lib_enm01_setting.dnh"
	#include "./lib_enm01_family.dnh"
	
	let enm;
	let spl;
	
	//　カウンタ
	let frame		= 0;
	let count		= 0;
	let timer		= 0;
	
	//　制限時間
	let SET_TIMER	= 60;
	
	@Initialize{
		//　ボス生成
		enm	= ObjEnemy_Create(OBJ_ENEMY_BOSS);
		ObjEnemy_SetDamageRate(enm, 0, 0 );
		ObjEnemy_Regist(enm);
		
		//　初期化
		EnemyInitialize(enm);
		
		//　体力0まで待機
		EndEnemy(enm);
		
		//　敵ダメージレート 第2引数:ボムバリア
		SetDamageRate(enm, 70, false );
		ShotScore(enm);
		
		//　スペルカード宣言
		CallSpellCard(enm,0);
		
		//　削除上限
		SetShotAutoDeleteClip(128,128,128,128);
	}
	
	@Loading{
		//　弾データ読み込み　ALPHAとADD
		//LoadEnemyShotData( csd ~ "./../../lib/lib_bullet_data.dnh" );
		//LoadEnemyShotData( csd ~ "./../../lib/lib_bullet_data_ADD.dnh" );
	}
	
	@MainLoop{
		//　敵の当たり判定
		SetIntersection(enm, true, true );
		
		//　パワー集中エフェクト
		if( timer == 180 ){
			Concentration01_Main(enm, power_rgb, 60 );
		}
		
		//　弾幕
		if( timer == 280 ){
			ShotMain(enm);
		}
		
		//　移動
		alternative( count )
		case( 256 ){
			EnemyMove(enm, 2, 8 );
			SetAreaCommonData("anime", "spa", false );
		}
		case( 300 ){
			count = 64;
		}
		
		//　カウンタ
		if( !Obj_IsDeleted(enm) ){
			count++;
			frame++;
			timer++;
		}
		else{
			//　0でなんか発動すると困るので変な数値にする
			count	= -52149;
			frame	= -52149;
			timer	= -52149;
		}
		
		yield;
	}
	
	@Event{
		alternative( GetEventType() )
		case( EV_REQUEST_LIFE ){
			//　ライフ一律1000
			SetScriptResult( 1000 );
		}
		case( EV_REQUEST_TIMER ){
			//　制限時間
			SetScriptResult( SET_TIMER );
		}
		case( EV_REQUEST_SPELL_SCORE ){
			//　スペルカードボーナス
			SetScriptResult( SET_SCORE );
		}
		case( EV_GAIN_SPELL ){
			//　スペル取得
			SpellCounterGet( GetDifficult, 1, 1 );
		}
	}
	
	@Finalize{ }
	
	//----------------------------------------------------------------------------------------------------
	//----------------------------------------------------------------------------------------------------
	//　task色々
	
	task EnemyInitialize(ID){
		//　アニメーション用共通データ作成
		CreateCommonDataArea("anime");
		SetAreaCommonData("anime","spa",false);
		
		//　60角形　距離64　優先71　遅延120.f　色[紫]　スペル用　[外枠出現処理ON,本体出現処理ON]
		//　"Default" or "Normal" or "SpellCard"
		CreateLifeBar(ID, 60, 64, 71, 0, [255,255,255], "SpellCard" , [false,false] );
		//　type　delay
		//　0:戦闘開始　1:戦闘継続
		RedMagicCircle( 1, 0 );
		Aura(ID, 8, aura_rgb[0], aura_rgb[1] );
		//　親ID　表示遅延　bool 移動効果　char 移動効果種別　bool フェードイン
		//　"BeginSpellCard" or "EndSpellCard"
		SetDrawTimer(enm, 0, true, "BeginSpellCard", false );
		//　画像パスだけ変えればいいんじゃないかな
		EnemyDisplay01(enm, true, enemy_tex_path );
		ObjMove_SetDestAtWeight(enm, CenX, CenY-96, 8, 8 );
	}
	
	task CallSpellCard(ID,long){
		wait(long);
		spl	= GetEnemyBossSceneObjectID();
		ObjEnemyBossScene_StartSpell( spl );
		
		let spell_text = "";
		
		alternative( GetDifficult )
		case( "Easy", "Normal" ){
			spell_text = "町人「西行寺幽々子」";
		}
		case( "Hard" ){
			spell_text = "対戦「素敵忍法分身の術」";
		}
		case( "Lunatic" ){
			spell_text = "死出「四人でのお迎え」";
		}
		case( "OverDrive" ){
			spell_text = "死出「四人でのお迎え」";
		}
		
		SpellCounter( GetDifficult, 1, 1 );
		let sct = GetSpellCounter( GetDifficult, 1, 1 );
		
		CutinSP2(ID, spell_text, 0, 0, true );
		SpellCardCutin(ID, "TIREIDEN", 220, 192, [1,1], enemy_cutin_path, 512, 512, true );
		SpellCardBonusDisplay(spl,ID );
		SpellCardHistoryDisplay(ID, sct[1], sct[0] );
		SetBackGroundEffect_01(ID);
		SpellCardMagicTimer(ID);
	}
	
	function wait( long ){
		loop( long ){ yield; }
	}
	
	//　ショットメイン
	task ShotMain( ID ){
		let count	= 0;
		let frame	= 0;
		let angle	= 0;
		let i		= 0;
		
		//　way数
		let lp		= [ 3, 0 ];
		//　蝶弾発射間隔
		let wt		= 8;
		//　蝶弾角度補正
		let agp		= 16;
		//　ショット画像
		let shote	= BGW_PURPLE_16;
		
		let type	= 0;
		
		alternative( GetDifficult )
		case( "Easy" ){
			lp		= [ 3, 0 ];
			wt		= 12;
			agp		= 20;
		}
		case( "Normal" ){
			lp		= [ 5, 0 ];
		}
		case( "Hard" ){
			shote	= BGW_PURPLE_16;
			lp		= [ 7, 0 ];
			agp 	= 9;
		}
		case( "Lunatic" ){
			shote	= BGW_RED_16;
			lp		= [ 9, 0 ];
			agp		= 7;
		}
		case( "OverDrive" ){
			shote	= BGW_RED_16;
			lp		= [ 11, 0 ];
		}
		
		while( !Obj_IsDeleted( ID ) ){
			let gpos	= [ ObjMove_GetX(ID), ObjMove_GetY(ID) ];
			
			if( frame == 60 ){
				let rang = rand(0,360);
				if( type%2 == 0 ){
					CallFamily( ID, gpos, rang );
					
					if( GetDifficult == "Hard" ){
						CallFamily( ID, gpos, rang+120 );
						CallFamily( ID, gpos, rang+240 );
					}
					else if( GetDifficult == "Lunatic" ){
						ascent( i in 0..4 ){
							CallFamily( ID, gpos, rang + i*90 );
						}
					}
					else if( GetDifficult == "OverDrive" ){
						ascent( i in 0..6 ){
							CallFamily( ID, gpos, rang + i*60 );
						}
					}
					
				}
				else{
					if( GetDifficult != "Lunatic" && GetDifficult != "OverDrive" ){
						CallFamily_Reverse( ID, [ CenX, CenY ], rang );
					}
					
					if( GetDifficult == "Hard" ){
						CallFamily_Reverse( ID, [ CenX, CenY ], rang+120 );
						CallFamily_Reverse( ID, [ CenX, CenY ], rang+240 );
					}
					else if( GetDifficult == "Lunatic" ){
						ascent( i in 0..4 ){
							CallFamily_Reverse( ID, gpos, rang + i*90 );
						}
					}
					else if( GetDifficult == "OverDrive" ){
						ascent( i in 0..6 ){
							CallFamily_Reverse( ID, gpos, rang + i*60 );
						}
					}
					
				}
				ObjSound_Play( CreateShotSE[3] );
				type++;
				frame = -300;
				angle = 0;
			}
			
			//　固定蝶弾
			if( count%wt == 0 && frame > 0 ){
				ascent( i in 0..(lp[0]) ){
					let sht1 = CreateShotA2( gpos[0], gpos[1], 1.6, 90+i*(360/lp[0]) - angle, 0, 10, shote, 16 );
					let sht2 = CreateShotA2( gpos[0], gpos[1], 1.6, 90+i*(360/lp[0]) + angle, 0, 10, shote, 16 );
					NotifyEventAll( EV_USER + 40, [ sht1, 16 ] );
					NotifyEventAll( EV_USER + 40, [ sht2, 16 ] );
				}
				ObjSound_Play( CreateShotSE[0] );
				angle += agp;
				SetAreaCommonData("anime", "spa", true );
			}
			
			frame++;
			count++;
			
			yield;
		}
	}
	
	
	//　中央から外側へ移動する幽霊
	task CallFamily( CallID, pos, angleD ){
		let fam		= CreateEnemy_Ghost( pos, "AQUA", 1.4 );
		let count	= 0;
		let dis		= 0;
		let angle	= angleD;
		
		let spd		= 1.4;
		let acc		= spd / 500;
		let agp		= 1;
		let wt		= 8;
		
		alternative( GetDifficult )
		case( "Easy" ){
			wt = 18;
		}
		case( "Normal" ){
			wt = 15;
		}
		case( "Hard" ){
			wt = 14;
			acc = spd / 200;
		}
		case( "Lunatic" ){
			wt = 9;
			acc = spd / 200;
		}
		case( "OverDrive" ){
		}
		
		let tex = EnemyDisplay01(fam, false, enemy_tex_path );
		
		ObjRender_SetBlendType(tex, BLEND_ADD_ARGB );
		ObjRender_SetColor(tex, 0, 128, 255 );
		
		while( !Obj_IsDeleted(fam) && !Obj_IsDeleted(CallID) ){
			ObjMove_SetPosition(fam, pos[0] + dis * cos( angle ), pos[1] + dis * sin( angle ) );
			
			ObjRender_SetScaleXYZ(tex, 0.8+0.2*sin(count*8), 0.8+0.2*cos(count*8), 0 );
			
			if( count > 60 && count%wt == 0 ){
				let sht = CreateShotA2( ObjMove_GetX(fam), ObjMove_GetY(fam), 0, angle, acc, spd, BGW_BLUE_11, 16 );
				NotifyEventAll( EV_USER + 40, [ sht, 16 ] );
				ObjSound_Play( CreateShotSE[1] );
			}
			
			count++;
			if( count > 60 ){
				if( GetDifficult == "Easy" || GetDifficult == "Normal" ){
					angle += agp;
					if( dis < 400 ){ dis += agp; }
					else{ Obj_Delete(fam); }
				}
				else{
					angle += agp / 2;
					if( dis < 400 ){ dis += agp; }
					else{ Obj_Delete(fam); }
				}
			}
			
			yield;
		}
		Obj_Delete(fam);
	}
	
	//　外側から中央へ移動する幽霊
	task CallFamily_Reverse( CallID, pos, angleD ){
		let fam		= CreateEnemy_Ghost( [ pos[0] + (400) * cos( angleD ), pos[1] + (400) * sin( angleD ) ], "AQUA", 1.4 );
		let count	= 0;
		let dis		= 0;
		let angle	= angleD;
		
		let spd		= 1.4;
		let acc		= spd / 500;
		let agp		= 1;
		let wt		= 8;
		
		alternative( GetDifficult )
		case( "Easy" ){
			wt = 18;
		}
		case( "Normal" ){
			wt = 15;
		}
		case( "Hard" ){
			wt = 14;
			acc = spd / 200;
		}
		case( "Lunatic" ){
			wt = 9;
			acc = spd / 200;
		}
		case( "OverDrive" ){
		}
		
		let tex = EnemyDisplay01(fam, false, enemy_tex_path );
		
		ObjRender_SetBlendType(tex, BLEND_ADD_ARGB );
		ObjRender_SetColor(tex, 0, 128, 255 );
		
		while( !Obj_IsDeleted(fam) && !Obj_IsDeleted(CallID) ){
			ObjMove_SetPosition(fam, pos[0] + (400-dis) * cos( angle ), pos[1] + (400-dis) * sin( angle ) );
			
			ObjRender_SetScaleXYZ(tex, 0.8+0.2*sin(count*8), 0.8+0.2*cos(count*8), 0 );
			
			if( count > 60 && count%wt == 0 ){
				let sht = CreateShotA2( ObjMove_GetX(fam), ObjMove_GetY(fam), 0, angle+180, acc, spd, BGW_BLUE_11, 16 );
				NotifyEventAll( EV_USER + 40, [ sht, 16 ] );
				ObjSound_Play( CreateShotSE[1] );
			}
			
			count++;
			if( count > 60 ){
				if( GetDifficult == "Easy" || GetDifficult == "Normal" ){
					angle += agp;
					if( dis < 400 ){ dis += agp; }
					else{ Obj_Delete(fam); }
				}
				else{
					angle += agp / 2;
					if( dis < 400 ){ dis += agp; }
					else{ Obj_Delete(fam); }
				}
			}
			
			yield;
		}
		Obj_Delete(fam);
	}