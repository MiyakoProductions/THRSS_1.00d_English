/*
#東方弾幕風[Package]
#Title["ポーズ"]
#Image[""]
#Text["ver 0.01a"]
*/
//----------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------
//　スペルプラクティスシーン
//----------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------
	
	
	let csd				= GetCurrentScriptDirectory();
	let LAST_SPELL		= false;
	let path			= csd ~ "./../img/title/spellpractice01a.png";
	
	//　使用する効果音
	let se = [
		PlaySEsP( csd ~ "./../se/menuselect.ogg" ),
		PlaySEsP( csd ~ "./../se/menudecide.ogg" ),
		PlaySEsP( csd ~ "./../se/menucancel.ogg" ),
	];
	
	//#include "./../lib/lib_CommonDataManager.dnh"
	#include "./../system/Load_AllTexture.dnh"
	#include "./Package_SpellPracticeUtility.dnh"
	#include "./../enm/SpellCounter.dnh"
	
@Initialize{
	SetAutoDeleteObject(true);
	
	//InitializeCommonData();
	
	TBackground();
	TSpellSelectStageScene();
	
	//　ステージセレクトすっとばし
	if( GetCommonData( "SetSpellPlacticeFrag", false ) ){
		SetAreaCommonData( "System", "select2", 1 );
		SetAreaCommonData( "System", "S_sector", 1 );
		TSpellSelectSpellScene( GetCommonData( "SelectPlace2", 0 ) + 1 );
	}
	
	SetAreaCommonData("Score", "high_score", 0 );
	SetScriptResult("");
}

@MainLoop{
	yield;
}

@Finalize{
	Obj_DeleteArray( se );
	//ClosePackage();
}

//　渡された配列の中に入っているオブジェクトを全て削除
task Obj_DeleteArray( obj_array ){
	ascent( let i in 0..( length(obj_array) ) ){
		Obj_Delete( obj_array[i] );
	}
}

//　このスクリプト中でアクティブなサウンドオブジェクト
function PlaySEsP( path ){
	let sid		= ObjSound_Create;
	let se_vol	= GetAreaCommonData("Option", "SE_Volume", 100 );

	se_vol = 100 - 100 * ( ( 100 - se_vol ) / 100 )^2;
	
	ObjSound_Load(sid, path );
	ObjSound_SetVolumeRate(sid, se_vol );
	ObjSound_SetLoopEnable(sid, false );
	
	return sid;
}

//　出る時用
task PlaySEsP_Exit( path ){
	let sid		= ObjSound_Create;
	let se_vol	= GetAreaCommonData("Option", "SE_Volume", 100 );

	se_vol = 100 - 100 * ( ( 100 - se_vol ) / 100 )^2;
	
	ObjSound_Load(sid, path );
	ObjSound_SetVolumeRate(sid, se_vol );
	ObjSound_SetLoopEnable(sid, false );
	ObjSound_Play(sid);
	loop( 180 ){ yield; }
	Obj_Delete(sid);
}




//----------------------------------------------------
//　背景描画
//----------------------------------------------------
task TBackground(){
	//背景
	let csd 	= GetCurrentScriptDirectory();
	let move1	= 0;
	let moveA	= 0;
	let move2	= 0;
	let moveB	= 0;
	let move3	= 0;
	let moveC	= 0;
	let flg		= 0;
	let ctr		= 0;
	let Ssector	= GetAreaCommonData( "System","S_sector", 0 );
	let efrag	= GetAreaCommonData( "System", "title_end", false );
	let ssp		= GetCommonData( "SetSpellPlacticeFrag", false );
	let state	= GetCommonData("STATE",0);
	
	let objImage	= ObjPrim_Create(OBJ_SPRITE_2D);
	let objText		= ObjPrim_Create(OBJ_SPRITE_2D);
	let objText2	= ObjPrim_Create(OBJ_SPRITE_2D);
	let objWindw	= ObjPrim_Create(OBJ_SPRITE_2D);
	
	//　背景
	ObjPrim_SetTexture(objImage, csd ~ "../img/title/Title00_d.png" );
	Obj_SetRenderPriorityI(objImage, 33 );
	ObjSprite2D_SetSourceRect(objImage, 0, 0, 640, 480 );
	ObjSprite2D_SetDestRect(objImage, 0, 0, 640, 480 );
	ObjRender_SetColor(objImage, 64, 64, 64 );
	
	//　項目名 1
	Obj_SetRenderPriorityI(objText, 34);
	ObjRender_SetScaleXYZ(objText, 0.56, 0.56, 0 );
	ObjPrim_SetTexture(objText, csd ~ "../img/title/sl01.png" );
	ObjSprite2D_SetSourceRect(objText, 0, 512, 512, 768 );
	ObjSprite2D_SetDestCenter(objText);
	
	//　項目名 2
	Obj_SetRenderPriorityI(objText2, 34 );
	ObjRender_SetScaleXYZ(objText2, 0.56, 0.56, 0 );
	ObjPrim_SetTexture(objText2, csd ~ "../img/title/sl01.png" );
	ObjSprite2D_SetSourceRect(objText2, 0, 768, 512, 1024 );
	ObjSprite2D_SetDestCenter(objText2);
	
	//　下のウィンドウ
	ObjRender_SetPosition( objWindw, 320, 350, 0 );
	ObjPrim_SetTexture( objWindw, csd ~ "../img/title/et03.png" );
	Obj_SetRenderPriorityI( objWindw, 35 );
	ObjRender_SetColor( objWindw, 32, 32, 32 );
	ObjSprite2D_SetSourceRect(objWindw, 0, 0, 590, 230 );
	ObjSprite2D_SetDestCenter( objWindw );
	
	while( move1 < 1 && !efrag ){
		efrag = GetAreaCommonData("System","title_end",false);
		
		move1 = 1 * sin( moveA );
		
		ObjRender_SetPosition(objText, 320, 48 - 64 + move1*64, 0 );
		
		ObjRender_SetAlpha(objImage, move1*255 );
		ObjRender_SetAlpha(objText, move1*255 );
		ObjRender_SetAlpha(objText2, 0 );
		ObjRender_SetAlpha(objWindw, 0 );
		
		moveA += 5;
		
		yield;
	}
	move1 = 0;
	moveA = 0;
	while( Ssector != 3 && !efrag ){
		efrag	= GetAreaCommonData( "System", "title_end", false );
		Ssector	= GetAreaCommonData( "System", "S_sector", 0 );
		ssp		= GetCommonData( "SetSpellPlacticeFrag", false );
		state	= GetCommonData( "STATE", 0 );
		
		//ステージ選択→タイトルへ戻る時のキャンセル
		if( Ssector == 0 && ctr > 1 && GetVirtualKeyState(VK_CANCEL) == KEY_PUSH ){
			SetAreaCommonData("System", "S_sector", 3 );
			PlaySEsP_Exit( csd ~ "./../se/menucancel.ogg" );
			break;
		}
		
		//　状況で云々
		if( Ssector == 0 ){
			//　初期化フェイズ
			move1 = 0;
			moveA = 0;
			move2 = 0;
			moveB = 0;
			move3 = 0;
			moveC = 0;
		}
		else if( Ssector == 1 ){
			//　ステージセレクトからスペルセレクトへ行くとき
			if( !ssp ){
				move3 = 0;
				moveC = 0;
				move1 = 1 * sin( moveA );
				
				ObjRender_SetPosition(objText, 320, 48 - move1*64, 0 );
				ObjRender_SetAlpha(objText, 255 - move1*255 );
				
				ObjRender_SetPosition(objText2, 320, 48 - 64 + move1*64, 0 );
				ObjRender_SetAlpha(objText2, move1*255 );
				
				if( state == 1 ){
					ObjRender_SetAlpha(objWindw, 255/1.5 );
				}
				else{
					ObjRender_SetAlpha(objWindw, 0 );
				}
				
				if( move1 < 1 ){ moveA += 5; }
			}
			else{
				move3 = 0;
				moveC = 0;
				move1 = 1;
				
				ObjRender_SetPosition(objText, 320, 48 - move1*64, 0 );
				ObjRender_SetAlpha(objText, 255 - move1*255 );
				
				ObjRender_SetPosition(objText2, 320, 48 - 64 + move1*64, 0 );
				ObjRender_SetAlpha(objText2, move1*255 );
				
				if( state == 1 ){
					ObjRender_SetAlpha(objWindw, 255/1.5 );
				}
				else{
					ObjRender_SetAlpha(objWindw, 0 );
				}
			}
		}
		else if( Ssector == 2 ){
			//　スペルセレクトからステージセレクトに戻る時
			if( move2 >= 1 ){
				//　初期化フェイズ経由
				SetAreaCommonData("System", "S_sector", 0 );
			}
			move2 = 1 * sin( moveB );
			
			ObjRender_SetPosition(objText, 320, 48 - 64 + move2*64, 0 );
			ObjRender_SetAlpha(objText, move2*255 );
			
			ObjRender_SetPosition(objText2, 320, 48 - move2*64, 0 );
			ObjRender_SetAlpha(objText2, 255 - move2*255 );
			
			ObjRender_SetAlpha(objWindw, (255/1.5) - move1*(255/1.5) );
			
			if( move2 < 1 ){ moveB += 5; }
		}
		else if( Ssector == 4 ){
			//　自機選択
			move3 = 1 * sin( moveC );
			
			ObjRender_SetPosition(objText2, 320, 48 - move3*64, 0 );
			ObjRender_SetAlpha(objText2, 255 - move3*255 );
			
			ObjRender_SetAlpha(objWindw, 255/1.5 - move3*(255/1.5) );
			
			if( move3 < 1 ){ moveC += 5; }
		}
		
		ctr++;
		
		yield;
	}
	move1 = 0;
	moveA = 0;
	while( move1 < 1 && !efrag ){
		efrag = GetAreaCommonData("System","title_end",false);
		
		move1 = 1 * sin( moveA );
		
		ObjRender_SetPosition(objText, 320, 48 - move1*64, 0 );
		
		ObjRender_SetAlpha(objImage, 255 - move1*255 );
		ObjRender_SetAlpha(objText, 255 - move1*255 );
		ObjRender_SetAlpha(objWindw, 0 );
		
		moveA += 5;
		
		yield;
	}
	SetAreaCommonData("System", "S_sector", 0 );
	SetAreaCommonData("System", "R_sector", 0 );
	SetAreaCommonData("System", "select", 0 );
	SetAreaCommonData("System", "select2", 0 );
	CloseScript( GetOwnScriptID() );
}




//----------------------------------------------------
//　ステージ選択
//----------------------------------------------------
task TSpellSelectStageScene{
	let csd 	= GetCurrentScriptDirectory();
	let ctr		= 0;
	let ctr2	= 0;
	let cc		= 0;
	let i		= 0;
	let j1		= 0;
	let j2		= 0;
	let j3		= 0;
	let escape	= 0;
	let sth		= [
		"STAGE1",
		"STAGE2",
		"STAGE3",
		"STAGE4",
		"STAGE5",
		"STAGE6",
		"EXTRA",
		"PHANTASM"
	];
	let Release	= 5;	//　解放レベル stage-1
	
	let stc		= GetCommonData( "SelectPlace2", 0 );
	let Ssector	= GetAreaCommonData( "System", "S_sector", 0 );
	let eflg	= GetAreaCommonData( "System", "title_end", false );
	let ssp		= GetCommonData( "SetSpellPlacticeFrag", false );
	
	//　EX解放済み
	if( GetAreaCommonData("SaveData", "Standby_ExtraStage", false ) ){ Release = 6; }
	//　PH解放済み
	if( GetAreaCommonData("SaveData", "Standby_PhantasmStage", false ) ){ Release = 7; }
	
	//　ステージセレクトのテクスチャ表示
	ascent( i in 0..( Release+1 ) ){
		Draw_StageSelect( [96,100+i*24], i, sth[i], [0.6,0.6] );
	}
	
	while( !eflg ){
		eflg	= GetAreaCommonData( "System", "title_end", false );
		Ssector	= GetAreaCommonData( "System", "S_sector", 0 );
		ssp		= GetCommonData( "SetSpellPlacticeFrag", false );
		
		//　ステージセレクト時
		if( Ssector == 0 ){
			if( ctr == 1 ){
				SetAreaCommonData( "System", "select", stc );
			}
			
			//　決定
			if( ctr > 4 && GetVirtualKeyState( VK_OK ) == KEY_PUSH ){
				ctr = 0;
				SetAreaCommonData("System","select2",1);
				SetAreaCommonData("System","S_sector",1);
				TSpellSelectSpellScene( stc+1 );
				ObjSound_Play( se[1] );
			}
			
			if( ctr > 1 && GetVirtualKeyState( VK_UP ) == KEY_PUSH ){
				stc--;
				if( stc < 0 ){ stc = Release; }
				ctr = 0;
				SetSelectPlace2(stc);
				SetSelectPlace3([0,0]);
				SetAreaCommonData("System","select",stc);
				ObjSound_Play( se[0] );
			}
			if( ctr > 1 && GetVirtualKeyState( VK_DOWN ) == KEY_PUSH ){
				stc++;
				if( stc > Release ){ stc = 0; }
				ctr = 0;
				SetSelectPlace2(stc);
				SetSelectPlace3([0,0]);
				SetAreaCommonData("System","select",stc);
				ObjSound_Play( se[0] );
			}
			//　長押しで増減
			if( GetVirtualKeyState( VK_UP ) == KEY_HOLD ){
				if( ctr2 >= 30 && ctr2 %6 == 0 ){
					stc--;
					if(stc<0){stc=Release;}
					ctr=0;
					SetSelectPlace2(stc);
					SetSelectPlace3([0,0]);
					SetAreaCommonData("System","select",stc);
					ObjSound_Play( se[0] );
				}
				ctr2++;
			}
			else if( GetVirtualKeyState( VK_DOWN ) == KEY_HOLD ){
				if( ctr2 >= 30 && ctr2 %6 == 0 ){
					stc++;
					if(stc>Release){stc=0;}
					ctr=0;
					SetSelectPlace2(stc);
					SetSelectPlace3([0,0]);
					SetAreaCommonData("System","select",stc);
					ObjSound_Play( se[0] );
				}
				ctr2++;
			}
			else{
				ctr2	= 0;
			}
			ctr++;
		}
		else if( Ssector == 4 ){
			if( ctr > 1 && GetVirtualKeyState(VK_CANCEL) == KEY_PUSH ){
				ctr = 0;
				SetAreaCommonData("System", "S_sector", 1 );
				SetAreaCommonData("System", "R_sector", 2 );
			}
			ctr++;
		}
		yield;
	}
}




//----------------------------------------------------
//　スペカ選択
//----------------------------------------------------
task TSpellSelectSpellScene(type){
	let csd 	= GetCurrentScriptDirectory();
	let stcC	= GetCommonData("SelectPlace3", [ 0, 0 ] );
	let Ssector	= GetAreaCommonData("System", "S_sector", 0 );
	let eflg	= GetAreaCommonData("System", "title_end", false );
	let ctr		= 0;
	let ctr2	= 0;
	let ctrx	= 0;
	let cc		= 0;
	let stcx	= stcC[0];
	let stcy	= stcC[1];
	let i		= 0;
	let escape	= 0;
	let INDEX_ListMax;	//　ページ数最大値
	let snh;			//　spell名
	let noh;			//　ナンバー
	let dih;			//　難易度
	let sch;			//　コメント
	let cth;			//　立ち絵
	
	//　状態
	let State;
	let STATE_SPELL_SELECT	= 0;	//　スペカ選択
	let STATE_RANK_SELECT	= 1;	//　難易度選択
	
	State = STATE_SPELL_SELECT;
	
	SetCommonData( "STATE", State );
	
	//　スペカデータの配列をinclude
	#include "./SpellName.dnh"
	#include "./SpellNameComment.dnh"
	#include "./SpellCommentChara.dnh"
	
	//　対応データ代入
	alternative( type )
	case( 1 ){
		INDEX_ListMax = 0;
		snh = snpath1;
		noh = nopath1;
		dih = dipath1;
		sch = scpath1;
		cth = ctpath1;
	}
	case( 2 ){
		INDEX_ListMax = 1;
		snh = snpath2;
		noh = nopath2;
		dih = dipath2;
		sch = scpath2;
		cth = ctpath2;
	}
	case( 3 ){
		INDEX_ListMax = 1;
		snh = snpath3;
		noh = nopath3;
		dih = dipath3;
		sch = scpath3;
		cth = ctpath3;
	}
	case( 4 ){
		INDEX_ListMax = 1;
		snh = snpath4;
		noh = nopath4;
		dih = dipath4;
		sch = scpath4;
		cth = ctpath4;
	}
	case( 5 ){
		INDEX_ListMax = 1;
		snh = snpath5;
		noh = nopath5;
		dih = dipath5;
		sch = scpath5;
		cth = ctpath5;
	}
	case( 6 ){
		INDEX_ListMax = 2;
		snh = snpath6;
		noh = nopath6;
		dih = dipath6;
		sch = scpath6;
		cth = ctpath6;
	}
	case( 7 ){
		INDEX_ListMax = 1;
		snh = snpath7;
		noh = nopath7;
		dih = dipath7;
		sch = scpath7;
		cth = ctpath7;
	}
	case( 8 ){
		INDEX_ListMax = 4;
		snh = snpath8;
		noh = nopath8;
		dih = dipath8;
		sch = scpath8;
		cth = ctpath8;
	}
	
	//　起動するステージ決定
	SetAreaCommonData("System", "stg_ST", type );
	
	//　historyデータ読み込み
	SetAreaCommonData("System", "select", stcy );
	SetAreaCommonData("System", "select2", stcx );
	
	//　そのステージの 総スペカ数 / 4 で難易度差分抜きのスペカ数が出る
	let SpellList = length(snh) / 4;
	
	//　EX と PH の時はそのままの値で
	if( type == 7 || type == 8 ){
		SpellList = length(snh);
	}
	
	ascent( i in 0..( SpellList ) ){
		Draw_SpellSelect( [192,120+i*24], i, i, [0.6,0.6] );
	}
	
	let play_spell;
	let get_spell;
	
	while( !eflg ){
		eflg	= GetAreaCommonData("System", "title_end", false );
		Ssector	= GetAreaCommonData("System", "S_sector", 0 );
		
		if( Ssector == 1 ){
			
			//　配列参照のやつ
			let array_num;
			//　特殊難易度移動制限のやつ
			let IsMove;
			
			//　ここは弄らなくてよい
			if( type == 7 || type == 8 ){
				array_num = stcy;
				IsMove = false;
			}
			else{
				array_num = stcx + stcy*4;
				IsMove = true;
			}
			
			let history			= GetSpellCounter( dih[ array_num ], type, stcy );
			let play_spell		= history[0];
			let get_spell		= history[1];
			
			if( ctr == 1 ){
				//　フォント表示
				if( State == STATE_RANK_SELECT ){
					DrawText2( [44,365], [255,255,255], 0, noh[ array_num ], 26, "メイリオ" );
					
					if( play_spell == 0 ){
						DrawText2( [128,365], [255,255,255], 0, "？？？？？？？？", 26, "メイリオ" );
					}
					else{
						//　プレイ回数 1 以上ならスペカ名を表示
						DrawText2( [128,365], [255,255,255], 0, snh[ array_num ], 26, "メイリオ" );
						DrawText2( [44,402], [255,255,255], 0, sch[ array_num ], 14, "ＭＳ ゴシック" );
						//　キャラアイコ
						let ct = [
							player_tex[10],
							player_tex[26],
							player_tex[31],
						];
						DrawTexture( [100,300], 0.35, ct[ cth[ array_num ] ], array_num );
						
						//　グラフ作成用のデータ
						let success = get_spell;							//　取得に成功した回数
						let failure = play_spell - get_spell;				//　取得に失敗した回数
						let par_suc = round( success / play_spell * 100 );	//　成功確率
						let par_fai = round( failure / play_spell * 100 );	//　失敗確率
						
						//　円グラフ表示
						CreatePieChart( [380,296], [255,32,32], par_fai, 48, 1 );
						CreatePieChart( [380,296], [32,255,255], par_suc, 48, 0 );
						
						//　総挑戦回数
						let get_pnum = "総挑戦回数　";
						get_pnum = get_pnum ~ IntToString( play_spell );
						DrawText2( [170,250], [32,255,32], 0, get_pnum, 20, "メイリオ" );
						//　総取得回数
						let get_gnum = "総取得回数　";
						get_gnum = get_gnum ~ IntToString( get_spell );
						DrawText2( [170,250+24], [255,255,32], 0, get_gnum, 20, "メイリオ" );
						//　取得失敗率
						let get_fai = "取得失敗確率　";
						get_fai = get_fai ~ IntToString( par_fai ) ~ "%";
						DrawText2( [170,250+48], [255,32,32], 0, get_fai, 20, "メイリオ" );
						//　取得成功率
						let get_suc = "取得成功確率　";
						get_suc = get_suc ~ IntToString( par_suc ) ~ "%";
						DrawText2( [170,250+72], [32,255,255], 0, get_suc, 20, "メイリオ" );
					}
				}
				//　難易度設定
				SetAreaCommonData("System", "Difficulty", dih[ array_num ] );
			}
			
			//------------------------------------------------------------------------------------------------
			//------------------------------------------------------------------------------------------------
			//　ここから操作系
			//　キャンセル
			if( ctr > 4 && GetVirtualKeyState(VK_CANCEL) == KEY_PUSH ){
				if( State == STATE_SPELL_SELECT ){
					SetSelectPlace3( [0,0] );
					SetAreaCommonData("System", "S_sector", 2 );
					SetCommonData("SetSpellPlacticeFrag", false );
					ObjSound_Play( se[2] );
					break;
				}
				else if( State == STATE_RANK_SELECT ){
					State = STATE_SPELL_SELECT;
					SetCommonData( "STATE", State );
					ObjSound_Play( se[2] );
				}
				ctr = 0;
			}
			//　決定
			if( ctr > 4 && GetVirtualKeyState(VK_OK) == KEY_PUSH ){
				if( State == STATE_SPELL_SELECT ){
					//　難易度選択へ
					State = STATE_RANK_SELECT;
					SetCommonData( "STATE", State );
					if( type == 7 ){
						Draw_RankSelect( [128,140+i*24], 0, 4, [0.6,0.6] );
					}
					else if( type == 8 ){
						Draw_RankSelect( [128,140+i*24], 0, 5, [0.6,0.6] );
					}
					else{
						ascent( i in 0..4 ){
							Draw_RankSelect( [128,140+i*24], i, i, [0.6,0.6] );
						}
					}
					ObjSound_Play( se[1] );
				}
				else if( State == STATE_RANK_SELECT ){
					if( play_spell == 0 ){
						//　ダメ
						ObjSound_Play( se[2] );
					}
					else{
						//　自機選択へ
						SetAreaCommonData("System", "S_sector", 4 );
						SetAreaCommonData("System", "R_sector", 1 );
						CallPlayerSelect( array_num );
						ObjSound_Play( se[1] );
					}
				}
				ctr = 0;
			}
			
			//　上下選択
			if( ctr > 1 && GetVirtualKeyState(VK_UP) == KEY_PUSH ){
				if( State == STATE_SPELL_SELECT ){
					stcy--;
					if( stcy < 0 ){ stcy = SpellList - 1; }
					ctr = 0;
					SetSelectPlace3( [stcx,stcy] );
					SetAreaCommonData("System", "select", stcy );
					ObjSound_Play( se[0] );
				}
				else if( State == STATE_RANK_SELECT ){
					if( IsMove ){ stcx--; }
					if( stcx < 0 ){ stcx = 3; }
					if( type != 7 && type != 8 ){ ctr = 0; }
					SetSelectPlace3( [stcx,stcy] );
					SetAreaCommonData("System", "select2", stcx );
					if( IsMove ){ ObjSound_Play( se[0] ); }
				}
			}
			if( ctr > 1 && GetVirtualKeyState(VK_DOWN) == KEY_PUSH ){
				if( State == STATE_SPELL_SELECT ){
					stcy++;
					if( stcy > SpellList - 1 ){ stcy = 0; }
					ctr = 0;
					SetSelectPlace3( [stcx,stcy] );
					SetAreaCommonData("System", "select", stcy );
					ObjSound_Play( se[0] );
				}
				else if( State == STATE_RANK_SELECT ){
					if( IsMove ){ stcx++; }
					if( stcx > 3 ){ stcx = 0; }
					if( type != 7 && type != 8 ){ ctr = 0; }
					SetSelectPlace3( [stcx,stcy] );
					SetAreaCommonData("System", "select2", stcx );
					if( IsMove ){ ObjSound_Play( se[0] ); }
				}
			}
			//　長押し
			if( State == STATE_SPELL_SELECT ){
				if( GetVirtualKeyState( VK_UP ) == KEY_HOLD ){
					if( ctr2 >= 30 && ctr2%6 == 0 ){
						stcy--;
						if( stcy < 0 ){ stcy = SpellList - 1; }
						ctr = 0;
						SetSelectPlace3( [stcx,stcy] );
						SetAreaCommonData("System","select",stcy );
						ObjSound_Play( se[0] );
					}
					ctr2++;
				}
				else if( GetVirtualKeyState( VK_DOWN ) == KEY_HOLD ){
					if( ctr2 >= 30 && ctr2%6 == 0 ){
						stcy++;
						if( stcy > SpellList - 1 ){ stcy = 0; }
						ctr = 0;
						SetSelectPlace3( [stcx,stcy] );
						SetAreaCommonData("System", "select", stcy );
						ObjSound_Play( se[0] );
					}
					ctr2++;
				}
				else{
					ctr2 = 0;
				}
			}
			//------------------------------------------------------------------------------------------------
			//------------------------------------------------------------------------------------------------
			
			ctr++;
			ctrx++;
		}
		else if( Ssector == 4 ){
			//　自機選択中はカウント初期化
			ctr		= 0;
			ctr2	= 0;
		}
		yield;
	}
	SetAreaCommonData("System", "select", 0 );
	SetAreaCommonData("System", "select2", 0 );
}
