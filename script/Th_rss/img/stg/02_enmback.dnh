

//--------------------------------------------------------------------------------------------------------------------------------
//--------------------------------------------------------------------------------------------------------------------------------
//Å@èâñºîwåi
task SetBackGroundEffect_02(ID){
	let id			= [ObjPrim_Create(OBJ_SPRITE_2D),
						ObjPrim_Create(OBJ_SPRITE_2D),
						ObjPrim_Create(OBJ_SPRITE_2D)];
	let alpha1		= 0;
	let alphaA		= 0;
	let alpha2		= 0;
	let alphaB		= 0;
	let cc			= 0;
	let i			= 0;
	
	ObjPrim_SetTexture(id[0], spell_tex[6] );
	ObjPrim_SetTexture(id[1], spell_tex[7] );
	ObjPrim_SetTexture(id[2], spell_tex[8] );
	ObjRender_SetBlendType(id[0], BLEND_ALPHA );
	ObjRender_SetBlendType(id[1], BLEND_ADD_ARGB );
	ObjRender_SetBlendType(id[2], BLEND_SUBTRACT );
	
	loop( length(id) ){
		ObjRender_SetPosition(id[i], CenX, CenY, 0 );
		Obj_SetRenderPriorityI(id[i], 29 );
		ObjRender_SetScaleXYZ(id[i], 1, 1, 0 );
		ObjPrim_SetVertexCount(id[i], 4 );
		ObjPrim_SetVertexPosition(id[i], 0, 384/-2, 448/-2, 0 );
		ObjPrim_SetVertexPosition(id[i], 1, 384/-2, 448/2, 0 );
		ObjPrim_SetVertexPosition(id[i], 2, 384/2, 448/-2, 0 );
		ObjPrim_SetVertexPosition(id[i], 3, 384/2, 448/2, 0 );
		ObjPrim_SetVertexUVT(id[i], 0, 0, 0 );
		ObjPrim_SetVertexUVT(id[i], 1, 0, 448 );
		ObjPrim_SetVertexUVT(id[i], 2, 384, 0 );
		ObjPrim_SetVertexUVT(id[i], 3, 384, 448 );
		i++;
	}
	i = 0;
	
	ObjPrim_SetVertexPosition(id[1], 0, 512/-2, 512/-2, 0 );
	ObjPrim_SetVertexPosition(id[1], 1, 512/-2, 512/2, 0 );
	ObjPrim_SetVertexPosition(id[1], 2, 512/2, 512/-2, 0 );
	ObjPrim_SetVertexPosition(id[1], 3, 512/2, 512/2, 0 );
	ObjPrim_SetVertexUVT(id[1], 0, 0, 0 );
	ObjPrim_SetVertexUVT(id[1], 1, 0, 512 );
	ObjPrim_SetVertexUVT(id[1], 2, 512, 0 );
	ObjPrim_SetVertexUVT(id[1], 3, 512, 512 );
	
	while( !Obj_IsDeleted(ID) ){
		
		alpha1 = 1 * sin( alphaA );
		alpha2 = 1 * sin( alphaB );
		
		ObjPrim_SetVertexUVT(id[0], 0, 0, 0 + cc/4 );
		ObjPrim_SetVertexUVT(id[0], 1, 0, 448 + cc/4 );
		ObjPrim_SetVertexUVT(id[0], 2, 384, 0 + cc/4 );
		ObjPrim_SetVertexUVT(id[0], 3, 384, 448 + cc/4 );
		ObjPrim_SetVertexUVT(id[1], 0, 0, 0 - cc/1 );
		ObjPrim_SetVertexUVT(id[1], 1, 0, 512 - cc/1 );
		ObjPrim_SetVertexUVT(id[1], 2, 512, 0 - cc/1 );
		ObjPrim_SetVertexUVT(id[1], 3, 512, 512 - cc/1 );
		ObjPrim_SetVertexUVT(id[2], 0, 0, 0 - cc/8 );
		ObjPrim_SetVertexUVT(id[2], 1, 0, 448 - cc/8 );
		ObjPrim_SetVertexUVT(id[2], 2, 384, 0 - cc/8 );
		ObjPrim_SetVertexUVT(id[2], 3, 384, 448 - cc/8 );
		
		ObjPrim_SetVertexAlpha(id[0], 0, alpha1*255 );
		ObjPrim_SetVertexAlpha(id[0], 1, alpha2*255 );
		ObjPrim_SetVertexAlpha(id[0], 2, alpha1*255 );
		ObjPrim_SetVertexAlpha(id[0], 3, alpha2*255 );
		ObjPrim_SetVertexAlpha(id[1], 0, alpha1*96 );
		ObjPrim_SetVertexAlpha(id[1], 1, alpha2*96 );
		ObjPrim_SetVertexAlpha(id[1], 2, alpha1*96 );
		ObjPrim_SetVertexAlpha(id[1], 3, alpha2*96 );
		ObjPrim_SetVertexAlpha(id[2], 0, alpha1*255 );
		ObjPrim_SetVertexAlpha(id[2], 1, alpha2*255 );
		ObjPrim_SetVertexAlpha(id[2], 2, alpha1*255 );
		ObjPrim_SetVertexAlpha(id[2], 3, alpha2*255 );
		
		let rgb = 255;
		
		loop( 4 ){
			ObjPrim_SetVertexColor(id[2], i, 128, 255, 128 );
			i++;
		}
		i = 0;
		
		ObjPrim_SetVertexColor(id[0], 0, 96, 96, 64 );
		ObjPrim_SetVertexColor(id[0], 1, 64, 64, 48 );
		ObjPrim_SetVertexColor(id[0], 2, 96, 96, 64 );
		ObjPrim_SetVertexColor(id[0], 3, 64, 64, 48 );
		ObjPrim_SetVertexColor(id[1], 0, 32, 255, 32 );
		ObjPrim_SetVertexColor(id[1], 1, 255, 255, 32 );
		ObjPrim_SetVertexColor(id[1], 2, 32, 255, 32 );
		ObjPrim_SetVertexColor(id[1], 3, 255, 255, 32 );
		
		cc++;
		if( alpha1 < 1 ){ alphaA += 2; }
		if( alpha2 < 1 && alpha1 >= 0.5 ){ alphaB += 5; }
		
		yield;
	}
	ascent( i in 0..( length(id) ) ){
		Obj_Delete(id[i]);
	}
}




//Å@ñÿóÏîwåi
task SetBackGroundEffect_02b(ID){
	let id			= [ObjPrim_Create(OBJ_SPRITE_2D),
						ObjPrim_Create(OBJ_SPRITE_2D),
						ObjPrim_Create(OBJ_SPRITE_2D)];
	let alpha1		= 0;
	let alphaA		= 0;
	let alpha2		= 0;
	let alphaB		= 0;
	let cc			= 0;
	let i			= 0;
	
	ObjPrim_SetTexture(id[0], spell_tex[3] );
	ObjPrim_SetTexture(id[1], spell_tex[4] );
	ObjPrim_SetTexture(id[2], spell_tex[5] );
	ObjRender_SetBlendType(id[0], BLEND_ALPHA );
	ObjRender_SetBlendType(id[1], BLEND_ALPHA );
	ObjRender_SetBlendType(id[2], BLEND_SUBTRACT );
	
	loop( length(id) ){
		ObjRender_SetPosition(id[i], CenX, CenY, 0 );
		Obj_SetRenderPriorityI(id[i], 29 );
		ObjRender_SetScaleXYZ(id[i], 1, 1, 0 );
		ObjPrim_SetVertexCount(id[i], 4 );
		ObjPrim_SetVertexPosition(id[i], 0, 512/-2, 512/-2, 0 );
		ObjPrim_SetVertexPosition(id[i], 1, 512/-2, 512/2, 0 );
		ObjPrim_SetVertexPosition(id[i], 2, 512/2, 512/-2, 0 );
		ObjPrim_SetVertexPosition(id[i], 3, 512/2, 512/2, 0 );
		ObjPrim_SetVertexUVT(id[i], 0, 0, 0 );
		ObjPrim_SetVertexUVT(id[i], 1, 0, 512 );
		ObjPrim_SetVertexUVT(id[i], 2, 512, 0 );
		ObjPrim_SetVertexUVT(id[i], 3, 512, 512 );
		i++;
	}
	i = 0;
	
	ObjRender_SetScaleXYZ(id[0], 1.2, 1.2, 0 );
	ObjRender_SetScaleXYZ(id[2], 1.2, 1.2, 0 );
	
	ColorChange_SetBackGroundEffect_02b( id[1] );
	
	while( !Obj_IsDeleted(ID) ){
		
		alpha1 = 1 * sin( alphaA );
		alpha2 = 1 * sin( alphaB );
		
		ObjRender_SetAngleZ(id[0], cc/-4 );
		ObjRender_SetAngleZ(id[2], cc/2 );
		
		ObjPrim_SetVertexUVT(id[1], 0, 0, 0 + cc );
		ObjPrim_SetVertexUVT(id[1], 1, 0, 512 + cc );
		ObjPrim_SetVertexUVT(id[1], 2, 512, 0 + cc );
		ObjPrim_SetVertexUVT(id[1], 3, 512, 512 + cc );
		
		ObjPrim_SetVertexAlpha(id[0], 0, alpha1*255 );
		ObjPrim_SetVertexAlpha(id[0], 1, alpha2*255 );
		ObjPrim_SetVertexAlpha(id[0], 2, alpha1*255 );
		ObjPrim_SetVertexAlpha(id[0], 3, alpha2*255 );
		ObjPrim_SetVertexAlpha(id[1], 0, alpha1*255 );
		ObjPrim_SetVertexAlpha(id[1], 1, alpha2*255 );
		ObjPrim_SetVertexAlpha(id[1], 2, alpha1*255 );
		ObjPrim_SetVertexAlpha(id[1], 3, alpha1*255 );
		ObjPrim_SetVertexAlpha(id[2], 0, alpha1*255 );
		ObjPrim_SetVertexAlpha(id[2], 1, alpha2*255 );
		ObjPrim_SetVertexAlpha(id[2], 2, alpha1*255 );
		ObjPrim_SetVertexAlpha(id[2], 3, alpha1*255 );
		
		loop( 4 ){
			ObjPrim_SetVertexColor(id[0], i, 200, 200, 200 );
			ObjPrim_SetVertexColor(id[2], i, 255, 255, 255 );
			i++;
		}
		i = 0;
		
		cc++;
		if( alpha1 < 1 ){ alphaA += 2; }
		if( alpha2 < 1 && alpha1 >= 0.5 ){ alphaB += 5; }
		
		yield;
	}
	loop( length(id) ){
		Obj_Delete(id[i]);
		i++;
	}
	i = 0;
}

task ColorChange_SetBackGroundEffect_02b( ObjID ){
	let CH		= "RED";
	let chc		= 0;
	let r		= 0;
	let g		= 0;
	let b		= 0;
	let _min	= 150;
	let _max	= 200;
	let rgb		= 255;
	
	while( !Obj_IsDeleted(ObjID) ){
		
		ObjPrim_SetVertexColor(ObjID, 0, r/2, g/2, b/2 );
		ObjPrim_SetVertexColor(ObjID, 1, r/2, g/2, b/2 );
		ObjPrim_SetVertexColor(ObjID, 2, r/2, g/2, b/2 );
		ObjPrim_SetVertexColor(ObjID, 3, r/2, g/2, b/2 );
		
		alternative(CH)
		case("RED"){//îíÅ`ê‘
			chc++;
			if(g>0&&chc>60){g-=5;}
			if(b>0&&chc>60){b-=5;}
			if(g<=0&&b<=0){
				CH="WHITE";
				chc=0;
			}
		}
		case("WHITE"){//ê‘Å`îí
			chc++;
			if(g<128&&chc>60){g+=5;}
			if(b<128&&chc>60){b+=5;}
			if(g>=128&&b>=128){
				CH="GREEN";
				chc=0;
			}
		}
		case("GREEN"){//îíÅ`óŒ
			chc++;
			if(r>0&&chc>60){r-=5;}
			if(b>0&&chc>60){b-=5;}
			if(r<=0&&b<=0){
				CH="WHITE2";
				chc=0;
			}
		}
		case("WHITE2"){//óŒÅ`îí
			chc++;
			if(r<128&&chc>60){r+=5;}
			if(b<128&&chc>60){b+=5;}
			if(r>=128&&b>=128){
				CH="BLUE";
				chc=0;
			}
		}
		case("BLUE"){//îíÅ`ê¬
			chc++;
			if(r>0&&chc>60){r-=5;}
			if(g>0&&chc>60){g-=5;}
			if(r<=0&&g<=0){
				CH="WHITE3";
				chc=0;
			}
		}
		case("WHITE3"){//ê¬Å`îí
			chc++;
			if(r<128&&chc>60){r+=5;}
			if(g<128&&chc>60){g+=5;}
			if(r>=128&&g>=128){
				CH="RED";
				chc=0;
			}
		}
		
		yield;
	}
}