

//--------------------------------------------------------------------------------------------------------------------------------
//--------------------------------------------------------------------------------------------------------------------------------
//Å@óHÅXéqîwåi
task SetBackGroundEffect_01(ID){
	let id			= [ObjPrim_Create(OBJ_SPRITE_2D),
						ObjPrim_Create(OBJ_SPRITE_2D),
						ObjPrim_Create(OBJ_SPRITE_2D),
						ObjPrim_Create(OBJ_SPRITE_2D)];
	let alpha1		= 0;
	let alphaA		= 0;
	let alpha2		= 0;
	let alphaB		= 0;
	let cc			= 0;
	let i			= 0;
	
	ObjPrim_SetTexture(id[0], spell_tex[0] );
	ObjPrim_SetTexture(id[1], spell_tex[0] );
	ObjPrim_SetTexture(id[2], spell_tex[1] );
	ObjPrim_SetTexture(id[3], spell_tex[2] );
	ObjRender_SetBlendType(id[0], BLEND_ALPHA );
	ObjRender_SetBlendType(id[1], BLEND_ADD_ARGB );
	ObjRender_SetBlendType(id[2], BLEND_ALPHA );
	ObjRender_SetBlendType(id[3], BLEND_SUBTRACT );
	
	loop( length(id) ){
		ObjRender_SetPosition(id[i], CenX, CenY, 0 );
		Obj_SetRenderPriorityI(id[i], 29 );
		ObjRender_SetScaleXYZ(id[i], 1, 1, 0 );
		ObjPrim_SetVertexCount(id[i], 4 );
		ObjPrim_SetVertexPosition(id[i], 0, 384/-2, 448/-2, 0 );
		ObjPrim_SetVertexPosition(id[i], 1, 384/-2, 448/2, 0 );
		ObjPrim_SetVertexPosition(id[i], 2, 384/2, 448/-2, 0 );
		ObjPrim_SetVertexPosition(id[i], 3, 384/2, 448/2, 0 );
		ObjPrim_SetVertexUVT(id[i], 0, 0, 0 );
		ObjPrim_SetVertexUVT(id[i], 1, 0, 448 );
		ObjPrim_SetVertexUVT(id[i], 2, 384, 0 );
		ObjPrim_SetVertexUVT(id[i], 3, 384, 448 );
		i++;
	}
	i = 0;
	
	ObjRender_SetAngleY(id[1], 180 );
	
	while( !Obj_IsDeleted(ID) ){
		
		alpha1 = 1 * sin( alphaA );
		alpha2 = 1 * sin( alphaB );
		
		ObjPrim_SetVertexUVT(id[0], 0, 0 + cc/8, 0 + cc/3 );
		ObjPrim_SetVertexUVT(id[0], 1, 0 + cc/8, 448 + cc/3 );
		ObjPrim_SetVertexUVT(id[0], 2, 384 + cc/8, 0 + cc/3 );
		ObjPrim_SetVertexUVT(id[0], 3, 384 + cc/8, 448 + cc/3 );
		ObjPrim_SetVertexUVT(id[1], 0, 0 + cc/8, 0 + cc/3 );
		ObjPrim_SetVertexUVT(id[1], 1, 0 + cc/8, 448 + cc/3 );
		ObjPrim_SetVertexUVT(id[1], 2, 384 + cc/8, 0 + cc/3 );
		ObjPrim_SetVertexUVT(id[1], 3, 384 + cc/8, 448 + cc/3 );
		
		ObjPrim_SetVertexUVT(id[3], 0, 0, 0 - cc/8 );
		ObjPrim_SetVertexUVT(id[3], 1, 0, 448 - cc/8 );
		ObjPrim_SetVertexUVT(id[3], 2, 384, 0 - cc/8 );
		ObjPrim_SetVertexUVT(id[3], 3, 384, 448 - cc/8 );
		
		ObjPrim_SetVertexAlpha(id[0], 0, alpha1*255 );
		ObjPrim_SetVertexAlpha(id[0], 1, alpha2*255 );
		ObjPrim_SetVertexAlpha(id[0], 2, alpha1*255 );
		ObjPrim_SetVertexAlpha(id[0], 3, alpha2*255 );
		ObjPrim_SetVertexAlpha(id[1], 0, alpha1*255 );
		ObjPrim_SetVertexAlpha(id[1], 1, alpha2*255 );
		ObjPrim_SetVertexAlpha(id[1], 2, alpha1*255 );
		ObjPrim_SetVertexAlpha(id[1], 3, alpha1*255 );
		ObjPrim_SetVertexAlpha(id[2], 0, alpha1*255 );
		ObjPrim_SetVertexAlpha(id[2], 1, alpha2*255 );
		ObjPrim_SetVertexAlpha(id[2], 2, alpha1*255 );
		ObjPrim_SetVertexAlpha(id[2], 3, alpha1*255 );
		ObjPrim_SetVertexAlpha(id[3], 0, alpha1*255 );
		ObjPrim_SetVertexAlpha(id[3], 1, alpha2*255 );
		ObjPrim_SetVertexAlpha(id[3], 2, alpha1*255 );
		ObjPrim_SetVertexAlpha(id[3], 3, alpha1*255 );
		
		let rgb = 255;
		
		loop( 4 ){
			ObjPrim_SetVertexColor(id[0], i, 255, 64, 64 );
			ObjPrim_SetVertexColor(id[1], i, 128, 128, 255 );
			ObjPrim_SetVertexColor(id[2], i, 48, 32, 48 );
			i++;
		}
		i = 0;
		
		ObjPrim_SetVertexColor(id[3], 0, 128, 255, 255 );
		ObjPrim_SetVertexColor(id[3], 1, 192, 255, 128 );
		ObjPrim_SetVertexColor(id[3], 2, 128, 255, 255 );
		ObjPrim_SetVertexColor(id[3], 3, 192, 255, 128 );
		
		cc++;
		if( alpha1 < 1 ){ alphaA += 2; }
		if( alpha2 < 1 && alpha1 >= 0.5 ){ alphaB += 5; }
		
		yield;
	}
	loop( length(id) ){
		Obj_Delete(id[i]);
		i++;
	}
	i = 0;
}
