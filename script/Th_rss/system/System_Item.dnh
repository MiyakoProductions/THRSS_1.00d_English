	
	//　常駐するのでSEは無駄に増やさない様に
	let BulletDelete	= PlaySEs( GetCurrentScriptDirectory() ~ "./../se/bulletbreak.ogg" );
	let GetItem = [
		PlaySEs( GetCurrentScriptDirectory() ~ "./../se/seScore.ogg" ),			//　弾消し置換アイテム取得
		PlaySEs( GetCurrentScriptDirectory() ~ "./../se/ex_release04.ogg" ),	//　特殊アイテム取得
		PlaySEs( GetCurrentScriptDirectory() ~ "../se/shot5.ogg" ),				//　キラキラ高音
		PlaySEs( GetCurrentScriptDirectory() ~ "./../se/seScore2.ogg" ),		//　点アイテム取得
		PlaySEs( GetCurrentScriptDirectory() ~ "./../se/se_extend3.ogg" ),		//　かけら 出現
		PlaySEs( GetCurrentScriptDirectory() ~ "./../se/se_extend2.ogg" ),		//　ボムエクステンド
	];
	
	#include "./../system/Load_AllTexture.dnh"		//　殆ど全部のテクスチャパス
	
	//　エフェクトとか色々
	#include "./System_Effect.dnh"


	//　プレイヤーのスペル発動中かのフラグ　スペル終了から180フレームまで
	let flg_spell_active = false;
	let count_spell_active = 0;
	
	@Initialize{
		//　弾削除時得点アイテム自動作成無効化
		SetDefaultBonusItemEnable( false );
		
		//　ユーザ定義アイテムデータ読み込み
		LoadItemData( GetCurrentScriptDirectory() ~ "./Dat_ItemData.dnh" );
		
		//　アイテムのレイヤーを一括でチェンジできるよ
		SetItemRenderPriorityI(49);
	}
	
	@MainLoop{
		if( IsPlayerSpellActive ){
			flg_spell_active = true;
			count_spell_active = 1;
		}else{
			flg_spell_active = false;
			if( count_spell_active > 0 ){
				count_spell_active++;
				if( count_spell_active > 180 ){
					count_spell_active = 0;
				}
			}
		}
		
		yield;
	}
	
	@Event{
		alternative( GetEventType() )
		case( EV_DELETE_SHOT_TO_ITEM ){
			//弾削除時アイテム作成イベント
			let ObjShot		= GetEventArgument(0);	//　オブジェクトID取得
			let ObjPos		= GetEventArgument(1);	//　オブジェクト座標取得([0]=x, [1]=y)
			let ImgID		= ObjShot_GetImageID(ObjShot);	//　弾種別ID取得
			
			if( length(ObjPos) > 0 ){
				if( !Obj_IsValueExists(ObjShot,"Item_Off") ){
					BulletItem([ObjPos[0],ObjPos[1]]);
				}
				if( !Obj_IsValueExists(ObjShot,"Effect_Off") ){
					BulletBreak([ObjPos[0],ObjPos[1]], ObjMove_GetAngle(ObjShot), ImgID, BLEND_ADD_ARGB );
					ObjSound_Play( BulletDelete );
				}
			}
		}
		case( EV_GET_ITEM ){
			//　アイテムゲット時のイベント
			let ItemType	= GetEventArgument(0);	//　アイテム種別取得
			let ObjItem		= GetEventArgument(1);	//　アイテムオブジェクト取得
			
			alternative( ItemType )
			case( 1 ){
				//　弾消しアイテム取得時

				//　EXモードのみ、ボス中かつ非ボム状態で弾消しアイテムにゲージ回復効果付与
				alternative( GetAreaCommonData("System", "Difficulty", "Normal" ) )
				case( "Extra" ){
					if( GetEnemyBossSceneObjectID != ID_INVALID && !count_spell_active ){
						let gauge_base	= GetAreaCommonData("MegaEvolutionGauge", "GaugeBase", 0 );
						SetAreaCommonData("MegaEvolutionGauge", "GaugeBase", gauge_base + 1 );
					}
				}
				
				
				ObjSound_Play( GetItem[0] );
			}
			case( 5 ){
				//　ボムエクステンドアイテム取得時
				
				AddFragment( "Spell", 6 );
				
				ObjSound_Play( GetItem[5] );
			}
			case( 8 ){
				//　点アイテム取得時
				ObjSound_Play( GetItem[3] );
				
				let data	= GetAreaCommonData("Trance", "max_score", 0 );
				
				if( GetAreaCommonData("MegaEvolutionGauge", "Gauge", 0 ) >= 6 
					&& !GetAreaCommonData("MegaEvolution", "Frag", false ) 
					&& GetAreaCommonData("Trance", "max_score", 0 ) % 3 <= 1 ){
					SetAreaCommonData("Trance", "max_score", data+2 );
				}else{
					SetAreaCommonData("Trance", "max_score", data+1 );
				}
				
				let rang	= rand(180,360);
				let pos		= [
					GetPlayerX() + 32 * cos( rang ),
					GetPlayerY() + 32 * sin( rang ),
				];
				//　素点10 * 最大得点のスコア加算
				AddScoreDelay( 10, data );
				ScorePointDisplay( pos, data, 10 );
				
				//　システム連動
				let gauge_base	= GetAreaCommonData("MegaEvolutionGauge", "GaugeBase", 0 );
				SetAreaCommonData("MegaEvolutionGauge", "GaugeBase", gauge_base + 1 );
			}
			case( 10 ){
				//　特殊アイテム取得時　点
				ObjSound_Play( GetItem[1] );
				
				//　ゲージ回復
				let gauge_base	= GetAreaCommonData("MegaEvolutionGauge", "GaugeBase", 0 );
				SetAreaCommonData("MegaEvolutionGauge", "GaugeBase", gauge_base + 10 );
				
				//--------------------------------------------------------------------------------
				//--------------------------------------------------------------------------------
				//　得点処理
				
				let data	= GetAreaCommonData("Trance", "max_score", 0 );
				if( GetAreaCommonData("MegaEvolutionGauge", "Gauge", 0 ) >= 6 ){
					SetAreaCommonData("Trance", "max_score", data+1 );
				}
				let rang	= rand(180,360);
				let pos		= [
					GetPlayerX() + 32 * cos( rang ),
					GetPlayerY() + 32 * sin( rang ),
				];
				
				//　ストスタフラグ
				let S_Style	= GetAreaCommonData("Option", "StrongStyle", 0 );
				
				//　パワーアップ中とストスタの時
				if( GetAreaCommonData("MegaEvolution", "Frag", false ) || S_Style == 1 ){
					//　パワーアップ中
					//　素点10 * 最大得点のスコア加算
					AddScoreDelay( 100, data );
					ScorePointDisplay( pos, data, 100 );
				}
				else{
					//　通常時
					if( GetAreaCommonData("MegaEvolutionGauge", "Gauge", 0 ) >= 6 ){
						//　ゲージ >= MAX
						//　素点10 * 最大得点のスコア加算
						AddScoreDelay( 10, data );
						ScorePointDisplay( pos, data, 10 );
					}
				}
				//--------------------------------------------------------------------------------
				//--------------------------------------------------------------------------------
				
				//　エフェクト
				loop( 4 ){
					ItemGetEffect( rand(0,360), rand(32,64), 0, 0.2, 10, [32,32,255], rand(128,255) );
				}
			}
			case( 11 ){
				//　特殊アイテム取得時　残機
				
				if( !GetAreaCommonData("MegaEvolution", "Frag", false ) ){
					//　通常
					AddFragment( "Life", 1 );
				}
				else{
					//　2倍
					let pos = [ ObjMove_GetX(ObjItem), ObjMove_GetY(ObjItem)-32 ];
					let data = [ "×", "2" ];
					let scale = 0.8;
					let distance = 16*scale;
					let rgb_array = [ 255, 128, 255 ];
					
					pos[0] = pos[0] - ( truncate( length(data)/2 ) * distance );
					
					ascent( let i in 0..( length(data) ) ){
						CreateText_Ascii( pos, 31, scale, data[i], rgb_array, i*4, 120 - i*4 );
						pos[0] = pos[0] + distance;
					}
					
					AddFragment( "Life", 2 );
				}
				
				ObjSound_Play( GetItem[1] );
				loop( 8 ){
					ItemGetEffect( rand(0,360), rand(32,64), 0, 0.2, 10, [255,32,255], rand(128,255) );
				}
				
			}
			case( 12 ){
				//　特殊アイテム取得時　ボム
				
				if( !GetAreaCommonData("MegaEvolution", "Frag", false ) ){
					AddFragment( "Spell", 1 );
				}
				else{
					//　2倍
					let pos = [ ObjMove_GetX(ObjItem), ObjMove_GetY(ObjItem)-32 ];
					let data = [ "×", "2" ];
					let scale = 0.8;
					let distance = 16*scale;
					let rgb_array = [ 128, 255, 128 ];
					
					pos[0] = pos[0] - ( truncate( length(data)/2 ) * distance );
					
					ascent( let i in 0..( length(data) ) ){
						CreateText_Ascii( pos, 31, scale, data[i], rgb_array, i*4, 120 - i*4 );
						pos[0] = pos[0] + distance;
					}
					
					AddFragment( "Spell", 2 );
				}
				
				ObjSound_Play( GetItem[1] );
				loop( 8 ){
					ItemGetEffect( rand(0,360), rand(32,64), 0, 0.2, 10, [32,255,32], rand(128,255) );
				}
			}
		}
		case( EV_USER + 31 ){
			let enm = GetEventArgument(0);	//　敵オブジェクト取得
			//　ボスからどんどんアイテムが出てくる
			ItemDropDistance( enm );
		}
		case( EV_USER + 32 ){
			//　ユーザ定義イベント　点アイテムと経験値アイテム放出　ボス専用
			let AllBoss = GetEnemyBossObjectID();
			
			if( length(AllBoss) > 0 ){
				ascent( let i in 0..( length(AllBoss) ) ){
					ascent( let j in 0..16 ){
						let pos = [
							[
								ObjMove_GetX(AllBoss[i]) + 32 * cos( j*(360/16) ),
								ObjMove_GetY(AllBoss[i]) + 32 * sin( j*(360/16) ),
							],
							[
								ObjMove_GetX(AllBoss[i]) + 64 * cos( j*(360/16) ),
								ObjMove_GetY(AllBoss[i]) + 64 * sin( j*(360/16) ),
							],
						];
						//　経験値アイテム
						CreateItemEXTRA( pos[0][0], pos[0][1], rand(2,3), j*(360/16), -0.05, 0, 60, 10, 1 );
						//　点アイテム
						CreateItem( 8, pos[0], 0.5 );
						CreateItem( 8, pos[1], 0.5 );
					}
				}
			}
		}
		case( EV_USER + 33 ){
			//　ユーザ定義イベント　残機のかけら放出
			let AllBoss = GetEnemyBossObjectID();
			
			if( length(AllBoss) > 0 ){
				ascent( let i in 0..( length(AllBoss) ) ){
					CreateItemEXTRA( ObjMove_GetX(AllBoss[i]), ObjMove_GetY(AllBoss[i]), 3, 90+45, -0.05, 0, 120, 11, 1.4 );
				}
			}
		}
		case( EV_USER + 34 ){
			//　ユーザ定義イベント　残機のかけら放出
			let AllBoss = GetEnemyBossObjectID();
			
			if( length(AllBoss) > 0 ){
				ascent( let i in 0..( length(AllBoss) ) ){
					CreateItemEXTRA( ObjMove_GetX(AllBoss[i]), ObjMove_GetY(AllBoss[i]), 3, 90-45, -0.05, 0, 120, 12, 1.4 );
				}
			}
		}
		case( EV_USER + 35 ){
			//　ユーザ定義イベント　点アイテム放出　ザコ専用
			let data = GetEventArgument(0);
			let lp	= data[2];
			
			//　アイテム生成
			loop( lp ){
				let pos	= [ data[0]+rand(-32,32), data[1]+rand(-32,32) ];
				CreateItem( 8, pos, 0.45 );
			}
			
			//　エフェクト
			loop( (lp/2) ){
				let pos	= [ data[0]+rand(-32,32), data[1]+rand(-32,32) ];
				CreateLiberationEffect01( [data[0],data[1]], rand(2,8), -0.1, 0, [rand(0,255),255,255] );
			}
			CreateLiberationEffect02( [data[0],data[1]], rand(1,4), -0.1, 0, [32,32,16] );
			CreateLiberationEffect03( [data[0],data[1]], -6, [64,128,255] );
			CreateLiberationEffect03( [data[0],data[1]], 6, [128,255,255] );
		}
		case( EV_USER + 36 ){
			//　Fragment UP
			//　Bonus + 1000000
			let data = GetEventArgument(0);
			let pos1 = [ GetPlayerX(), GetPlayerY() ];
			let pos2 = [ GetPlayerX(), GetPlayerY() ];
			
			let i = 0;
			let distance = 8;
			let rgb_array = [
				[ 255, 128, 255 ],
				[ 255, 255, 255 ],
			];
			let point = GetAreaCommonData("Trance", "max_score", 0 );
			let msg = "";
			let mlt = 1;
			alternative( GetAreaCommonData("System", "Difficulty", "Normal" ) )
			case( "Normal" ){ mlt = 1.5; }
			case( "Hard" ){ mlt = 2; }
			case( "Lunatic" ){ mlt = 3; }
			if( GetAreaCommonData("MegaEvolution", "Frag", false ) ){ mlt *= 5; }
			point = round( point / 500 ) * 500;
			point = point * 80 * mlt;
			msg = "BONUS  +"~IntToString( point );
			
			pos1[0] = pos1[0] - ( truncate( length(data[0])/2 ) * distance );
			pos1[1] = pos1[1] - distance;
			
			pos2[0] = pos2[0] - ( truncate( length(data[1])/2 ) * distance );
			pos2[1] = pos2[1] + distance;
			
			ObjSound_Play( GetItem[4] );
			
			ascent( i in 0..( length(data[0]) ) ){
				CreateText_Ascii( pos1, 31, 0.6, data[0][i], rgb_array[0], i*2, 120 - i*2 );
				pos1[0] = pos1[0] + distance;
			}
			ascent( i in 0..( length(msg) ) ){
				CreateText_Ascii( pos2, 31, 0.6, [msg[i]], rgb_array[1], 60, 60 );
				pos2[0] = pos2[0] + distance;
			}
			
			//　残機のかけら増加
			if( !GetAreaCommonData("MegaEvolution", "Frag", false ) || GetAreaCommonData("System", "Difficulty", "NULL" ) == "OverDrive" ){
				//　通常
				AddFragment( "Life", 1 );
			}
			else{
				//　2倍
				let pos = [ GetPlayerX(), GetPlayerY()-32 ];
				let text = [ "×", "2" ];
				let scale = 0.8;
				distance = 16*scale;
				rgb_array = [ 255, 128, 255 ];
				
				pos[0] = pos[0] - ( truncate( length(text)/2 ) * distance );
				
				ascent( i in 0..( length(text) ) ){
					CreateText_Ascii( pos, 31, scale, text[i], rgb_array, i*4, 120 - i*4 );
					pos[0] = pos[0] + distance;
				}
				
				AddFragment( "Life", 2 );
			}
			
			loop( 16 ){
				ItemGetEffect( rand(0,360), rand(32,64), 0, 0.2, 10, [255,32,255], rand(128,255) );
			}
			
			//　得点加算
			AddScoreDelay( 100, point / 100 );
		}
		case( EV_USER + 37 ){
			//　Extend
			let data = GetEventArgument(0);
			let pos1 = [ 492, 112 ];
			let pos2 = [ 492, 132 ];
			
			let i = 0;
			let scale = 0.6;
			let distance = 16*scale;
			let rgb_array = [
				[ 255, 128, 255 ],
				[ 128, 255, 128 ],
			];
			
			pos1[0] = pos1[0] - ( truncate( length(data[0])/2 ) * distance );
			pos1[1] = pos1[1] - distance;
			
			pos2[0] = pos2[0] - ( truncate( length(data[1])/2 ) * distance );
			pos2[1] = pos2[1] + distance;
			
			ascent( i in 0..( length(data[0]) ) ){
				CreateText_Ascii( pos1, 85, scale, data[0][i], rgb_array[0], i*2, 120 - i*2 );
				pos1[0] = pos1[0] + distance;
			}
			ascent( i in 0..( length(data[1]) ) ){
				CreateText_Ascii( pos2, 85, scale, data[1][i], rgb_array[1], i*2, 120 - i*2 );
				pos2[0] = pos2[0] + distance;
			}
		}
		case( EV_USER + 38 ){
			//　1面道中チルノ用
			//　ユーザ定義イベント　かけら放出
			let data = GetEventArgument(0);
			
			CreateItemEXTRA( data[0], data[1], 3, 90+45, -0.05, 0, 120, 11, 1.4 );
			CreateItemEXTRA( data[0], data[1], 3, 90-45, -0.05, 0, 120, 12, 1.4 );
		}
		case( EV_USER + 39 ){
			//　中ボス　ボムエクステンド放出用
			//　ユーザ定義イベント　かけら放出
			let data = GetEventArgument(0);
			
			CreateItem( 5, data, 1.6 );
		}
		case( EV_USER + 40 ){
			//　弾出現時のエフェクト
			let argument = GetEventArgument(0);
			//　argument[0] 弾のID
			//　argument[1] 弾のﾃﾞｨﾚｲ
			CreateEffect_ShotDelay( argument[0], ObjShot_GetImageID(argument[0]), argument[1] );
		}
		case( EV_USER + 41 ){
			//　Fragment UP  BombExtend
			//　Bonus + 1000000
			let data = GetEventArgument(0);
			let pos1 = [ GetPlayerX(), GetPlayerY() ];
			let pos2 = [ GetPlayerX(), GetPlayerY() ];
			
			let i = 0;
			let distance = 8;
			let rgb_array = [
				[ 128, 255, 128 ],
				[ 255, 255, 255 ],
			];
			let point = GetAreaCommonData("Trance", "max_score", 0 );
			let msg = "";
			let mlt = 1;
			alternative( GetAreaCommonData("System", "Difficulty", "Normal" ) )
			case( "Normal" ){ mlt = 1.5; }
			case( "Hard" ){ mlt = 2; }
			case( "Lunatic" ){ mlt = 3; }
			if( GetAreaCommonData("MegaEvolution", "Frag", false ) ){ mlt *= 5; }
			point = round( point / 500 ) * 500;
			point = point * 80 * mlt;
			msg = "BONUS  +"~IntToString( point );
			
			pos1[0] = pos1[0] - ( truncate( length(data[0])/2 ) * distance );
			pos1[1] = pos1[1] - distance;
			
			pos2[0] = pos2[0] - ( truncate( length(data[1])/2 ) * distance );
			pos2[1] = pos2[1] + distance;
			
			ObjSound_Play( GetItem[1] );
			
			ascent( i in 0..( length(data[0]) ) ){
				CreateText_Ascii( pos1, 31, 0.6, data[0][i], rgb_array[0], i*2, 120 - i*2 );
				pos1[0] = pos1[0] + distance;
			}
			ascent( i in 0..( length(msg) ) ){
				CreateText_Ascii( pos2, 31, 0.6, [msg[i]], rgb_array[1], 60, 60 );
				pos2[0] = pos2[0] + distance;
			}
			
			//　ボム欠片入手
			if( !GetAreaCommonData("MegaEvolution", "Frag", false ) || GetAreaCommonData("System", "Difficulty", "NULL" ) == "OverDrive" ){
				AddFragment( "Spell", 1 );
			}
			else{
				//　2倍
				let pos = [ GetPlayerX(), GetPlayerY()-32 ];
				let data = [ "×", "2" ];
				let scale = 0.8;
				let distance = 16*scale;
				let rgb_array = [ 128, 255, 128 ];
				
				pos[0] = pos[0] - ( truncate( length(data)/2 ) * distance );
				
				ascent( let i in 0..( length(data) ) ){
					CreateText_Ascii( pos, 31, scale, data[i], rgb_array, i*4, 120 - i*4 );
					pos[0] = pos[0] + distance;
				}
				
				AddFragment( "Spell", 2 );
			}
			
			loop( 8 ){
				ItemGetEffect( rand(0,360), rand(32,64), 0, 0.2, 10, [32,255,32], rand(128,255) );
			}
			
			//　得点加算
			AddScoreDelay( 100, point / 100 );
		}
		case( EV_USER + 42 ){
			//　完全勝利時の青結晶ボーナス
			let gpos = GetEventArgument( 0 );
			
			Bonus;
			task Bonus{
				//　プレー中のスペル取得数に応じてボーナス量増大
				let gc = GetCommonData( "GainSpellCount", 0 );
				gc = round( gc * 2.5 );
				loop( 20 + gc ){
					let dis = rand(0,16);
					let ang = rand(0,360);
					let pos = [
						gpos[ 0 ] + dis * cos( ang ),
						gpos[ 1 ] + dis * sin( ang ),
					];
					CreateItemEXTRA( pos[0], pos[1], rand(2,4), ang, -0.05, 0, 120, 10, 1 );
					CreateWaveEffect( pos, 1.6, [32,255,128], 255 );
					loop( 1 ){ yield; }
				}
			}
		}
	}
	
	
	//------------------------------------------------------------------------------------------------------------
	//------------------------------------------------------------------------------------------------------------
	//------------------------------------------------------------------------------------------------------------
	//------------------------------------------------------------------------------------------------------------
	//　ユーティリティ
	
	//　スコアをﾃﾞｨﾚｲ加算
	task AddScoreDelay(num_loop,plus_score){
		loop(num_loop){
			AddScore(plus_score);
			yield;
		}
	}
	
	//　かけらを加算
	task AddFragment( type, num ){
		loop( num ){
			let frgmt = [
				GetAreaCommonData("Trance", "player_fragment", 0 ),
				GetAreaCommonData("Trance", "bomb_fragment", 0 ),
			];
			alternative( type )
			case( "Life" ){
				SetAreaCommonData("Trance", "player_fragment", frgmt[0] + 1 );
			}
			case( "Spell" ){
				SetAreaCommonData("Trance", "bomb_fragment", frgmt[1] + 1 );
			}
			yield;
		}
	}
	
	//　弾 → アイテム変化
	task BulletItem(pos){
		let obj		= CreateItemU2( 1, pos[0], pos[1], pos[0], pos[1]-32, 10000 );
		
		//　得点表記非表示
		ObjItem_SetRenderScoreEnable(obj, false );
		
		//　1秒待機
		loop( 60 ){ yield; }
		
		//　自機に向かって移動
		ObjItem_SetDefinedMovePatternA1(obj, ITEM_MOVE_TOPLAYER );
		
		while( !Obj_IsDeleted(obj) ){
			yield;
		}
	}
	
	//　このスクリプトでアクティブな効果音
	function PlaySEs(se_path){
		let se		= ObjSound_Create;
		let se_vol	= GetAreaCommonData("Option","SE_Volume",100);
		let frag	= true;
		let wait	= 0;

		se_vol = 100 - 100 * ( ( 100 - se_vol ) / 100 )^2;
		
		ObjSound_Load(se, se_path );
		ObjSound_SetVolumeRate(se, se_vol );
		ObjSound_SetLoopEnable(se, false );
		ObjSound_SetSoundDivision(se, SOUND_SE );
		
		return se;
	}