



//　アイテム用のエフェクト等
//------------------------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------------------------


//　弾消しエフェクト
task BulletBreak( pos, angle, ImgID, Blend ){
	//　エフェクトカット設定
	if( GetAreaCommonData("Option", "Effect_Cut", 0 ) > 1 ){ return; }
	
	let ID		= ObjPrim_Create(OBJ_SPRITE_2D);
	let animC	= 0;
	let anim1	= 0;
	let anim2	= 0;
	let rectX	= 128;
	let rectY	= 128;
	
	ObjRender_SetPosition(ID, pos[0], pos[1], 0 );
	ObjPrim_SetTexture(ID, effect_tex[1] );
	Obj_SetRenderPriorityI(ID, 32 );
	ObjRender_SetBlendType(ID, Blend );
	ObjRender_SetAngleXYZ(ID, 0, 0, rand(0,360) );
	ObjRender_SetAlpha(ID, 192 );
	ObjSprite2D_SetSourceRect(ID, 0 + rectX*anim1, 0 + rectY*anim2, rectX + rectX*anim1, rectY + rectY*anim2 );
	ObjSprite2D_SetDestCenter(ID);
	
	ShotColor( ID, ImgID, Blend );
	ShotScale( ID, ImgID, Blend );
	
	while( anim2 < 2 ){
		ObjSprite2D_SetSourceRect(ID, 0 + rectX*anim1, 0 + rectY*anim2, rectX + rectX*anim1, rectY + rectY*anim2 );
		ObjRender_SetPosition(ID, pos[0] + animC/2 * cos(angle), pos[1] + animC/2 * sin(angle), 0 );
		
		animC++;
		if( animC > 0 && animC%3 == 0 ){
			if( anim1 >= 3 ){
				anim1 = 0;
				anim2++;
			}
			anim1++;
		}
		
		yield;
	}
	Obj_Delete(ID);
}


//　弾の削除エフェクト　色決め
task ShotColor( ID, ImgID, Blend ){
	let rgb = [255,255,255];
	
	//　いい感じに並んでいるので、弾幕の色を剰余で求める
	let num = ( ImgID - 1 )%8;
	
	if( Blend == BLEND_ADD_ARGB ){
		alternative( num )
		case( 0 ){ rgb = [255,32,32]; }
		case( 1 ){ rgb = [32,255,32]; }
		case( 2 ){ rgb = [32,32,255]; }
		case( 3 ){ rgb = [255,255,32]; }
		case( 4 ){ rgb = [255,32,255]; }
		case( 5 ){ rgb = [32,255,255]; }
		case( 6 ){ rgb = [255,128,32]; }
		case( 7 ){ rgb = [255,255,255]; }
	}
	else{
		alternative( num )
		case( 0 ){ rgb = [255,128,128]; }
		case( 1 ){ rgb = [128,255,128]; }
		case( 2 ){ rgb = [128,128,255]; }
		case( 3 ){ rgb = [255,255,128]; }
		case( 4 ){ rgb = [255,128,255]; }
		case( 5 ){ rgb = [128,255,255]; }
		case( 6 ){ rgb = [255,192,128]; }
		case( 7 ){ rgb = [255,255,255]; }
	}
	
	ObjRender_SetColor(ID, rgb[0], rgb[1], rgb[2] );
}


//　弾の削除エフェクトとか用　弾別エフェクトサイズ決め
task ShotScale( ID, ImgID, Blend ){
	let sca	= 0;
	let pn	= 0;
	
	if( ImgID <= 352 ){
		pn = 0;
	}
	else{
		pn = 352;
	}
	
	//　種類で弾消しエフェクトの大きさ変更
	if( ImgID >= 1+pn && ImgID <= 16+pn ){ sca = 0.4; }			//　丸弾
	else if( ImgID >= 17+pn && ImgID <= 24+pn ){ sca = 0.5; }	//　中丸弾
	else if( ImgID >= 25+pn && ImgID <= 32+pn ){ sca = 0.6; }	//　大弾
	else if( ImgID >= 33+pn && ImgID <= 48+pn ){ sca = 0.4; }	//　二重丸弾
	else if( ImgID >= 49+pn && ImgID <= 64+pn ){ sca = 0.3; }	//　小弾
	else if( ImgID >= 65+pn && ImgID <= 80+pn ){ sca = 0.3; }	//　菌弾
	else if( ImgID >= 81+pn && ImgID <= 96+pn ){ sca = 0.4; }	//　銃弾
	else if( ImgID >= 97+pn && ImgID <= 112+pn ){ sca = 0.4; }	//　米弾
	else if( ImgID >= 113+pn && ImgID <= 128+pn ){ sca = 0.4; }	//　星弾
	else if( ImgID >= 129+pn && ImgID <= 144+pn ){ sca = 0.4; }	//　クナイ弾
	else if( ImgID >= 145+pn && ImgID <= 160+pn ){ sca = 0.4; }	//　細弾
	else if( ImgID >= 161+pn && ImgID <= 176+pn ){ sca = 0.4; }	//　札弾
	else if( ImgID >= 177+pn && ImgID <= 192+pn ){ sca = 0.4; }	//　ゾウリムシ弾
	else if( ImgID >= 193+pn && ImgID <= 208+pn ){ sca = 0.4; }	//　鱗弾
	else if( ImgID >= 209+pn && ImgID <= 216+pn ){ sca = 0.5; }	//　大星弾
	else if( ImgID >= 217+pn && ImgID <= 224+pn ){ sca = 0.5; }	//　蝶弾
	else if( ImgID >= 225+pn && ImgID <= 232+pn ){ sca = 0.5; }	//　ナイフ弾
	else if( ImgID >= 233+pn && ImgID <= 240+pn ){ sca = 0.4; }	//　グミ弾
	else if( ImgID >= 241+pn && ImgID <= 248+pn ){ sca = 0.5; }	//　ハート弾
	else if( ImgID >= 249+pn && ImgID <= 256+pn ){ sca = 0.5; }	//　矢弾
	else if( ImgID >= 257+pn && ImgID <= 264+pn ){ sca = 0.5; }	//　神霊弾の元
	else if( ImgID >= 265+pn && ImgID <= 272+pn ){ sca = 0.6; }	//　神霊弾
	else if( ImgID >= 273+pn && ImgID <= 288+pn ){ sca = 0.5; }	//　サニーレーザーの先っちょ
	else if( ImgID >= 289+pn && ImgID <= 296+pn ){ sca = 0.4; }	//　ふぐ刺し
	else if( ImgID >= 297+pn && ImgID <= 304+pn ){ sca = 0.4; }	//　縦長弾
	else if( ImgID >= 305+pn && ImgID <= 312+pn ){ sca = 0.4; }	//　デススマのやつ
	else if( ImgID >= 313+pn && ImgID <= 320+pn ){ sca = 0.5; }	//　炎弾
	else if( ImgID >= 321+pn && ImgID <= 336+pn ){ sca = 0.4; }	//　水滴弾
	else if( ImgID >= 337+pn && ImgID <= 344+pn ){ sca = 0.4; }	//　金弾
	else if( ImgID >= 345+pn && ImgID <= 352+pn ){ sca = 0.5; }	//　へにょりの元
	else if( ImgID >= 704 && ImgID <= 720 ){ sca = 0.5; }	//　音符
	else{ sca = 0; }
	
	if( Blend == BLEND_ADD_ARGB ){
		sca += 0.1;
		ObjRender_SetScaleXYZ(ID, sca, sca, 0 );
	}
	else{
		ObjRender_SetScaleXYZ(ID, sca/1.2, sca/1.2, 0 );
	}
}


//　弾出現時ディレイエフェクト
task CreateEffect_ShotDelay( CallID, shot_type, delay ){
	//　オブジェクトが削除済みであれば実行しない
	if( Obj_IsDeleted(CallID) ){ return; }
	
	let obj		= ObjPrim_Create(OBJ_SPRITE_2D);
	let pos		= [ ObjMove_GetX(CallID), ObjMove_GetY(CallID) ];
	let _rect	= [ 0, 1 ];
	let alpha	= 128;
	let count	= 0;
	
	ObjRender_SetPosition(obj, pos[0], pos[1], 0 );
	ObjPrim_SetTexture(obj, GetCurrentScriptDirectory() ~ "./../img/bullet00_delay.png" );
	ObjRender_SetBlendType(obj, BLEND_ALPHA );
	Obj_SetRenderPriorityI(obj, 59 );
	ObjRender_SetAngleXYZ(obj, 0, 0, ObjMove_GetAngle(CallID) + 90 );
	
	if( shot_type >= 353 ){
		ObjRender_SetBlendType(obj, BLEND_ADD_ARGB );
	}
	
	//　スケール決定
	ShotScale( obj, shot_type, BLEND_ALPHA );
	let scale = [ ObjRender_GetScaleX(obj)*2, ObjRender_GetScaleY(obj)*2 ];
	
	//　弾幕の色を剰余で求める
	let num = ( shot_type - 1 )%8;
	alternative( num )
	case( 0 ){ _rect[0] = 0; }
	case( 1 ){ _rect[0] = 3; }
	case( 2 ){ _rect[0] = 5; }
	case( 3 ){ _rect[0] = 2; }
	case( 4 ){ _rect[0] = 6; }
	case( 5 ){ _rect[0] = 4; }
	case( 6 ){ _rect[0] = 1; }
	case( 7 ){ _rect[0] = 7; }
	
	ObjSprite2D_SetSourceRect(obj, 0 + _rect[0]*32, 0 + _rect[1]*32, 32 + _rect[0]*32, 32 + _rect[1]*32 );
	ObjSprite2D_SetDestCenter(obj);
	
	loop( delay ){
		//　オブジェクトが削除済みであれば抜ける
		if( Obj_IsDeleted(CallID) ){ break; }
		
		ObjRender_SetScaleXYZ(obj, scale[0]*5 - count*(scale[0]/delay)*4, scale[1]*5 - count*(scale[1]/delay)*4, 0 );
		ObjRender_SetAlpha(obj, alpha/2 + count*(alpha/2/delay) );
		
		count++;
		
		yield;
	}
	Obj_Delete( obj );
}


//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------


//　特殊アイテムドロップ
task ItemDropDistance(ID){
	let enm_dis	= GetObjectDistance( GetPlayerObjectID(), ID );
	let enm_life = ObjEnemy_GetInfo( ID, INFO_LIFE );
	let enm_rate = ObjEnemy_GetInfo( ID, INFO_DAMAGE_RATE_SHOT );
	let damage = 0;
	let count	= 0;
	
	while( !Obj_IsDeleted(ID) ){
		enm_dis = GetObjectDistance( GetPlayerObjectID(), ID ) / 3;
		damage += enm_life - ObjEnemy_GetInfo( ID, INFO_LIFE );
		enm_life = ObjEnemy_GetInfo( ID, INFO_LIFE );
		enm_rate = ObjEnemy_GetInfo( ID, INFO_DAMAGE_RATE_SHOT );
		let dc = 150;
		if( enm_dis < 64 ){ dc = 60; }
		else if( enm_dis < 88 ){ dc = 80; }
		else if( enm_dis < 112 ){ dc = 110; }

		if( enm_rate >= 5 ){
			dc *= enm_rate / 100;
		}

		/*
		if( GetAreaCommonData("MegaEvolution", "Frag", false ) ){
			wt /= 2;
		}
		*/
		
		if( damage >= dc && GetPlayerState() == STATE_NORMAL && IsPermitPlayerShot() ){
			let dis = rand(0,16);
			let ang = rand(0,360);
			let pos = [
				ObjMove_GetX(ID) + dis * cos( ang ),
				ObjMove_GetY(ID) + dis * sin( ang ),
			];
			CreateItemEXTRA( pos[0], pos[1], rand(2,4), ang, -0.05, 0, 120, 10, 1 );
			CreateWaveEffect( pos, 1.6, [32,255,128], 255 );
			ObjSound_Play( GetItem[2] );
			count = 0;
			damage = 0;
		}
		count++;
		
		yield;
	}
}


//　特殊アイテム作成
task CreateItemEXTRA( x, y, speed, angle, acc, mx, delay, type, sca ){
	let obj		= CreateItemU1( type, x, y, 0 );
	let count	= 0;
	let spin	= rand(0,360);
	let spinp	= rand(-2,2);
	let move1	= 0;
	let moveA	= 0;
	let frag	= false;
	
	while( spin == 0 ){
		spinp = rand(-2,2);
	}
	
	ObjItem_SetRenderScoreEnable(obj, false );
	ObjItem_SetAutoCollectEnable( obj, false );
	ObjMove_SetSpeed( obj, speed );
	ObjMove_SetAngle( obj, angle );
	ObjMove_SetAcceleration( obj, acc );
	ObjMove_SetMaxSpeed( obj, mx );
	
	while( !Obj_IsDeleted(obj) ){
		let AngleToPlayer = atan2( GetPlayerY() - ObjMove_GetY(obj), GetPlayerX() - ObjMove_GetX(obj) );
		
		move1 = 1 * sin( moveA );
		
		ObjRender_SetScaleXYZ( obj, move1*sca, move1*sca, 0 );
		ObjRender_SetPosition( obj, ObjMove_GetX(obj), ObjMove_GetY(obj) + 0.4 * sin( count*spinp ), 0 );
		ObjRender_SetAngleZ( obj, 180 + move1*180 + spin );
		
		//　自機が通常状態で無ければ、アイテム吸い寄せ解除
		if( GetPlayerState != STATE_NORMAL ){
			frag = false;
		}
		
		//　停滞時間超えると下に落下　自機に吸い寄せ済みだと落下しない
		if( count > delay && !frag ){
			ObjMove_SetAngle( obj, 90 );
			ObjMove_SetAcceleration( obj, 0.01 );
			ObjMove_SetMaxSpeed( obj, 1 );
		}
		
		//　自機接近で吸い寄せ
		if( GetObjectDistance( GetPlayerObjectID(), obj ) < 128 && GetPlayerState == STATE_NORMAL && count > 30
			|| frag ){
				ObjMove_SetAngle( obj, GetAngleToPlayer(obj) );
				ObjMove_SetAcceleration( obj, 0.1 );
				ObjMove_SetMaxSpeed( obj, 10 );
				frag = true;
		}
		
		count++;
		spin += spinp;
		if( move1 < 1 ){ moveA += 5; }
		
		yield;
	}
}


//　特殊アイテム入手エフェクト
task ItemGetEffect(angle,disD,speed,acc,mx,rgb_array,alpha){
	//　エフェクトカット設定
	if( GetAreaCommonData("Option", "Effect_Cut", 0 ) > 2 ){ return; }
	
	let ID		= ObjPrim_Create(OBJ_SPRITE_2D);
	let EC		= GetAreaCommonData("Option","Effect_Cut",0);
	let gp		= [GetPlayerX(),GetPlayerY()];
	let dis		= 0;
	let move1	= 0;
	let moveA	= 0;
	let frame	= 0;
	let sca		= 0.4;
	let spin	= rand(0,360);
	let spinp	= rand(-4,4);
	
	while( spinp == 0 ){
		spinp = rand(-4,4);
	}
	
	ObjRender_SetBlendType(ID, BLEND_ADD_ARGB );
	ObjPrim_SetTexture(ID, effect_tex[0] );
	Obj_SetRenderPriorityI(ID, 32 );
	ObjRender_SetColor(ID, rgb_array[0], rgb_array[1], rgb_array[2] );
	ObjSprite2D_SetSourceRect(ID, 128, 288, 160, 320 );
	ObjSprite2D_SetDestCenter(ID);
	
	//　自機からの距離
	let pl_dis	= GetObjectDistance( GetPlayerObjectID(), ID );
	
	while( !Obj_IsDeleted(ID) ){
		move1	= 1 * sin( moveA );
		
		ObjRender_SetPosition(ID, gp[0] + move1*disD * cos(angle), gp[1] + move1*disD * sin(angle), 0 );
		ObjRender_SetAngleXYZ(ID, 0, 0, spin + spinp );
		ObjRender_SetScaleXYZ(ID, sca*2 - move1*sca, sca*2 - move1*sca, 0 );
		ObjRender_SetAlpha(ID, move1*alpha );
		
		spin += spinp;
		if( move1 < 1 ){ moveA += 5; }
		else{ break; }
		
		yield;
	}
	moveA = 0;
	while( !Obj_IsDeleted(ID) && pl_dis > 16 ){
		pl_dis	= GetObjectDistance( GetPlayerObjectID(), ID );
		angle	= atan2( GetPlayerY() - ObjRender_GetY(ID), GetPlayerX() - ObjRender_GetX(ID) );
		move1	= 1 * sin( moveA );
		
		ObjRender_SetPosition(ID, ObjRender_GetX(ID) + dis * cos(angle), ObjRender_GetY(ID) + dis * sin(angle), 0 );
		ObjRender_SetAngleXYZ(ID, 0, 0, spin + spinp );
		
		dis = 0;
		
		spin += spinp;
		dis += speed;
		if( speed < mx ){ speed += acc; }
		if( move1 < 1 ){ moveA += 10; }
		
		yield;
	}
	Obj_Delete(ID);
}


//　波紋が広がるエフェクト
task CreateWaveEffect(pos,scale,rgb_array,alpha){
	let ID		= ObjPrim_Create(OBJ_SPRITE_2D);
	let EC		= GetAreaCommonData("Option","Effect_Cut",0);
	let move1	= 0;
	let moveA	= 0;
	let move2	= 0;
	let moveB	= 0;
	
	ObjRender_SetPosition(ID, pos[0], pos[1], 0 );
	ObjRender_SetBlendType(ID, BLEND_ADD_ARGB );
	ObjPrim_SetTexture(ID, effect_tex[0] );
	Obj_SetRenderPriorityI(ID, 71 );
	ObjRender_SetColor(ID, rgb_array[0], rgb_array[1], rgb_array[2] );
	ObjRender_SetAlpha(ID, alpha );
	ObjSprite2D_SetSourceRect(ID, 128, 256, 160, 288 );
	ObjSprite2D_SetDestCenter(ID);
	
	while( move2 < 1 ){
		move1 = 1 * sin( moveA );
		move2 = 1 * sin( moveB );
		
		ObjRender_SetScaleXYZ(ID, move1*scale, move1*scale, 0 );
		ObjRender_SetAlpha(ID, alpha - move2*alpha );
		
		if( move1 < 1 ){ moveA += 10; }
		if( move1 > 0.8 ){ moveB += 10; }
		
		yield;
	}
	Obj_Delete( ID );
}


//　汎用的アイテム出現関数
task CreateItem( type, pos, scale ){
	let obj		= CreateItemU2( type, pos[0], pos[1], pos[0], pos[1]-32, 0 );
	let frag	= false;
	let frame	= 0;
	let move1	= 0;
	let moveA	= 0;
	
	ObjItem_SetRenderScoreEnable (obj, false );
	ObjItem_SetAutoCollectEnable( obj, true );
	
	while( !Obj_IsDeleted(obj) ){
		//　自機からの距離
		let pl_dis	= GetObjectDistance( GetPlayerObjectID(), obj );
		
		move1 = 1 * sin( moveA );
		
		ObjRender_SetScaleXYZ(obj, move1*scale, move1*scale, 0 );
		ObjRender_SetAngleZ(obj, 180 - move1*180 );
		ObjRender_SetAlpha( obj, 192 + 32 * sin( frame*8 ) );
		
		//　自機が通常状態で無ければ、アイテム吸い寄せ解除
		if( GetPlayerState != STATE_NORMAL && frag ){
			frag = false;
			ObjItem_SetDefinedMovePatternA1( obj, ITEM_MOVE_DOWN );
		}
		
		if( pl_dis < 96 && GetPlayerState == STATE_NORMAL ){
			frag = true;
			ObjItem_SetDefinedMovePatternA1( obj, ITEM_MOVE_TOPLAYER );
		}
		
		if( move1 < 1 ){ moveA += 5; }
		frame++;
		
		yield;
	}
}


//　スコア増えた時の表示管理
task ScorePointDisplay(pos,score,value){
	//　得点 * 素点100
	let setscore	= score * value;
	
	//　数値の桁数を調べる
	let data		= truncate( log10(setscore) ) + 1;
	
	let num		= [
		truncate(setscore%10),
		truncate((setscore%100)/10),
		truncate((setscore%1000)/100),
		truncate((setscore%10000)/1000),
		truncate((setscore%100000)/10000),
		truncate((setscore%1000000)/100000),
		truncate((setscore%10000000)/1000000),
		truncate((setscore%100000000)/10000000),
		truncate((setscore%1000000000)/100000000),
		truncate((setscore%10000000000)/1000000000)
	];
	
	ascent( let i in 0..( data ) ){
		ScorePointDisplay_Sprite( [ pos[0]-i*8, pos[1] ], num[i] );
	}
}


//　スコア増えた時の得点表示
task ScorePointDisplay_Sprite(pos,num){
	//　エフェクトカット設定
	if( GetAreaCommonData("Option", "Effect_Cut", 0 ) > 0 ){ return; }
	
	let ID		= ObjPrim_Create(OBJ_SPRITE_2D);
	let move1	= 0;
	let moveA	= 0;
	let count	= 0;
	let alpha	= 128;
	
	ObjRender_SetPosition(ID, pos[0], pos[1], 0 );
	ObjRender_SetBlendType(ID, BLEND_ALPHA );
	ObjPrim_SetTexture(ID, front_tex[1] );
	Obj_SetRenderPriorityI(ID, 31 );
	ObjRender_SetAlpha(ID, alpha );
	ObjSprite2D_SetSourceRect(ID, 0 + num*8, 128, 8 + num*8, 136 );
	ObjSprite2D_SetDestCenter(ID);
	
	if( GetAreaCommonData("MegaEvolution", "Frag", false ) ){
		ObjRender_SetColor(ID, 255, 255, 64 );
	}
	
	while( move1 < 1 ){
		move1 = 1 * sin( moveA );
		
		ObjRender_SetPosition(ID, pos[0], pos[1] - count, 0 );
		ObjRender_SetScaleY(ID, 1 - move1 );
		
		count++;
		if( count > 60 ){ moveA += 5; }
		
		yield;
	}
	Obj_Delete( ID );
}

//　最大得点 + 1
task PointDisplay_Sprite(pos){
	let ID		= ObjPrim_Create(OBJ_SPRITE_2D);
	let move1	= 0;
	let moveA	= 0;
	let count	= 0;
	let alpha	= 128;
	
	ObjRender_SetPosition(ID, pos[0], pos[1], 0 );
	ObjRender_SetBlendType(ID, BLEND_ALPHA );
	ObjPrim_SetTexture(ID, front_tex[1] );
	Obj_SetRenderPriorityI(ID, 39 );
	ObjRender_SetAlpha(ID, alpha );
	ObjSprite2D_SetSourceRect(ID, 0, 144, 24, 152 );
	ObjSprite2D_SetDestCenter(ID);
	
	while( move1 < 1 ){
		move1 = 1 * sin( moveA );
		
		ObjRender_SetPosition(ID, pos[0], pos[1] - count, 0 );
		ObjRender_SetScaleY(ID, 1 - move1 );
		
		count++;
		if( count > 60 ){ moveA += 5; }
		
		yield;
	}
	Obj_Delete( ID );
}


//　雑魚敵撃破時の花散
task CreateLiberationEffect01(pos,speed,acc,mx,rgb_array){
	//　エフェクトカット設定
	if( GetAreaCommonData("Option", "Effect_Cut", 0 ) > 1 ){ return; }
	
	let ID		= ObjPrim_Create(OBJ_SPRITE_2D);
	let sca		= rand(0.2,1);
	let angleX	= rand(0,180);
	let angleY	= rand(0,180);
	let angle	= rand(0,360);
	let move1	= 0;
	let moveA	= 0;
	
	let angleXp	= rand(-5,5);
	let angleYp	= rand(-5,5);
	
	ObjRender_SetPosition(ID, pos[0], pos[1], 0 );
	ObjPrim_SetTexture(ID, effect_tex[3] );
	ObjRender_SetBlendType(ID, BLEND_ADD_ARGB );
	Obj_SetRenderPriorityI(ID, 32 );
	ObjRender_SetScaleXYZ(ID, sca, sca, 0 );
	ObjRender_SetColor(ID, rgb_array[0], rgb_array[1], rgb_array[2] );
	ObjSprite2D_SetSourceRect(ID, 64, 0, 128, 64 ) ;
	ObjSprite2D_SetDestCenter(ID);
	
	while( move1 < 1 ){
		move1 = 1 * sin( moveA );
		
		let spos = [
			ObjRender_GetX(ID) + speed * cos( angle ),
			ObjRender_GetY(ID) + speed * sin( angle ),
		];
		
		ObjRender_SetPosition(ID, spos[0], spos[1], 0 );
		ObjRender_SetAngleXYZ(ID, angleX, angleY, angle );
		ObjRender_SetAlpha(ID, move1*128 );
		
		angleX += angleXp;
		angleY += angleYp;
		angle -= 5;
		moveA += 2;
		if( acc > 0 ){
			if( speed < mx ){
				speed += acc;
			}
		}
		else{
			if( speed > mx ){
				speed += acc;
			}
		}
		
		yield;
	}
	move1 = 0;
	moveA = 0;
	while( move1 < 1 ){
		move1 = 1 * sin( moveA );
		
		let spos = [
			ObjRender_GetX(ID) + speed * cos( angle ),
			ObjRender_GetY(ID) + speed * sin( angle ),
		];
		
		ObjRender_SetPosition(ID, spos[0], spos[1], 0 );
		ObjRender_SetAngleXYZ(ID, angleX, angleY, angle );
		ObjRender_SetScaleXYZ(ID, sca - move1*sca, sca - move1*sca, 0 );
		ObjRender_SetAlpha(ID, 128 - move1*128 );
		
		angleX += angleXp;
		angleY += angleYp;
		angle -= 5;
		moveA += 1;
		if( acc > 0 ){
			if( speed < mx ){
				speed += acc;
			}
		}
		else{
			if( speed > mx ){
				speed += acc;
			}
		}
		
		yield;
	}
	Obj_Delete(ID);
}

//　雑魚敵撃破時のアニメーション
task CreateLiberationEffect02(pos,speed,acc,mx,rgb_array){
	//　エフェクトカット設定
	if( GetAreaCommonData("Option", "Effect_Cut", 0 ) > 3 ){ return; }
	
	let ID		= ObjPrim_Create(OBJ_SPRITE_2D);
	let sca		= rand(0.2,0.8);
	let angle	= rand(0,360);
	let animc	= 0;
	let anim1	= 0;
	let anim2	= 0;
	
	ObjRender_SetPosition(ID, pos[0], pos[1], 0 );
	ObjPrim_SetTexture(ID, GetCurrentScriptDirectory() ~ "./../img/effect/bulletbreak02.png" );
	ObjRender_SetBlendType(ID, BLEND_SUBTRACT );
	Obj_SetRenderPriorityI(ID, 31 );
	ObjRender_SetAngleXYZ(ID, 0, 0, angle );
	ObjRender_SetScaleXYZ(ID, sca, sca, 0 );
	ObjRender_SetColor(ID, rgb_array[0], rgb_array[1], rgb_array[2] );
	ObjSprite2D_SetSourceRect(ID, 0 + 128*anim1, 0 + 128*anim2, 128 + 128*anim1, 128 + 128*anim2 ) ;
	ObjSprite2D_SetDestCenter(ID);
	
	while( anim2 < 4 ){
		let spos = [
			ObjRender_GetX(ID) + speed * cos( angle ),
			ObjRender_GetY(ID) + speed * sin( angle ),
		];
		
		ObjRender_SetPosition(ID, spos[0], spos[1], 0 );
		ObjSprite2D_SetSourceRect(ID, 0 + 128*anim1, 0 + 128*anim2, 128 + 128*anim1, 128 + 128*anim2 ) ;
		
		if( acc > 0 ){
			if( speed < mx ){
				speed += acc;
			}
		}
		else{
			if( speed > mx ){
				speed += acc;
			}
		}
		animc++;
		if( animc > 0 && animc%2 == 0 ){
			anim1++;
			if( anim1 >= 4 ){
				anim1 = 0;
				anim2++;
			}
		}
		
		yield;
	}
	Obj_Delete(ID);
}

//　雑魚敵撃破時の波紋
task CreateLiberationEffect03(pos,angleZ,rgb_array){
	let ID		= ObjPrim_Create(OBJ_SPRITE_2D);
	let sca		= rand(0.6,1.2);
	let angle	= rand(0,360);
	let move1	= 0;
	let moveA	= 0;
	
	ObjRender_SetPosition(ID, pos[0], pos[1], 0 );
	ObjPrim_SetTexture(ID, effect_tex[0] );
	ObjRender_SetBlendType(ID, BLEND_ADD_ARGB );
	Obj_SetRenderPriorityI(ID, 33 );
	ObjRender_SetScaleXYZ(ID, move1*sca, move1*sca, 0 );
	ObjRender_SetColor(ID, rgb_array[0], rgb_array[1], rgb_array[2] );
	ObjSprite2D_SetSourceRect(ID, 0, 384, 128, 512 );
	ObjSprite2D_SetDestCenter(ID);
	
	while( move1 < 1 ){
		move1 = 1 * sin( moveA );
		
		ObjRender_SetScaleXYZ(ID, move1*sca, move1*sca, 0 );
		ObjRender_SetAlpha(ID, move1*64 );
		
		moveA += 10;
		
		yield;
	}
	move1 = 0;
	moveA = 0;
	while( move1 < 1 ){
		move1 = 1 * sin( moveA );
		
		ObjRender_SetScaleXYZ(ID, sca - move1*sca, sca + moveA/500, 0 );
		ObjRender_SetAngleXYZ(ID, 0, 0, angle );
		
		angle += angleZ;
		moveA += 2;
		
		yield;
	}
	Obj_Delete(ID);
}

//　ascii.pngの画像で文字作成
task CreateText_Ascii( pos, lay, scale, char_text, rgb_array, delay, long ){
	let ID		= ObjPrim_Create(OBJ_SPRITE_2D);
	let move1	= 0;
	let moveA	= 0;
	let _rect	= [ 0, 0 ];
	
	loop( delay ){ yield; }
	
	ObjRender_SetPosition(ID, pos[0], pos[1], 0 );
	ObjPrim_SetTexture(ID, front_tex[12] );
	ObjRender_SetBlendType(ID, BLEND_ALPHA );
	Obj_SetRenderPriorityI(ID, lay );
	ObjRender_SetColor(ID, rgb_array[0], rgb_array[1], rgb_array[2] );
	
	alternative( char_text )
	case( "0" ){ _rect = [ 0, 0 ]; }
	case( "1" ){ _rect = [ 1, 0 ]; }
	case( "2" ){ _rect = [ 2, 0 ]; }
	case( "3" ){ _rect = [ 3, 0 ]; }
	case( "4" ){ _rect = [ 4, 0 ]; }
	case( "5" ){ _rect = [ 5, 0 ]; }
	case( "6" ){ _rect = [ 6, 0 ]; }
	case( "7" ){ _rect = [ 7, 0 ]; }
	case( "8" ){ _rect = [ 8, 0 ]; }
	case( "9" ){ _rect = [ 9, 0 ]; }
	case( "/" ){ _rect = [ 10, 0 ]; }
	case( ":" ){ _rect = [ 11, 0 ]; }
	case( "-" ){ _rect = [ 12, 0 ]; }
	case( "×" ){ _rect = [ 13, 0 ]; }
	case( "%" ){ _rect = [ 14, 0 ]; }
	case( "." ){ _rect = [ 15, 0 ]; }
	case( "+" ){ _rect = [ 16, 0 ]; }
	case( "A" ){ _rect = [ 0, 1 ]; }
	case( "B" ){ _rect = [ 1, 1 ]; }
	case( "C" ){ _rect = [ 2, 1 ]; }
	case( "D" ){ _rect = [ 3, 1 ]; }
	case( "E" ){ _rect = [ 4, 1 ]; }
	case( "F" ){ _rect = [ 5, 1 ]; }
	case( "G" ){ _rect = [ 6, 1 ]; }
	case( "H" ){ _rect = [ 7, 1 ]; }
	case( "I" ){ _rect = [ 8, 1 ]; }
	case( "J" ){ _rect = [ 9, 1 ]; }
	case( "K" ){ _rect = [ 10, 1 ]; }
	case( "L" ){ _rect = [ 11, 1 ]; }
	case( "M" ){ _rect = [ 12, 1 ]; }
	case( "N" ){ _rect = [ 13, 1 ]; }
	case( "O" ){ _rect = [ 14, 1 ]; }
	case( "P" ){ _rect = [ 15, 1 ]; }
	case( "Q" ){ _rect = [ 16, 1 ]; }
	case( "R" ){ _rect = [ 17, 1 ]; }
	case( "S" ){ _rect = [ 18, 1 ]; }
	case( "T" ){ _rect = [ 19, 1 ]; }
	case( "U" ){ _rect = [ 20, 1 ]; }
	case( "V" ){ _rect = [ 21, 1 ]; }
	case( "W" ){ _rect = [ 22, 1 ]; }
	case( "X" ){ _rect = [ 23, 1 ]; }
	case( "Y" ){ _rect = [ 24, 1 ]; }
	case( "Z" ){ _rect = [ 25, 1 ]; }
	case( " " ){ _rect = [ 26, 1 ]; }
	
	ObjSprite2D_SetSourceRect(ID, 0 + _rect[0]*16, 0 + _rect[1]*20, 16 + _rect[0]*16, 20 + _rect[1]*20 );
	ObjSprite2D_SetDestCenter(ID);
	
	while( move1 < 1 ){
		move1 = 1 * sin( moveA );
		
		ObjRender_SetScaleXYZ(ID, scale*2 - move1*scale, scale*2 - move1*scale, 0 );
		
		moveA += 5;
		
		yield;
	}
	loop( long ){ yield; }
	Obj_Delete( ID );
}