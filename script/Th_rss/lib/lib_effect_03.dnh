
//　パワー集中エフェクト
//--------------------------------------------------------------------------------------------------------------------------------
//--------------------------------------------------------------------------------------------------------------------------------

task Concentration01_Main(ID,rgb_h,long){
	let se		= ObjSound_Create;
	let se_vol	= GetAreaCommonData("Option", "SE_Volume", 100 );
	let frame	= 0;

	se_vol = 100 - 100 * ( ( 100 - se_vol ) / 100 )^2;
	
	SetAreaCommonData("anime", "loa", true );
	
	ObjSound_Load(se, GetCurrentScriptDirectory ~ "../se/power_logo2.ogg" );
	ObjSound_SetVolumeRate(se, se_vol );
	ObjSound_SetLoopEnable(se, false );
	ObjSound_Play(se);
	
	Concentration01(ID, [192,192], [300-16,300+16], 0.40, rgb_h, long );
	Concentration01(ID, [192,192], [240-16,240+16], -0.40, rgb_h, long );
	
	loop( long ){
		if( Obj_IsDeleted(ID) ){ break; }
		
		if( frame%16 == 0 ){
			CreateVertex(ID, [0,0], 5, 128, 31, [0,-18], [255,32,32], [255,32,32], 4 );
			CreateVertex(ID, [0,0], 5, 128, 31, [180,18], [32,32,255], [32,32,255], 4 );
		}
		frame++;
		
		yield;
	}
	loop( 60 ){
		if( Obj_IsDeleted(ID) ){ break; }
		yield;
	}
	SetAreaCommonData("anime", "loa", false );
	Obj_Delete(se);
}

task Concentration01(ID,dis_rand_h,ang_rand_h,angle_plus,rgb_h,long){
	//　エフェクトカット設定
	if( GetAreaCommonData("Option", "Effect_Cut", 0 ) > 2 ){ return; }
	
	let frame	= 0;
	
	loop( long ){
		let dis		= rand( dis_rand_h[0], dis_rand_h[1] );
		let angle	= rand( ang_rand_h[0], ang_rand_h[1] );
		
		if( Obj_IsDeleted(ID) ){ break; }
		
		if( frame%4 == 0 ){
			Concentration01_Child(ID,dis,angle,angle_plus,rgb_h);
		}
			
		frame++;
		
		yield;
	}
}

task Concentration01_Child(ID,dis,angle,angle_plus,rgb_h){
	let id			= [ObjPrim_Create(OBJ_SPRITE_2D),
						ObjPrim_Create(OBJ_SPRITE_2D)];
	let ang			= 0;
	let sca			= rand(1,2);
	let move1		= 0;
	let moveA		= 0;
	let pos			= [ObjMove_GetX(ID),ObjMove_GetY(ID)];
	let spin		= rand(0,360);
	let angp		= 0;
	let i			= 0;
	
	ang = angle;
	
	loop( length(id) ){
		ObjPrim_SetTexture(id[i], path_effect01 );
		Obj_SetRenderPriorityI(id[i], 39 );
		i++;
	}
	i = 0;
	
	ObjRender_SetBlendType(id[0], BLEND_ADD_ARGB );
	ObjRender_SetColor(id[0], rgb_h[0], rgb_h[1], rgb_h[2] );
	ObjSprite2D_SetSourceRect(id[0], 160-32, 288, 192-32, 320 );
	ObjSprite2D_SetDestCenter(id[0]);
	ObjRender_SetBlendType(id[1], BLEND_ADD_ARGB );
	ObjSprite2D_SetSourceRect(id[1], 160, 288, 192, 320 );
	ObjSprite2D_SetDestCenter(id[1]);
	
	while( !Obj_IsDeleted(ID) && move1 < 1 ){
		pos		= [ObjMove_GetX(ID),ObjMove_GetY(ID)];
		move1	= 1 * sin( moveA );
		
		loop( length(id) ){
			ObjRender_SetPosition(id[i], pos[0] + dis * cos( ang ), pos[1] + dis * sin( ang ), 0 );
			ObjRender_SetScaleXYZ(id[i], move1*(sca+0.1*i), move1*(sca+0.1*i), 0 );
			ObjRender_SetAngleXYZ(id[i], 0, 0, -spin );
			i++;
		}
		i = 0;
		
		angp += angle_plus;
		ang += angp;
		moveA += 10;
		spin += 64;
		
		yield;
	}
	move1 = 0;
	moveA = 0;
	while( !Obj_IsDeleted(ID) && move1 < 1 ){
		pos		= [ObjMove_GetX(ID),ObjMove_GetY(ID)];
		move1	= 1 * sin( moveA );
		
		loop( length(id) ){
			ObjRender_SetPosition(id[i], pos[0] + (dis-move1*dis) * cos( ang ), pos[1] + (dis-move1*dis) * sin( ang ), 0 );
			ObjRender_SetAngleXYZ(id[i], 0, 0, -spin );
			i++;
		}
		i = 0;
		
		angp += angle_plus;
		ang += angp;
		moveA += 2;
		spin += 64;
		
		yield;
	}
	move1 = 0;
	moveA = 0;
	while( !Obj_IsDeleted(ID) && move1 < 1 ){
		pos		= [ObjMove_GetX(ID),ObjMove_GetY(ID)];
		move1	= 1 * sin( moveA );
		
		loop( length(id) ){
			ObjRender_SetPosition(id[i], pos[0], pos[1], 0 );
			ObjRender_SetScaleXYZ(id[i], move1*(sca+0.1*i) - (sca+0.1*i), move1*(sca+0.1*i) - (sca+0.1*i), 0 );
			ObjRender_SetAngleXYZ(id[i], 0, 0, -spin );
			i++;
		}
		i = 0;
		
		moveA += 5;
		spin += 64;
		
		yield;
	}
	loop( length(id) ){
		Obj_Delete(id[i]);
		i++;
	}
}

//　指定した頂点数で多関係を描画
task CreateVertex(SET_ID, SET_POSITION, SET_POLYGON, SET_DISTANCE, SET_PRIORITY, SET_ANGLE_Z, SET_RGB_1, SET_RGB_2, SET_W ){
	let id			= ObjPrim_Create(OBJ_SPRITE_2D);
	let csd			= GetCurrentScriptDirectory;
	let dis1		= 0;//　内円
	let disA		= 0;
	let dis2		= 0;//　外円
	let disB		= 0;
	let ang			= 0;
	let pc			= 0;
	let i			= 0;
	let i2			= 1;
	
	//　Ｎ角形＋１＊２が頂点の数になる
	let ten			= ( SET_POLYGON + 1 ) * 2;
	//　サイズ / 頂点数
	let _rect		= 128/SET_POLYGON;
	//　回転の早さ
	let ang_plus	= SET_ANGLE_Z[1];
	
	ObjRender_SetPosition(id, ObjMove_GetX(SET_ID)+SET_POSITION[0], ObjMove_GetY(SET_ID)+SET_POSITION[1], 0 );
	ObjPrim_SetTexture(id, csd ~ "./../img/front/Effect_White.png" );
	Obj_SetRenderPriorityI(id, SET_PRIORITY );
	ObjRender_SetBlendType(id, BLEND_ADD_ARGB );
	ObjRender_SetScaleXYZ(id, 1, 1, 0 );
	ObjRender_SetAngleXYZ(id, 0, 0, SET_ANGLE_Z[0] );
	ObjPrim_SetPrimitiveType(id, PRIMITIVE_TRIANGLESTRIP );
	ObjPrim_SetVertexCount(id, ten );
	
	while( !Obj_IsDeleted(SET_ID) ){
		ObjRender_SetPosition(id, ObjMove_GetX(SET_ID)+SET_POSITION[0], ObjMove_GetY(SET_ID)+SET_POSITION[1], 0 );
		
		loop( ten ){
			let disX = [( SET_DISTANCE - dis2*SET_DISTANCE ) * cos(pc+ang),
						( (SET_DISTANCE+SET_W) -dis2*(SET_DISTANCE+SET_W) ) * cos(pc+ang)];
			let disY = [( SET_DISTANCE - dis2*SET_DISTANCE ) * sin(pc+ang),
						( (SET_DISTANCE+SET_W) - dis2*(SET_DISTANCE+SET_W) ) * sin(pc+ang)];
			ObjPrim_SetVertexPosition(id, i, disX[0], disY[0], 0 );
			ObjPrim_SetVertexPosition(id, i2, disX[1], disY[1], 0 );
			ObjPrim_SetVertexUVT(id, i, 0 + _rect, 0 );
			ObjPrim_SetVertexUVT(id, i2, 0 + _rect, 128 );
			ObjPrim_SetVertexAlpha(id, i, dis1*255 );
			ObjPrim_SetVertexAlpha(id, i2, dis1*255 );
			ObjPrim_SetVertexColor(id, i, SET_RGB_1[0], SET_RGB_1[1], SET_RGB_1[2] );
			ObjPrim_SetVertexColor(id, i2, SET_RGB_2[0], SET_RGB_2[1], SET_RGB_2[2] );
			
			pc			+= 360/SET_POLYGON;
			i			+= 2;
			i2			+= 2;
			_rect		= _rect + 128;
		}
		pc			= 0;
		i			= 0;
		i2			= 1;
		_rect		= 0;
		
		ang += ang_plus;
		if( dis1 < 1 ){ disA += 5; }
		else if( dis2 < 1 ){ disB += 2; }
		dis1 = 1 * sin( disA );
		dis2 = 1 * sin( disB );
		
		if( dis2 >= 1 ){ break; }
		
		yield;
	}
	Obj_Delete(id);
}

//　蝶のエフェクト
task ButterflyPower(CallID,pos,sca,dis,angle,plus,rgb_h){
	let ID			= [ObjPrim_Create(OBJ_SPRITE_2D),ObjPrim_Create(OBJ_SPRITE_2D)];
	let csd			= GetCurrentScriptDirectory();
	let sca1		= 0;
	let scaA		= 0;
	let dis1		= 0;
	let disA		= 0;
	let sp			= rand(16,32);
	let cc			= 0;
	let i			= 0;
	
	loop( length(ID) ){
		ObjRender_SetPosition(ID[i], pos[0] + dis1*dis * cos(angle), pos[1] + dis1*dis * sin(angle), 0 );
		ObjPrim_SetTexture(ID[i], csd ~ "./../img/effect/bt.png" );
		Obj_SetRenderPriorityI(ID[i], 41 );
		ObjRender_SetBlendType(ID[i], BLEND_ADD_ARGB );
		ObjRender_SetScaleXYZ(ID[i], sca, sca, 0 );
		ObjSprite2D_SetSourceRect(ID[i], 0, 0, 64, 128 );
		ObjSprite2D_SetDestRect(ID[i], 0, -64, 64, 64 );
		ObjRender_SetColor(ID[i], rgb_h[0], rgb_h[1], rgb_h[2] );
		ObjRender_SetAlpha(ID[i], sca1*255 );
		i++;
	}
	i = 0;
	
	while( !Obj_IsDeleted(CallID) && !Obj_IsDeleted(ID[0]) && !Obj_IsDeleted(ID[1]) && sca < 1 ){
		dis1 = 1 * sin( disA );
		sca1 = 1 * sin( scaA );
		
		loop( length(ID) ){
			ObjRender_SetPosition(ID[i], pos[0] + dis1*dis * cos(angle), pos[1] + dis1*dis * sin(angle), 0 );
			ObjRender_SetScaleXYZ(ID[i], sca - sca1*sca + sca/4 * sin(cc*sp), sca - sca1*sca, 0 );
			ObjRender_SetAlpha(ID[i], sca1*255 );
			i++;
		}
		i = 0;
		
		ObjRender_SetAngleXYZ(ID[0], 0, 0, 90+angle );
		ObjRender_SetAngleXYZ(ID[1], 0, 180, (90+angle)*-1 );
		
		angle += plus;
		
		cc++;
		if( dis1 < 1 ){ disA += 1; }
		if( sca1 < 1 ){ scaA += 1; }
		else{ break; }
		
		yield;
	}
	loop( length(ID) ){
		Obj_Delete(ID[i]);
		i++;
	}
	i = 0;
}

//　瞬く光
task FlashLight( pos, movep, sca, alpha, long, rgb_array ){
	//　エフェクトカット設定
	if( GetAreaCommonData("Option", "Effect_Cut", 0 ) > 1 ){ return; }
	
	let ID			= ObjPrim_Create(OBJ_SPRITE_2D);
	let csd			= GetCurrentScriptDirectory();
	let move		= [ 0, 0, 0 ];
	let frame		= 0;
	let move1		= 0;
	let moveA		= 0;
	let spin		= rand(0,360);
	let flash		= rand(2,64);
	
	//　点滅の速度
	let rc			= truncate( rand(2,4) );
	
	ObjRender_SetPosition(ID, pos[0], pos[1], 0 );
	ObjPrim_SetTexture(ID, csd ~ "./../img/effect/stg_eff01a.png" );
	ObjRender_SetBlendType(ID, BLEND_ADD_ARGB );
	Obj_SetRenderPriorityI(ID, 41 );
	ObjRender_SetScaleXYZ(ID, sca, sca, 0 );
	ObjRender_SetColor(ID, rgb_array[0], rgb_array[1], rgb_array[2] );
	ObjSprite2D_SetSourceRect(ID, 196, 0, 256, 64 );
	ObjSprite2D_SetDestCenter(ID);
	
	while( move1 < 1 ){
		
		move1 = 1 * sin( moveA );
		
		ObjRender_SetPosition(ID, pos[0]+move[0], pos[1]+move[1], 0 );
		ObjRender_SetAngleXYZ(ID, 0, 0, spin + move[2] );
		
		ObjRender_SetAlpha(ID, (move1*(alpha/2)) - (move1*(alpha/4))*sin(frame*flash) );
		ObjRender_SetScaleXYZ(ID, sca*2 + sca*sin(frame*2), sca*2 + sca*sin(frame*2), 0 );
		
		frame++;
		moveA += 1;
		move[0] = move[0] + movep[0];
		move[1] = move[1] + movep[1];
		
		yield;
	}
	move1 = 0;
	moveA = 0;
	while( frame < long ){
		
		ObjRender_SetPosition(ID, pos[0]+move[0], pos[1]+move[1], 0 );
		ObjRender_SetAngleXYZ(ID, 0, 0, spin + move[2] );
		
		ObjRender_SetAlpha(ID, alpha/2 - alpha/4*sin(frame*flash) );
		ObjRender_SetScaleXYZ(ID, sca*2 + sca*sin(frame*2), sca*2 + sca*sin(frame*2), 0 );
		
		frame++;
		move[0] = move[0] + movep[0];
		move[1] = move[1] + movep[1];
		
		yield;
	}
	while( move1 < 1 ){
		
		move1 = 1 * sin( moveA );
		
		ObjRender_SetPosition(ID, pos[0]+move[0], pos[1]+move[1], 0 );
		ObjRender_SetAngleXYZ(ID, 0, 0, spin + move[2] );
		
		let fade = alpha - move1*alpha;
		
		ObjRender_SetAlpha(ID, fade/2 - fade/4*sin(frame*flash) );
		ObjRender_SetScaleXYZ(ID, sca*2 + sca*sin(frame*2), sca*2 + sca*sin(frame*2), 0 );
		
		frame++;
		moveA += 1;
		move[0] = move[0] + movep[0];
		move[1] = move[1] + movep[1];
		
		yield;
	}
	Obj_Delete( ID );
}


//--------------------------------------------------------------------------------------------------------
//--------------------------------------------------------------------------------------------------------
//　中ボスが出る時のやつ

task Concentration02(ID,pos){
	let i = 0;
	
	ObjSound_Play( CreateShotSE[5] );
	
	ascent( i in 0..3 ){
		Concentration02_Ring( ID, pos, [128,255,255], 2, (i+1)*20 );
	}
	ascent( i in 0..4 ){
		let angle = 90;
		let av = [ -6, 6 ];
		Concentration02_Main( ID, pos, [256,384], [angle-32,angle+32], av[i%2], [192,255,255], 60 );
	}
	loop( 60 ){
		let spos = [
			pos[0] + rand(-64,64),
			pos[1] + rand(-64,64),
		];
		ButterflyPower( ID, spos, rand(0.1,0.4), rand(128,384), rand(0,360), 0, [128,255,255] );
		yield;
	}
	ObjSound_Play( CreateShotSE[7] );
	ascent( i in 0..6 ){
		Concentration02_Ring( ID, pos, [128,255-i*32,255], i/2, i*5 );
	}
}

task Concentration02_Main(ID,pos,dis_rand_h,ang_rand_h,angle_plus,rgb_h,long){
	let frame	= 0;
	
	loop( long ){
		let dis		= rand( dis_rand_h[0], dis_rand_h[1] );
		let angle	= rand( ang_rand_h[0], ang_rand_h[1] );
		
		if( Obj_IsDeleted(ID) ){ break; }
		
		if( frame%4 == 0 ){
			Concentration02_Child( ID, pos, dis, angle, angle_plus, rgb_h, rand(0.1,2) );
		}
			
		frame++;
		
		yield;
	}
}

task Concentration02_Child(ID,pos,dis,angle,angle_plus,rgb_h,sca){
	let id			= [ObjPrim_Create(OBJ_SPRITE_2D),
						ObjPrim_Create(OBJ_SPRITE_2D)];
	let ang			= 0;
	let move1		= 0;
	let moveA		= 0;
	let move2		= 0;
	let moveB		= 0;
	let spin		= rand(0,360);
	let rx			= rand(0,360);
	let ry			= rand(0,360);
	let i			= 0;
	
	ang = angle;
	
	loop( length(id) ){
		Obj_SetRenderPriorityI(id[i], 49 );
		i++;
	}
	i = 0;
	
	ObjPrim_SetTexture(id[0], path_effect01 );
	ObjRender_SetBlendType(id[0], BLEND_ADD_ARGB );
	ObjRender_SetAlpha(id[0], 128 );
	ObjSprite2D_SetSourceRect(id[0], 192, 256, 256, 320 );
	ObjSprite2D_SetDestCenter(id[0]);
	
	ObjPrim_SetTexture(id[1], path_effect03 );
	ObjRender_SetBlendType(id[1], BLEND_ADD_ARGB );
	ObjRender_SetColor(id[1], rgb_h[0], rgb_h[1], rgb_h[2] );
	ObjRender_SetAlpha(id[1], 64 );
	ObjSprite2D_SetSourceRect(id[1], 0, 64, 64, 128 );
	ObjSprite2D_SetDestCenter(id[1]);
	
	while( !Obj_IsDeleted(ID) && move1 < 1 ){
		move1 = 1 * sin( moveA );
		move2 = 1 * sin( moveB );
		
		loop( length(id) ){
			ObjRender_SetPosition(id[i], pos[0] + (dis-move1*dis) * cos( ang ), pos[1] + (dis-move1*dis) * sin( ang ), 0 );
			ObjRender_SetScaleXYZ(id[i], move1*(sca+0.4*i), move1*(sca+0.4*i), 0 );
			i++;
		}
		i = 0;
		
		ObjRender_SetAngleXYZ(id[0], 0, 0, -spin );
		ObjRender_SetAngleXYZ(id[1], rx + spin/16, ry + spin/8, -spin );
		
		ang += angle_plus;
		moveA += 2;
		if( move2 < 1 ){ moveB += 5; }
		spin += 64;
		
		yield;
	}
	move1 = 0;
	moveA = 0;
	while( !Obj_IsDeleted(ID) && move1 < 1 ){
		move1 = 1 * sin( moveA );
		
		loop( length(id) ){
			ObjRender_SetPosition(id[i], pos[0], pos[1], 0 );
			ObjRender_SetScaleXYZ(id[1-i], move1*(sca+0.4*i) - (sca+0.4*i), move1*(sca+0.4*i) - (sca+0.4*i), 0 );
			i++;
		}
		i = 0;
		
		ObjRender_SetAngleXYZ(id[0], 0, 0, -spin );
		ObjRender_SetAngleXYZ(id[1], rx + spin/16, ry + spin/8, -spin );
		
		moveA += 5;
		spin += 64;
		
		yield;
	}
	loop( length(id) ){
		Obj_Delete(id[i]);
		i++;
	}
}

task Concentration02_Ring(CallID,pos,rgb_array,sca,long){
	let ID		= ObjPrim_Create(OBJ_SPRITE_2D);
	let scale	= sca;
	let move1	= 0;
	let moveA	= 0;
	
	ObjPrim_SetTexture(ID, path_effect02 );
	Obj_SetRenderPriorityI(ID, 49 );
	ObjRender_SetPosition(ID, pos[0], pos[1], 0 );
	ObjRender_SetBlendType(ID, BLEND_ADD_ARGB );
	ObjRender_SetColor(ID, rgb_array[0], rgb_array[1], rgb_array[2] );
	ObjSprite2D_SetSourceRect(ID, 0, 0, 512, 512 );
	ObjSprite2D_SetDestCenter(ID);
	
	
	while( !Obj_IsDeleted(CallID) && scale > 0 ){
		
		move1 = 1 * sin( moveA );
		
		ObjRender_SetScaleXYZ(ID, scale, scale, 0 );
		ObjRender_SetAlpha(ID, move1*255 );
		
		scale -= sca/long;
		if( move1 < 1 ){ moveA += 5; }
		
		yield;
	}
	Obj_Delete( ID );
}




task Concentration03_Main(ID,rgb_h,long){
	let se		= ObjSound_Create;
	let se_vol	= GetAreaCommonData("Option", "SE_Volume", 100 );
	let frame	= 0;

	se_vol = 100 - 100 * ( ( 100 - se_vol ) / 100 )^2;
	
	SetAreaCommonData("anime", "loa", true );
	
	ObjSound_Load(se, GetCurrentScriptDirectory ~ "../se/power_logo2.ogg" );
	ObjSound_SetVolumeRate(se, se_vol );
	ObjSound_SetLoopEnable(se, false );
	ObjSound_Play(se);
	
	if( ObjMove_GetX(ID) < CenX ){
		ascent( let i in 0..3 ){
			Concentration03(ID, [ [256,256], [128,192] ], [270+i*120,270+i*120], 0.1, rgb_h, long );
		}
	}
	else{
		ascent( let i in 0..3 ){
			Concentration03(ID, [ [256,256], [128,192] ], [270+i*120,270+i*120], -0.1, rgb_h, long );
		}
	}
	
	loop( long ){
		if( Obj_IsDeleted(ID) ){ break; }
		
		if( frame%16 == 0 ){
			CreateVertex(ID, [0,0], 5, 128, 31, [0,-18], [255,32,32], [255,32,32], 4 );
			CreateVertex(ID, [0,0], 5, 128, 31, [180,18], [32,32,255], [32,32,255], 4 );
		}
		frame++;
		
		yield;
	}
	loop( 60 ){
		if( Obj_IsDeleted(ID) ){ break; }
		yield;
	}
	SetAreaCommonData("anime", "loa", false );
	Obj_Delete(se);
}

task Concentration03(ID,dis_rand_h,ang_rand_h,angle_plus,rgb_h,long){
	//　エフェクトカット設定
	if( GetAreaCommonData("Option", "Effect_Cut", 0 ) > 2 ){ return; }
	
	let frame	= 0;
	
	loop( long ){
		let dis		= [
			rand( dis_rand_h[0][0], dis_rand_h[0][1] ),
			rand( dis_rand_h[1][0], dis_rand_h[1][1] ),
		];
		let angle	= rand( ang_rand_h[0], ang_rand_h[1] );
		
		if( Obj_IsDeleted(ID) ){ break; }
		
		if( frame%4 == 0 ){
			Concentration03_Child( ID, dis, angle, angle_plus, rgb_h );
		}
			
		frame++;
		
		yield;
	}
}

task Concentration03_Child( ID, dis, angle, angle_plus, rgb_h ){
	let id			= [
		ObjPrim_Create(OBJ_SPRITE_2D),
		ObjPrim_Create(OBJ_SPRITE_2D),
	];
	let ang			= 0;
	let sca			= rand(1,2);
	let move1		= 0;
	let moveA		= 0;
	let pos			= [ObjMove_GetX(ID),ObjMove_GetY(ID)];
	let spin		= rand(0,360);
	let angp		= 0;
	let i			= 0;
	
	ang = angle;
	
	loop( length(id) ){
		ObjPrim_SetTexture(id[i], path_effect01 );
		Obj_SetRenderPriorityI(id[i], 38+i );
		i++;
	}
	i = 0;
	
	ObjRender_SetBlendType(id[0], BLEND_ADD_ARGB );
	ObjRender_SetColor(id[0], rgb_h[0], rgb_h[1], rgb_h[2] );
	ObjRender_SetAlpha(id[0], 128 );
	ObjSprite2D_SetSourceRect(id[0], 0, 320, 64, 384 );
	ObjSprite2D_SetDestCenter(id[0]);
	ObjRender_SetBlendType(id[1], BLEND_SUBTRACT );
	ObjSprite2D_SetSourceRect(id[1], 160-32, 288, 192-32, 320 );
	ObjSprite2D_SetDestCenter(id[1]);
	
	while( !Obj_IsDeleted(ID) && move1 < 1 ){
		pos		= [ObjMove_GetX(ID),ObjMove_GetY(ID)];
		move1	= 1 * sin( moveA );
		
		loop( length(id) ){
			ObjRender_SetPosition(id[i], pos[0] + dis[0] * cos( ang ), pos[1] + dis[1] * sin( ang ), 0 );
			ObjRender_SetScaleXYZ(id[i], move1*(sca+0.1*i), move1*(sca+0.1*i), 0 );
			ObjRender_SetAngleXYZ(id[i], 0, 0, -spin );
			i++;
		}
		i = 0;
		
		angp += angle_plus;
		ang += angp;
		moveA += 2;
		spin += 64;
		
		yield;
	}
	move1 = 0;
	moveA = 0;
	while( !Obj_IsDeleted(ID) && move1 < 1 ){
		pos		= [ObjMove_GetX(ID),ObjMove_GetY(ID)];
		move1	= 1 * sin( moveA );
		
		loop( length(id) ){
			ObjRender_SetPosition(id[i], pos[0] + (dis[0]-move1*dis[0]) * cos( ang ), pos[1] + (dis[1]-move1*dis[1]) * sin( ang ), 0 );
			ObjRender_SetAngleXYZ(id[i], 0, 0, -spin );
			i++;
		}
		i = 0;
		
		angp += angle_plus;
		ang += angp;
		moveA += 2;
		spin += 64;
		
		yield;
	}
	move1 = 0;
	moveA = 0;
	while( !Obj_IsDeleted(ID) && move1 < 1 ){
		pos		= [ObjMove_GetX(ID),ObjMove_GetY(ID)];
		move1	= 1 * sin( moveA );
		
		loop( length(id) ){
			ObjRender_SetPosition(id[i], pos[0], pos[1], 0 );
			ObjRender_SetScaleXYZ(id[i], move1*(sca+0.1*i) - (sca+0.1*i), move1*(sca+0.1*i) - (sca+0.1*i), 0 );
			ObjRender_SetAngleXYZ(id[i], 0, 0, -spin );
			i++;
		}
		i = 0;
		
		moveA += 5;
		spin += 64;
		
		yield;
	}
	loop( length(id) ){
		Obj_Delete(id[i]);
		i++;
	}
}