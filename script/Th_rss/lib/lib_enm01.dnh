


//　雑多
//------------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------------

//　h:色相 多分255位で一周してる
//　s:彩度 上限 255
//　v:明度 上限 255
//　要素数 3 の配列で RGB が返る
function HSVtoRGB( h, s, v ){
	let f;
	let i;
	let p;
	let q;
	let t;
	let rgb = [0,0,0];
	
	i = floor(h / 60) % 6;
	f = (h / 60) - floor(h / 60);
	p = round( v * (1 - (s / 255) ) );
	q = round( v * (1 - (s / 255) * f) );
	t = round( v * (1 - (s / 255) * (1 - f) ) );
	
	alternative(i)
	case(0){ rgb[0] = v; rgb[1] = t; rgb[2] = p; }
	case(1){ rgb[0] = q; rgb[1] = v; rgb[2] = p; }
	case(2){ rgb[0] = p; rgb[1] = v; rgb[2] = t; }
	case(3){ rgb[0] = p; rgb[1] = q; rgb[2] = v; }
	case(4){ rgb[0] = t; rgb[1] = p; rgb[2] = v; }
	case(5){ rgb[0] = v; rgb[1] = p; rgb[2] = q; }
	
	return rgb;
}

//　導命樹の旧ver
function EnemyDisplay03( ID, float_frag, path ){
	let obj			= ObjPrim_Create(OBJ_SPRITE_2D);
	let EnmX		= ObjMove_GetX(ID);
	let EnmY		= ObjMove_GetY(ID);
	let sca			= 0.8;
	
	ObjRender_SetPosition(obj, EnmX, EnmY, 0 );
	ObjPrim_SetTexture(obj, path );
	Obj_SetRenderPriorityI(obj, 41 );
	ObjRender_SetBlendType(obj, BLEND_ALPHA );
	ObjRender_SetScaleXYZ(obj, sca, sca, 0 );
	ObjSprite2D_SetSourceRect(obj, 0, 0, 128, 128 );
	ObjSprite2D_SetDestCenter(obj);
	
	EnemyDisplay_Anime( ID, obj, float_frag );
	
	return obj;
}

//　敵アニメーション本体　旧ver
task EnemyDisplay_Anime( ID, obj, float_frag ){
	let floath		= 0;
	let A_count		= 0;
	let AR_count	= 0;
	let AL_count	= 0;
	let A_returnR	= 0;
	let A_returnL	= 0;
	let rotationY	= 0;
	let sp			= 0;
	let EnmX		= ObjMove_GetX(ID);
	let EnmY		= ObjMove_GetY(ID);
	let GetSpeedX	= ObjMove_GetSpeed(ID) * cos( ObjMove_GetAngle(ID) );
	let GetSpeedY	= ObjMove_GetSpeed(ID) * sin( ObjMove_GetAngle(ID) );
	let hc			= 8;
	
	/*アニメーション*/
	task Animation(){
		if( GetSpeedX == 0 ){ A_count ++; }
		if( A_count >= 60 ){ A_count = 0; }
		if( GetSpeedX == 0 ){
			if( AL_count > 0 ){
				A_returnL ++;
				//　左移動→待機への変化速度
				if( A_returnL %1 == 0 ){
					AL_count --;
				}
			}
			else{
				AL_count = 0;
				A_returnL = 0;
			}
			if( AR_count > 0 ){
				A_returnR ++;
				//　右移動→待機への変化速度
				if( A_returnR %1 == 0 ){
					AR_count --;
				}
			}
			else{
				AR_count = 0;
				A_returnR = 0;
			}
		}
		if( GetSpeedX < 0 ){
			AL_count ++;
		}
		if( GetSpeedX > 0 ){
			AR_count ++;
		}
		if( AL_count >= 30 ){ AL_count = 0; }
		if( AR_count >= 30 ){ AR_count = 0; }
	}
	
	while( !Obj_IsDeleted(ID) ){
		//現在出現しているボスのidから云々
		GetSpeedX		= ObjMove_GetSpeed(ID) * cos( ObjMove_GetAngle(ID) );
		GetSpeedY		= ObjMove_GetSpeed(ID) * sin( ObjMove_GetAngle(ID) );
		let EnmX		= ObjMove_GetX(ID);
		let EnmY		= ObjMove_GetY(ID);
		let loa			= GetAreaCommonData("anime", "loa", false );
		let spa			= GetAreaCommonData("anime", "spa", false );
		let alpha		= GetAreaCommonData("anime", "alpha", 255 );
		
		ObjRender_SetAlpha(obj, alpha );
		
		if( GetSpeedX == 0  && AL_count == 0  && AR_count == 0 ){
			ObjRender_SetAngleXYZ(obj, 0, rotationY, 0 );
			if( A_count >= 0  && A_count < 30 ){ ObjSprite2D_SetSourceRect(obj, 0, 0, 128, 128 );}
			if( A_count >= 30 && A_count < 60 ){ ObjSprite2D_SetSourceRect(obj, 0, 128, 128, 256 );}
		}
		if( GetSpeedX > 0 || AR_count > 0 ){
			rotationY = 0;
			sp = 0;
			if( spa ){
				ObjRender_SetAngleXYZ(obj, 0, 0, 0 );
			}
			else{
				ObjRender_SetAngleXYZ(obj, 0, 0, 0 );
			}
			if( AR_count >= 0  && AR_count < 15 ){ ObjSprite2D_SetSourceRect(obj, 128*2, 0, 128*3, 128 ); }
			if( AR_count >= 15 && AR_count < 30 ){ ObjSprite2D_SetSourceRect(obj, 128*2, 128, 128*3, 256 ); }
		}
		if( GetSpeedX < 0 || AL_count > 0 ){
			rotationY = 0;
			sp = 0;
			if( spa ){
				ObjRender_SetAngleXYZ(obj, 0, 0, 0 );
			}
			else{
				ObjRender_SetAngleXYZ(obj, 0, 0, 0 );
			}
			if( AL_count >= 0  && AL_count < 15 ){ ObjSprite2D_SetSourceRect(obj, 128, 0, 128*2, 128 ); }
			if( AL_count >= 15 && AL_count < 30 ){ ObjSprite2D_SetSourceRect(obj, 128, 128, 128*2, 256 ); }
		}
		
		if( GetSpeedX == 0 && GetSpeedY == 0 ){
			if( loa || spa ){
				sp++;
				if( !spa && sp >= 10 ){ sp = 5; }
				if( sp >= 25 ){ sp = 20; }
				if( sp >= 0  && sp < 5 ){ ObjSprite2D_SetSourceRect(obj,384,0,512,128); }
				if( sp >= 5  && sp < 10 ){ ObjSprite2D_SetSourceRect(obj,384,128,512,256); }
				if( sp >= 10 && sp < 15 ){ ObjSprite2D_SetSourceRect(obj,0,256,128,384); }
				if( sp >= 15 && sp < 20 ){ ObjSprite2D_SetSourceRect(obj,128,256,256,384); }
				if( sp >= 20 && sp < 25 ){ ObjSprite2D_SetSourceRect(obj,256,256,384,384); }
			}
			if( !loa && !spa && sp > 0 ){
				sp--;
				if( sp >= 0  && sp < 5 ){ ObjSprite2D_SetSourceRect(obj,384,0,512,128); }
				if( sp >= 5  && sp < 10 ){ ObjSprite2D_SetSourceRect(obj,384,128,512,256); }
				if( sp >= 10 && sp < 15 ){ ObjSprite2D_SetSourceRect(obj,0,256,128,384); }
				if( sp >= 15 && sp < 20 ){ ObjSprite2D_SetSourceRect(obj,256,256,384,384); }
				if( sp >= 20 && sp < 25 ){ ObjSprite2D_SetSourceRect(obj,256,256,384,384); }
			}
		}
		
		if( float_frag && GetSpeedX == 0 ){
			ObjRender_SetPosition(obj, EnmX, EnmY + 4 * sin(floath*3), 0 );
			floath++;
		}
		else{
			ObjRender_SetPosition(obj, EnmX, EnmY + 4 * sin(floath*3), 0 );
		}
		
		Animation();
		
		yield;
	}
	Obj_Delete(obj);
}
