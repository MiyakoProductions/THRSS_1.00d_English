
//　フェードアウト
function FadeOut_Utility(){
	let id		= ObjPrim_Create(OBJ_SPRITE_2D);
	let csd		= GetCurrentScriptDirectory;
	let alpha1	= 0;
	let alphaA	= 0;
	
	ObjRender_SetPosition(id,0,0,0);
	ObjPrim_SetTexture(id,csd~"../img/eff/Effect_White.png");
	Obj_SetRenderPriorityI(id,89);
	ObjPrim_SetPrimitiveType(id,PRIMITIVE_TRIANGLESTRIP);
	ObjRender_SetBlendType(id,BLEND_ALPHA);
	ObjPrim_SetVertexCount(id,4);
	ObjPrim_SetVertexPosition(id,0,0,0,0);
	ObjPrim_SetVertexPosition(id,1,0,480,0);
	ObjPrim_SetVertexPosition(id,2,640,0,0);
	ObjPrim_SetVertexPosition(id,3,640,480,0);
	ObjPrim_SetVertexUVT(id,0,0,0);
	ObjPrim_SetVertexUVT(id,1,0,128);
	ObjPrim_SetVertexUVT(id,2,128,0);
	ObjPrim_SetVertexUVT(id,3,128,128);
	
	while( alpha1 < 1 ){
		alphaA += 1;
		alpha1 = 1 * sin(alphaA);
		
		ObjPrim_SetVertexAlpha(id, 0, alpha1*255 );
		ObjPrim_SetVertexAlpha(id, 1, alpha1*255 );
		ObjPrim_SetVertexAlpha(id, 2, alpha1*255 );
		ObjPrim_SetVertexAlpha(id, 3, alpha1*255 );
		yield;
	}
	alpha1 = 0;
	alphaA = 0;
	SetAreaCommonData("talk_ED","flg",false);
	SetAreaCommonData("talk_ED", "counter", 443 );
	loop(128){yield;}
	Obj_Delete(id);
}

//　フェードアウトイン
function FadeOut_rollin(){
	let id		= ObjPrim_Create(OBJ_SPRITE_2D);
	let csd		= GetCurrentScriptDirectory;
	let alpha1	= 0;
	let alphaA	= 0;
	
	ObjRender_SetPosition(id,0,0,0);
	ObjPrim_SetTexture(id,csd~"../img/eff/Effect_White.png");
	Obj_SetRenderPriorityI(id,89);
	ObjPrim_SetPrimitiveType(id,PRIMITIVE_TRIANGLESTRIP);
	ObjRender_SetBlendType(id,BLEND_ALPHA);
	ObjPrim_SetVertexCount(id,4);
	ObjPrim_SetVertexPosition(id,0,0,0,0);
	ObjPrim_SetVertexPosition(id,1,0,480,0);
	ObjPrim_SetVertexPosition(id,2,640,0,0);
	ObjPrim_SetVertexPosition(id,3,640,480,0);
	ObjPrim_SetVertexUVT(id,0,0,0);
	ObjPrim_SetVertexUVT(id,1,0,128);
	ObjPrim_SetVertexUVT(id,2,128,0);
	ObjPrim_SetVertexUVT(id,3,128,128);
	
	while( alpha1 < 1 ){
		alphaA += 1;
		alpha1 = 1 * sin(alphaA);
		
		ObjPrim_SetVertexAlpha(id, 0, alpha1*255 );
		ObjPrim_SetVertexAlpha(id, 1, alpha1*255 );
		ObjPrim_SetVertexAlpha(id, 2, alpha1*255 );
		ObjPrim_SetVertexAlpha(id, 3, alpha1*255 );
		yield;
	}
	alpha1 = 0;
	alphaA = 0;
	loop( 60 ){ yield; }
	
	DeleteMusic();
	PlayMusic( 14, true, 0 );
	
	SetWorld04_SR();
	
	StaffRoll_Main();
	
	while( alpha1 < 1 ){
		alphaA += 2;
		alpha1 = 1 * sin(alphaA);
		
		ObjPrim_SetVertexAlpha(id, 0, 255 - alpha1*255 );
		ObjPrim_SetVertexAlpha(id, 1, 255 - alpha1*255 );
		ObjPrim_SetVertexAlpha(id, 2, 255 - alpha1*255 );
		ObjPrim_SetVertexAlpha(id, 3, 255 - alpha1*255 );
		yield;
	}
	Obj_Delete(id);
}

//　フェードアウト　アウト
function FadeOut_rollout(){
	let id		= ObjPrim_Create(OBJ_SPRITE_2D);
	let csd		= GetCurrentScriptDirectory;
	let alpha1	= 0;
	let alphaA	= 0;
	
	ObjRender_SetPosition(id,0,0,0);
	ObjPrim_SetTexture(id,csd~"../img/eff/Effect_White.png");
	Obj_SetRenderPriorityI(id,89);
	ObjPrim_SetPrimitiveType(id,PRIMITIVE_TRIANGLESTRIP);
	ObjRender_SetBlendType(id,BLEND_ALPHA);
	ObjPrim_SetVertexCount(id,4);
	ObjPrim_SetVertexPosition(id,0,0,0,0);
	ObjPrim_SetVertexPosition(id,1,0,480,0);
	ObjPrim_SetVertexPosition(id,2,640,0,0);
	ObjPrim_SetVertexPosition(id,3,640,480,0);
	ObjPrim_SetVertexUVT(id,0,0,0);
	ObjPrim_SetVertexUVT(id,1,0,128);
	ObjPrim_SetVertexUVT(id,2,128,0);
	ObjPrim_SetVertexUVT(id,3,128,128);
	
	while( alpha1 < 1 ){
		alphaA += 1;
		alpha1 = 1 * sin(alphaA);
		
		ObjPrim_SetVertexAlpha(id, 0, alpha1*255 );
		ObjPrim_SetVertexAlpha(id, 1, alpha1*255 );
		ObjPrim_SetVertexAlpha(id, 2, alpha1*255 );
		ObjPrim_SetVertexAlpha(id, 3, alpha1*255 );
		yield;
	}
	alpha1 = 0;
	alphaA = 0;
	SetAreaCommonData( "StaffRoll", "roll_end", true );
	SetAreaCommonData( "Stop", "frag", false );
	while( alpha1 < 1 ){
		alphaA += 2;
		alpha1 = 1 * sin(alphaA);
		
		ObjPrim_SetVertexAlpha(id, 0, 255 - alpha1*255 );
		ObjPrim_SetVertexAlpha(id, 1, 255 - alpha1*255 );
		ObjPrim_SetVertexAlpha(id, 2, 255 - alpha1*255 );
		ObjPrim_SetVertexAlpha(id, 3, 255 - alpha1*255 );
		yield;
	}
	Obj_Delete(id);
}

//　スタッフロール
task StaffRoll_Main(){
	CreateCommonDataArea( "StaffRoll" );
	SetAreaCommonData( "StaffRoll", "roll_end", false );
	
	FrameWait( 60 );
	
	SR_Caption( [320,200], 0, [0,0,1024,128], 300 );
	FrameWait( 480 );
	
	SR_Caption( [320,200], 0, [0,128,1024,256], 300 );
	FrameWait( 480 );
	
	SR_Caption( [320,200], 0, [0,256,1024,384], 300 );
	FrameWait( 480 );
	
	SR_Caption( [320,200], 0, [0,384,1024,512], 300 );
	FrameWait( 480 );
	
	SR_Caption( [160+32,120+8], 2, [0,0,512,128], 300 );
	SR_Caption( [480-32,360-8], 2, [512,0,1024,128], 300 );
	FrameWait( 480 );
	
	SR_Caption( [480-32,120+8], 2, [512,128,1024,256], 300 );
	SR_Caption( [160+32,360-8], 2, [0,128,512,256], 300 );
	FrameWait( 480 );
	
	SR_Caption( [160+32,120+8], 2, [0,256,512,384], 300 );
	SR_Caption( [480-32,360-8], 2, [512,256,1024,384], 300 );
	FrameWait( 480 );
	
	SR_Caption( [480-32,120+8], 2, [512,384,1024,512], 300 );
	SR_Caption( [160+32,360-8], 2, [0,384,512,512], 300 );
	FrameWait( 480 );
	
	SR_Caption( [160+32,120+8], 2, [0,512,512,640], 300 );
	SR_Caption( [480-32,360-8], 2, [512,512,1024,640], 300 );
	FrameWait( 480 );
	
	SR_Caption( [320,200], 2, [0,640,512,768], 300 );
	FrameWait( 480 );
	
	SR_Caption( [320,200], 0, [0,512,1024,640], 300 );
	FrameWait( 480 );
	
	FadeOut_rollout();
}

function FrameWait( long ){
	loop( long ){ yield; }
}

task SR_Caption( pos, texture_num, _rect, long ){
	let obj			= [
		ObjPrim_Create(OBJ_SPRITE_2D),
		ObjPrim_Create(OBJ_SPRITE_2D),
		ObjPrim_Create(OBJ_SPRITE_2D),
		ObjPrim_Create(OBJ_SPRITE_2D),
	];
	let move1		= 0;
	let moveA		= 0;
	let scale		= 0.8;
	let i			= 0;
	
	ObjPrim_SetTexture(obj[0], sr_tex[ 0 + texture_num ] );
	ObjPrim_SetTexture(obj[1], sr_tex[ 1 + texture_num ] );
	ObjPrim_SetTexture(obj[2], sr_tex[ 4 ] );
	ObjPrim_SetTexture(obj[3], sr_tex[ 5 ] );
	
	ascent( i in 0..( length(obj)-1 ) ){
		ObjRender_SetBlendType(obj[i], BLEND_ALPHA );
		Obj_SetRenderPriorityI(obj[i], 82 );
		ObjRender_SetScaleXYZ(obj[i], scale, scale, 0 );
		ObjSprite2D_SetSourceRect(obj[i], _rect[0], _rect[1], _rect[2], _rect[3] );
		ObjSprite2D_SetDestCenter(obj[i]);
	}
	
	ObjRender_SetBlendType(obj[2], BLEND_ALPHA );
	Obj_SetRenderPriorityI(obj[2], 81 );
	ObjRender_SetScaleXYZ(obj[2], scale*0.8, scale*0.8, 0 );
	ObjRender_SetColor(obj[2], 192, 192, 192 );
	ObjSprite2D_SetSourceRect(obj[2], 0, 0, 512, 512 );
	ObjSprite2D_SetDestCenter(obj[2]);
	
	ObjRender_SetBlendType(obj[3], BLEND_ALPHA );
	Obj_SetRenderPriorityI(obj[3], 81 );
	ObjRender_SetScaleXYZ(obj[3], 1, 1, 0 );
	ObjRender_SetColor(obj[3], 192, 192, 192 );
	ObjRender_SetAngleZ(obj[3], -16 );
	ObjSprite2D_SetSourceRect(obj[3], 0, 0, 256, 256 );
	ObjSprite2D_SetDestCenter(obj[3]);
	
	while( move1 < 1 ){
		move1 = 1 * sin( moveA );
		
		let distance = 128 - move1*128;
		let spos = [
			pos[0] + distance * cos( -45 ),
			pos[1] + distance * sin( -45 ),
		];
		
		ObjRender_SetPosition(obj[0], pos[0] - 64 + move1*64, pos[1] - 24, 0 );
		ObjRender_SetPosition(obj[1], pos[0] + 64 - move1*64, pos[1] + 24, 0 );
		ObjRender_SetPosition(obj[2], spos[0], spos[1], 0 );
		ObjRender_SetPosition(obj[3], pos[0]-48, pos[1], 0 );
		ObjRender_SetAngleZ(obj[2], -move1*190 );
		ascent( i in 0..length(obj) ){
			ObjRender_SetAngleY(obj[i], -90 + move1*90 );
			ObjRender_SetAlpha(obj[i], move1*255 );
		}
		
		spos = [
			pos[0] + rand(-160,160),
			pos[1] + rand(96,128),
		];
		CreateBubble_2D(
			obj[0],
			spos,
			[ rand(-0.1,0.1), rand(-1,-2), rand(0,360) ],
			rand(0.01,0.1),
			rand(64,96),
			30,
			[255,255,255]
		);
		
		moveA += 1;
		
		yield;
	}
	FrameWait( long );
	while( move1 > 0 ){
		move1 = 1 * sin( moveA );
		
		let distance = -128 + move1*128;
		let spos = [
			pos[0] + distance * cos( -45 ),
			pos[1] + distance * sin( -45 ),
		];
		
		ObjRender_SetPosition(obj[0], pos[0] + 64 - move1*64, pos[1] - 24, 0 );
		ObjRender_SetPosition(obj[1], pos[0] - 64 + move1*64, pos[1] + 24, 0 );
		ObjRender_SetPosition(obj[2], spos[0], spos[1], 0 );
		ObjRender_SetPosition(obj[3], pos[0]-48, pos[1], 0 );
		ObjRender_SetAngleZ(obj[2], -move1*190 );
		ascent( i in 0..length(obj) ){
			ObjRender_SetAngleY(obj[i], 90 - move1*90 );
			ObjRender_SetAlpha(obj[i], move1*255 );
		}
		
		moveA += 1;
		
		yield;
	}
	ascent( i in 0..length(obj) ){
		Obj_Delete(obj[i]);
	}
}

//　泡
task CreateBubble_2D( CallID, pos, movep, sca, alpha, long, rgb_array ){
	//　エフェクトカット設定
	if( GetAreaCommonData("Option", "Effect_Cut", 0 ) > 1 ){ return; }
	
	let ID			= ObjPrim_Create(OBJ_SPRITE_2D);
	let move		= [ 0, 0, 0 ];
	let frame		= 0;
	let move1		= 0;
	let moveA		= 0;
	let spin		= rand(0,360);
	let flash		= rand(2,64);
	let r_tex		= rand(0,99);
	
	//　点滅の速度
	let rc			= truncate( rand(2,4) );
	
	ObjRender_SetPosition(ID, pos[0], pos[1], 0 );
	ObjPrim_SetTexture(ID, csd ~ "./../img/effect/bubble01a.png" );
	ObjRender_SetBlendType(ID, BLEND_ADD_ARGB );
	Obj_SetRenderPriorityI(ID, 82 );
	ObjRender_SetScaleXYZ(ID, sca, sca, 0 );
	ObjRender_SetColor(ID, rgb_array[0], rgb_array[1], rgb_array[2] );
	
	if( r_tex >= 0 && r_tex < 30 ){
		ObjSprite2D_SetSourceRect(ID, 0, 0, 128, 128 );
	}
	else if( r_tex >= 0 && r_tex < 30 ){
		ObjSprite2D_SetSourceRect(ID, 128, 0, 256, 128 );
	}
	else{
		ObjSprite2D_SetSourceRect(ID, 0, 128, 128, 256 );
	}
	ObjSprite2D_SetDestCenter(ID);
	
	while( !Obj_IsDeleted(CallID) && move1 < 1 ){
		
		move1 = 1 * sin( moveA );
		
		ObjRender_SetPosition(ID, pos[0]+move[0], pos[1]+move[1], 0 );
		ObjRender_SetAngleXYZ(ID, 0, 0, spin + move[2] );
		
		ObjRender_SetAlpha(ID, (move1*(alpha/2)) - (move1*(alpha/4))*sin(frame*flash) );
		ObjRender_SetScaleXYZ(ID, sca*2 + (sca/2)*cos(frame*32), sca*2 + (sca/1.6)*sin(frame*32), 0 );
		
		frame++;
		moveA += 1;
		move[0] = move[0] + movep[0];
		move[1] = move[1] + movep[1];
		
		yield;
	}
	move1 = 0;
	moveA = 0;
	while( !Obj_IsDeleted(CallID) && frame < long ){
		ObjRender_SetPosition(ID, pos[0]+move[0], pos[1]+move[1], 0 );
		ObjRender_SetAngleXYZ(ID, 0, 0, spin + move[2] );
		
		ObjRender_SetAlpha(ID, alpha/2 - alpha/4*sin(frame*flash) );
		ObjRender_SetScaleXYZ(ID, sca*2 + (sca/2)*cos(frame*32), sca*2 + (sca/1.6)*sin(frame*32), 0 );
		
		frame++;
		move[0] = move[0] + movep[0];
		move[1] = move[1] + movep[1];
		
		yield;
	}
	while( !Obj_IsDeleted(CallID) && move1 < 1 ){
		
		move1 = 1 * sin( moveA );
		
		ObjRender_SetPosition(ID, pos[0]+move[0], pos[1]+move[1], 0 );
		ObjRender_SetAngleXYZ(ID, 0, 0, spin + move[2] );
		
		let fade = alpha - move1*alpha;
		
		ObjRender_SetAlpha(ID, fade/2 - fade/4*sin(frame*flash) );
		ObjRender_SetScaleXYZ(ID, sca*2 + (sca/2)*cos(frame*32), sca*2 + (sca/1.6)*sin(frame*32), 0 );
		
		frame++;
		moveA += 1;
		move[0] = move[0] + movep[0];
		move[1] = move[1] + movep[1];
		
		yield;
	}
	Obj_Delete( ID );
}