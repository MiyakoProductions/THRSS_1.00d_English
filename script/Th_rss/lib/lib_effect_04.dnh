
//　雑多なエフェクト色々
//--------------------------------------------------------------------------------------------------------------------------------
//--------------------------------------------------------------------------------------------------------------------------------

//　初名 雷陣
task DisCharge_Thnder01( ID, SET_DISTANCE, mpos, rgb_array, long ){
	let obj			= ObjPrim_Create(OBJ_SPRITE_2D);
	let csd			= GetCurrentScriptDirectory();
	let dis1		= 0;//　内円
	let disA		= 0;
	let dis2		= 0;//　外円
	let disB		= 0;
	let ang			= 0;
	let pc			= 0;
	let i			= 0;
	let i2			= 1;
	let count		= 0;
	
	let gpos			= [ ObjMove_GetX(ID), ObjMove_GetY(ID) ];
	let SET_POLYGON		= 16;
	
	//　Ｎ角形＋１＊２が頂点の数になる
	let ten			= ( SET_POLYGON + 1 ) * 2;
	//　サイズ / 頂点数
	let _rect		= 0;
	//　円の太さ
	let w		= [];
	let alpha	= [];
	ascent( i in 0..( ten/2 ) ){
		w		= w ~ [ rand(4,64) ];
		alpha	= alpha ~ [ rand(0,255) ];
	}
	i = 0;
	
	ObjRender_SetPosition(obj, gpos[0] + mpos[0], gpos[1] + mpos[1], 0 );
	ObjPrim_SetTexture(obj, csd ~ "./../img/effect/thunder_wave.png" );
	Obj_SetRenderPriorityI(obj, 39 );
	ObjRender_SetBlendType(obj, BLEND_ADD_ARGB );
	ObjPrim_SetPrimitiveType(obj, PRIMITIVE_TRIANGLESTRIP );
	ObjPrim_SetVertexCount(obj, ten );
	
	ObjSound_Play( CreateShotSE[8] );
	
	while( dis1 < 1 || dis2 < 1 ){
		loop( ten/2 ){
			ObjPrim_SetVertexPosition(obj, i, dis1*(SET_DISTANCE+w[i/2]) * cos(pc+ang), dis1*(SET_DISTANCE+w[i/2]) * sin(pc+ang), 0 );
			ObjPrim_SetVertexPosition(obj, i2, dis2*SET_DISTANCE * cos(pc+ang), dis2*SET_DISTANCE * sin(pc+ang), 0 );
			ObjPrim_SetVertexUVT(obj, i, 0 + _rect - count*32, 0 );
			ObjPrim_SetVertexUVT(obj, i2, 0 + _rect - count*32, 128 );
			ObjPrim_SetVertexColor(obj, i, rgb_array[0][0], rgb_array[0][1], rgb_array[0][2] );
			ObjPrim_SetVertexColor(obj, i2, rgb_array[1][0], rgb_array[1][1], rgb_array[1][2] );
			ObjPrim_SetVertexAlpha(obj, i, alpha[i/2] );
			ObjPrim_SetVertexAlpha(obj, i2, alpha[i/2] );
			
			pc			+= 360/SET_POLYGON;
			i			+= 2;
			i2			+= 2;
			_rect		+= 128;
		}
		pc			= 0;
		i			= 0;
		i2			= 1;
		_rect		= 0;
		
		count++;
		ang += 32;
		
		if( dis1 < 1 ){ disA += 5; }
		if( dis2 < 1 ){ disB += 5; }
		dis1 = 1 * sin( disA );
		dis2 = 1 * sin( disB );
		
		yield;
	}
	loop( long ){
		loop( ten/2 ){
			ObjPrim_SetVertexPosition(obj, i, dis1*(SET_DISTANCE+w[i/2]) * cos(pc+ang), dis1*(SET_DISTANCE+w[i/2]) * sin(pc+ang), 0 );
			ObjPrim_SetVertexPosition(obj, i2, dis2*SET_DISTANCE * cos(pc+ang), dis2*SET_DISTANCE * sin(pc+ang), 0 );
			ObjPrim_SetVertexUVT(obj, i, 0 + _rect - count*32, 0 );
			ObjPrim_SetVertexUVT(obj, i2, 0 + _rect - count*32, 128 );
			
			pc			+= 360/SET_POLYGON;
			i			+= 2;
			i2			+= 2;
			_rect		+= 128;
		}
		pc			= 0;
		i			= 0;
		i2			= 1;
		_rect		= 0;
		
		count++;
		ang += 32;
		
		yield;
	}
	dis1 = 0;
	disA = 0;
	while( dis1 < 1 ){
		dis1 = 1 * sin( disA );
		
		loop( ten/2 ){
			let disD = [ (SET_DISTANCE+w), (SET_DISTANCE) ];
			
			ObjPrim_SetVertexPosition(obj, i, (disD[0] + dis1*(SET_DISTANCE+w[i/2])) * cos(pc+ang), (disD[0] + dis1*(SET_DISTANCE+w[i/2])) * sin(pc+ang), 0 );
			ObjPrim_SetVertexPosition(obj, i2, (disD[1] + dis1*SET_DISTANCE) * cos(pc+ang), (disD[1] + dis1*SET_DISTANCE) * sin(pc+ang), 0 );
			ObjPrim_SetVertexUVT(obj, i, 0 + _rect - count*32, 0 );
			ObjPrim_SetVertexUVT(obj, i2, 0 + _rect - count*32, 128 );
			ObjPrim_SetVertexAlpha(obj, i, alpha[i/2] - dis1*alpha[i/2] );
			ObjPrim_SetVertexAlpha(obj, i2, alpha[i/2] - dis1*alpha[i/2] );
			
			pc			+= 360/SET_POLYGON;
			i			+= 2;
			i2			+= 2;
			_rect		+= 128;
		}
		pc			= 0;
		i			= 0;
		i2			= 1;
		_rect		= 0;
		
		count++;
		ang += 32;
		
		disA += 5;
		
		yield;
	}
	Obj_Delete(obj);
}

//　会話時敵名表示
task DisplayEnemyName01( CallID, pos, num, kill ){
	let obj		= ObjPrim_Create(OBJ_SPRITE_2D);
	let csd		= GetCurrentScriptDirectory();
	let scale	= 0.56;
	let count	= 0;
	let move1	= 0;
	let moveA	= 0;
	let tex_no	= 0;
	let _rect	= [ 0, 0 ];
	let path	= [
		csd ~ "./../img/front/enemy_name_second01a.png",
		csd ~ "./../img/front/enemy_name_second01b.png",
	];
	
	let lay		= 89;
	
	let rgb_array = [
		[255,255,255],	//　白
		[64,255,255],	//　水
		[64,255,128],	//　青緑
		[64,128,255],	//　青
	];
	
	//　表示テクスチャ変更
	alternative( num )
	case( 1 ){	//　幽々子
		_rect		= [ 0, 0 ];
		rgb_array	= [
			[255,255,255],	//　白
			[253,239,242],	//　桜
			[255,64,128],	//　赤紫
			[128,64,255],	//　青紫
		];
	}
	case( 2 ){	//　初名
		_rect		= [ 0, 1 ];
		rgb_array	= [
			[255,255,255],	//　白
			[220,214,217],	//　薄梅鼠
			[255,255,64],	//　黄
			[255,128,64],	//　橙
		];
	}
	case( 3 ){	//　瑠璃 1
		_rect		= [ 0, 2 ];
		rgb_array	= [
			[255,255,255],	//　白
			[64,255,255],	//　水
			[64,255,128],	//　青緑
			[64,128,255],	//　青
		];
	}
	case( 4 ){	//　皇女
		_rect		= [ 0, 3 ];
		rgb_array	= [
			[255,255,255],	//　白
			[191,57,83],	//　紅
			[203,58,17],	//　緋
			[215,83,36],	//　丹
		];
	}
	case( 5 ){	//　垂神
		_rect		= [ 1, 0 ];
		rgb_array	= [
			[255,255,255],	//　白
			[244,133,0],	//　橙
			[244,195,149],	//　枯
			[238,162,0],	//　黄金
		];
	}
	case( 6 ){	//　桃姫
		_rect		= [ 1, 1 ];
		rgb_array	= [
			[255,255,255],	//　白
			[240,136,135],	//　桃
			[253,227,227],	//　桜
			[102,60,107],	//　古代紫
		];
	}
	case( 7 ){	//　無々夢
		_rect		= [ 1, 2 ];
		rgb_array	= [
			[191,57,83],	//　紅
			[68,46,60],		//　滅紫
			[0,0,0],		//　緋
			[83,12,33],		//　葡萄
		];
	}
	case( 8 ){	//　やと
		_rect		= [ 1, 3 ];
		rgb_array	= [
			[150,178,34],	//　萌葱
			[131,180,150],	//　青磁
			[64,255,128],	//　青緑
			[102,60,107],	//　古代紫
		];
	}
	
	ObjPrim_SetTexture(obj, path[ tex_no ] );
	ObjRender_SetBlendType(obj, BLEND_ALPHA );
	Obj_SetRenderPriorityI(obj, lay );
	ObjPrim_SetPrimitiveType(obj, PRIMITIVE_TRIANGLESTRIP );
	ObjPrim_SetVertexCount(obj, 4 );
	ObjPrim_SetVertexPosition(obj, 0, -256, -128, 0 );
	ObjPrim_SetVertexPosition(obj, 1, -256, 128, 0 );
	ObjPrim_SetVertexPosition(obj, 2, 256, -128, 0 );
	ObjPrim_SetVertexPosition(obj, 3, 256, 128, 0 );
	ObjPrim_SetVertexUVT(obj, 0, 0 + _rect[0]*512, 0 + _rect[1]*256 );
	ObjPrim_SetVertexUVT(obj, 1, 0 + _rect[0]*512, 256 + _rect[1]*256 );
	ObjPrim_SetVertexUVT(obj, 2, 512 + _rect[0]*512, 0 + _rect[1]*256 );
	ObjPrim_SetVertexUVT(obj, 3, 512 + _rect[0]*512, 256 + _rect[1]*256 );
	
	while( !Obj_IsDeleted(CallID) && move1 < 1 ){
		move1 = 1 * sin( moveA );
		
		ObjRender_SetPosition(obj, pos[0] + 64 - move1*64, pos[1], 0 );
		ObjRender_SetScaleXYZ(obj, scale, move1*scale, 0 );
		ascent( let i in 0..4 ){
			ObjPrim_SetVertexAlpha(obj, i, move1*255 );
		}
		
		if( count > 0 && count%2 == 0 ){
			let spos = [
				ObjRender_GetX(obj) + rand(-96,96),
				ObjRender_GetY(obj) + move1*rand(-16,48),
			];
			DisCharge_IceCrystal01( spos, rand(0.2,0.3), 270, rand(0.2,0.4), move1*30, move1*rand(192,255), rgb_array, lay-1 );
		}
		
		count++;
		moveA += 0.5;
		
		yield;
	}
	count = 0;
	while( !Obj_IsDeleted(CallID) && count < kill ){
		
		if( count > 0 && count%6 == 0 ){
			let spos = [
				ObjRender_GetX(obj) + rand(-96,96),
				ObjRender_GetY(obj) + rand(-16,48),
			];
			DisCharge_IceCrystal01( spos, rand(0.2,0.3), 270, rand(0.4,0.6), 60, rand(192,255), rgb_array, lay-1 );
		}
		
		count++;
		
		yield;
	}
	while( !Obj_IsDeleted(CallID) && move1 > 0 ){
		move1 = 1 * sin( moveA );
		
		ObjRender_SetPosition(obj, pos[0] - 64 + move1*64, pos[1], 0 );
		ObjRender_SetScaleXYZ(obj, scale, move1*scale, 0 );
		ascent( let i in 0..4 ){
			ObjPrim_SetVertexAlpha(obj, i, move1*255 );
		}
		
		if( count > 0 && count%2 == 0 ){
			let spos = [
				ObjRender_GetX(obj) + rand(-96,96),
				ObjRender_GetY(obj) + move1*rand(-16,48),
			];
			DisCharge_IceCrystal01( spos, rand(0.2,0.3), 270, rand(0.2,0.4), move1*30, move1*rand(192,255), rgb_array, lay-1 );
		}
		
		count++;
		moveA += 0.5;
		
		yield;
	}
	Obj_Delete( obj );
}

//　氷クリスタルっぽいもの
task DisCharge_IceCrystal01( pos, speed, angle, scale, kill, alpha, rgb_array, layer ){
	let obj		= ObjPrim_Create(OBJ_SPRITE_2D);
	let csd		= GetCurrentScriptDirectory();
	let r_type	= 2;
	let count	= 0;
	let dis		= 0;
	let move1	= 0;
	let moveA	= 0;
	
	ObjPrim_SetTexture(obj, csd ~ "./../img/effect/ice01b.png" );
	ObjRender_SetBlendType(obj, BLEND_ALPHA );
	Obj_SetRenderPriorityI(obj, layer );
	ObjPrim_SetPrimitiveType(obj, PRIMITIVE_TRIANGLESTRIP );
	ObjRender_SetScaleXYZ(obj, scale, scale, 0 );
	ObjPrim_SetVertexCount(obj, 4 );
	ObjPrim_SetVertexPosition(obj, 0, -32, -32, 0 );
	ObjPrim_SetVertexPosition(obj, 1, -32, 32, 0 );
	ObjPrim_SetVertexPosition(obj, 2, 32, -32, 0 );
	ObjPrim_SetVertexPosition(obj, 3, 32, 32, 0 );
	ObjPrim_SetVertexUVT(obj, 0, 0, 64 );
	ObjPrim_SetVertexUVT(obj, 1, 0, 128 );
	ObjPrim_SetVertexUVT(obj, 2, 64, 64 );
	ObjPrim_SetVertexUVT(obj, 3, 64, 128 );
	
	while( count < kill ){
		move1 = 1 * sin( moveA );
		
		ObjRender_SetPosition(obj, pos[0] + dis * cos(angle), pos[1] + dis * sin(angle), 0 );
		if( count%r_type == 0 ){
			ascent( let i in 0..4 ){
				let w = truncate( (i+count)%4 );
				ObjPrim_SetVertexColor(obj, i, rgb_array[w][0], rgb_array[w][1], rgb_array[w][2] );
				ObjPrim_SetVertexAlpha(obj, i, move1*(alpha/rand(1,2)) );
			}
		}
		
		count++;
		dis += speed;
		if( move1 < 1 ){ moveA += 5; }
		
		yield;
	}
	while( move1 > 0 ){
		move1 = 1 * sin( moveA );
		
		ObjRender_SetPosition(obj, pos[0] + dis * cos(angle), pos[1] + dis * sin(angle), 0 );
		if( count%r_type == 0 ){
			ascent( let i in 0..4 ){
				ObjPrim_SetVertexColor(obj, i, rgb_array[i][0], rgb_array[i][1], rgb_array[i][2] );
				ObjPrim_SetVertexAlpha(obj, i, move1*alpha );
			}
		}
		else{
			ascent( let i in 0..4 ){
				let w = truncate( (i+count)%4 );
				ObjPrim_SetVertexColor(obj, i, rgb_array[w][0]/1.4, rgb_array[w][1]/1.4, rgb_array[w][2]/1.4 );
				ObjPrim_SetVertexAlpha(obj, i, move1*(alpha/rand(2,4)) );
			}
		}
		
		count++;
		dis += speed;
		moveA += 5;
		
		yield;
	}
	Obj_Delete( obj );
}

//　中ボスで撃破時の花散
task CreateLiberationEffect01_Boss( pos, speed, acc, mx, sca, rgb_array ){
	//　エフェクトカット設定
	if( GetAreaCommonData("Option", "Effect_Cut", 0 ) > 1 ){ return; }
	
	let ID		= ObjPrim_Create(OBJ_SPRITE_2D);
	let angleX	= rand(0,180);
	let angleY	= rand(0,180);
	let angle	= rand(0,360);
	let move1	= 0;
	let moveA	= 0;
	
	let angleXp	= rand(-5,5);
	let angleYp	= rand(-5,5);
	
	ObjRender_SetPosition(ID, pos[0], pos[1], 0 );
	ObjPrim_SetTexture(ID, effect_tex[3] );
	ObjRender_SetBlendType(ID, BLEND_ADD_ARGB );
	Obj_SetRenderPriorityI(ID, 32 );
	ObjRender_SetScaleXYZ(ID, sca, sca, 0 );
	ObjRender_SetColor(ID, rgb_array[0], rgb_array[1], rgb_array[2] );
	ObjSprite2D_SetSourceRect(ID, 64, 0, 128, 64 ) ;
	ObjSprite2D_SetDestCenter(ID);
	
	while( move1 < 1 ){
		move1 = 1 * sin( moveA );
		
		let spos = [
			ObjRender_GetX(ID) + speed * cos( angle ),
			ObjRender_GetY(ID) + speed * sin( angle ),
		];
		
		ObjRender_SetPosition(ID, spos[0], spos[1], 0 );
		ObjRender_SetAngleXYZ(ID, angleX, angleY, angle );
		ObjRender_SetAlpha(ID, move1*128 );
		
		angleX += angleXp;
		angleY += angleYp;
		moveA += 2;
		if( acc > 0 ){
			if( speed < mx ){
				speed += acc;
			}
		}
		else{
			if( speed > mx ){
				speed += acc;
			}
		}
		
		yield;
	}
	move1 = 0;
	moveA = 0;
	while( move1 < 1 ){
		move1 = 1 * sin( moveA );
		
		let spos = [
			ObjRender_GetX(ID) + speed * cos( angle ),
			ObjRender_GetY(ID) + speed * sin( angle ),
		];
		
		ObjRender_SetPosition(ID, spos[0], spos[1], 0 );
		ObjRender_SetAngleXYZ(ID, angleX, angleY, angle );
		ObjRender_SetScaleXYZ(ID, sca - move1*sca, sca - move1*sca, 0 );
		ObjRender_SetAlpha(ID, 128 - move1*128 );
		
		angleX += angleXp;
		angleY += angleYp;
		moveA += 1;
		if( acc > 0 ){
			if( speed < mx ){
				speed += acc;
			}
		}
		else{
			if( speed > mx ){
				speed += acc;
			}
		}
		
		yield;
	}
	Obj_Delete(ID);
}

//　中ボスで撃破時のアニメーション
task CreateLiberationEffect02_Boss(pos,speed,acc,mx,rgb_array){
	//　エフェクトカット設定
	if( GetAreaCommonData("Option", "Effect_Cut", 0 ) > 3 ){ return; }
	
	let ID		= ObjPrim_Create(OBJ_SPRITE_2D);
	let sca		= rand(0.2,0.8);
	let angle	= rand(0,360);
	let animc	= 0;
	let anim1	= 0;
	let anim2	= 0;
	
	ObjRender_SetPosition(ID, pos[0], pos[1], 0 );
	ObjPrim_SetTexture(ID, GetCurrentScriptDirectory() ~ "./../img/effect/bulletbreak02.png" );
	ObjRender_SetBlendType(ID, BLEND_ADD_ARGB );
	Obj_SetRenderPriorityI(ID, 31 );
	ObjRender_SetAngleXYZ(ID, 0, 0, angle );
	ObjRender_SetScaleXYZ(ID, sca, sca, 0 );
	ObjRender_SetColor(ID, rgb_array[0], rgb_array[1], rgb_array[2] );
	ObjSprite2D_SetSourceRect(ID, 0 + 128*anim1, 0 + 128*anim2, 128 + 128*anim1, 128 + 128*anim2 ) ;
	ObjSprite2D_SetDestCenter(ID);
	
	while( anim2 < 4 ){
		let spos = [
			ObjRender_GetX(ID) + speed * cos( angle ),
			ObjRender_GetY(ID) + speed * sin( angle ),
		];
		
		ObjRender_SetPosition(ID, spos[0], spos[1], 0 );
		ObjSprite2D_SetSourceRect(ID, 0 + 128*anim1, 0 + 128*anim2, 128 + 128*anim1, 128 + 128*anim2 ) ;
		
		if( acc > 0 ){
			if( speed < mx ){
				speed += acc;
			}
		}
		else{
			if( speed > mx ){
				speed += acc;
			}
		}
		animc++;
		if( animc > 0 && animc%2 == 0 ){
			anim1++;
			if( anim1 >= 4 ){
				anim1 = 0;
				anim2++;
			}
		}
		
		yield;
	}
	Obj_Delete(ID);
}